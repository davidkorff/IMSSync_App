Stored Procedure Name	Definition
Ascot_SaveProgramCodesExpenseFactors	CREATE PROCEDURE [dbo].[Ascot_SaveProgramCodesExpenseFactors]  (   @ProgramID INT,   @Fronting DECIMAL(6, 3),   @BBT DECIMAL(6, 3),   @LPSafety DECIMAL(6, 3),   @Spec DECIMAL(6, 3),    @ADPCat DECIMAL(6, 3),   @Basket DECIMAL(6, 3),   @AggStopLoss DECIMAL(6, 3),   @AddlCaptiveManagement DECIMAL(6, 3),   @ExcessLoss DECIMAL(6, 3)  )  AS      IF NOT EXISTS(SELECT ProgramID FROM Greyhawk_tblProgramCodeExpenseFactors WHERE  ProgramID = @ProgramID)    BEGIN     INSERT INTO Greyhawk_tblProgramCodeExpenseFactors     (ProgramID, Fronting, BBT, LPSafety, Spec, ADPCat, Basket, AggStopLoss, AddlCaptiveManagement,ExcessLoss)     SELECT @ProgramID, @Fronting, @BBT, @LPSafety, @Spec, @ADPCat, @Basket, @AggStopLoss, @AddlCaptiveManagement, @ExcessLoss    END   ELSE    BEGIN     UPDATE Greyhawk_tblProgramCodeExpenseFactors     SET Fronting = @Fronting,       BBT = @BBT,       LPSafety = @LPSafety,       Spec = @Spec,      ADPCat = @ADPCat,       Basket = @Basket,       AggStopLoss = @AggStopLoss,       AddlCaptiveManagement = @AddlCaptiveManagement,      ExcessLoss = @ExcessLoss     WHERE  ProgramID = @ProgramID    END      RETURN
Ascot_AL3TransferData_Zywave_IM	CREATE PROCEDURE [dbo].[Ascot_AL3TransferData_Zywave_IM]   @ImportLogID int  AS  BEGIN    DECLARE @CaptiveLineGuid uniqueidentifier        DECLARE    @ProducerLocationID INT,  @LineID INT,  @CompanyLocationCode INT,  @StartingOnPoliciesEffective smalldatetime,   @QuotingLocationGuid UNIQUEIDENTIFIER,  @IssuingLocationGuid UNIQUEIDENTIFIER,   @UnderwriterGuid UNIQUEIDENTIFIER,   @IssuedByUserID INT,  @BoundByUserID INT,  @CostCenterID INT,   @BrokerCommissionFeeChargeCode INT,   @ProgramID INT,   @UnderwritingAssistantGuid UNIQUEIDENTIFIER,   @AutoApplyFees INT,   @CopYNotesandDocs BIT,   @ProducerContactID INT,   @SourceID INT,  @BillingTypeID INT,  @ZywaveInlandMarineConstruction INT,  @ZywaveInlandMarineBuildersRisk INT,  @ZywaveCEFac INT,  @ZywaveBMFac INT,  @ZywaveInlandMarineConstructionVal decimal(18, 2),  @ZywaveInlandMarineBuildersRiskVal decimal(18, 2),  @ZywaveCEFacVal decimal(18, 2),  @ZywaveBMFacVal decimal(18, 2),      @ZywaveInlandMarineBuildersRiskTRIA INT,  @ZywaveInlandMarineConstructionTRIA INT        SELECT @ProducerLocationID  =  ProducerLocationID,  @LineID  =   v.LineID ,  @CompanyLocationCode  = CompanyLocationCode,   @StartingOnPoliciesEffective  = StartingOnPoliciesEffective,  @QuotingLocationGuid =  QuotingLocationGuid,  @IssuingLocationGuid =  IssuingLocationGuid,  @UnderwriterGuid =  UnderwriterGuid,  @IssuedByUserID = IssuedByUserID,  @BoundByUserID  = BoundByUserID,  @CostCenterID =  CostCenterID,  @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,  @ProgramID = ProgramID,  @UnderwritingAssistantGuid = UnderwritingAssistantGuid,  @AutoApplyFees = AutoApplyFees,  @CopYNotesandDocs = CopYNotesandDocs,  @ProducerContactID  =  ProducerContactID,  @SourceID =  SourceID,  @BillingTypeID  = BillingTypeID,  @CaptiveLineGuid = LineGuid    from ASCOT_tblAL3ProgramConfigurations_V2  v join lstlines l on l.LineID = V.LineID  where l.LineName like '%Zywave - Inland Marine & Property%'      SELECT @IssuingLocationGuid= CompanyLocationGuid from tblCompanyLocations  where LocationName in(Select SUBSTRING(Company, 1, CHARINDEX('(', Company) - 2) from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid=@importlogId)      select @ZywaveInlandMarineConstruction=Lineid from lstlines where linename ='Zywave - Inland Marine Construction'  select @ZywaveInlandMarineBuildersRisk=Lineid from lstlines where linename ='Zywave - Inland Marine Builders Risk'  select @ZywaveCEFac=Lineid from lstlines where linename ='Zywave - CE Fac'  select @ZywaveBMFac=Lineid from lstlines where linename ='Zywave - B&M Fac'      select @ZywaveInlandMarineBuildersRiskTRIA=Lineid from lstlines where linename ='ZywaveInlandMarineBuildersRiskTRIA'  select @ZywaveInlandMarineConstructionTRIA=Lineid from lstlines where linename ='ZywaveInlandMarineConstructionTRIA'    Declare @RiskState nvarchar(20)  /* Premium,riskstate blank in XML for lost/Decline/not takenup */    --Select @RiskState=RiskState from Ascot_AL3ImportPremiumState_Zywave_IM where ImportLogID=@importlogId    if exists (select 1 from Ascot_AL3ImportPremiumState_Zywave_IM where ImportLogID=@importlogId)  begin  Select  top 1 @RiskState=RiskState from Ascot_AL3ImportPremiumState_Zywave_IM where ImportLogID=@importlogId  end  else   begin  Select @RiskState=InsuredState from ASCOT_AL3ImportPolicy_Zywave_IM where ImportLogID=@importlogId  end  ---Ends here   --Declare @InsuredId int      --SELECT @InsuredId = InsuredId    --FROM tblInsureds i   --JOIN ASCOT_AL3ImportPolicy_Zywave Z ON Z.InsuredName = I.Name   --WHERE Z.ImportLogID = @ImportLogID       INSERT INTO ASCOT_AL3PolicyMasterTable_V2   (   [ProgramID],   [GroupNumber],   [PolicyNumber],   [PolicyEffectiveDate],   [PolicyExpirationDate],   [PolicyIndicator],   [TransactionEffectiveDate] ,   [ExpringPolicyNumber],   [ClaimsMadePolicyIndicator],   [PriorActions],   [RetroactiveDate],   [DiscoveryDate],   [InsuredName],   [DBAName] ,   [InsuredAddress],   [InsuredCity] ,   [InsuredState],   [InsuredZip],   [InsuredCounty],   [RiskLocationIndicator],   [SICCode],   [TypeOfPolicy],   [SystemDate],   [AccountingDate],   [SubmissionDate],   [PremiumAmount],   [PremiumState],   [CompanyCode],   [CompanyContactCode],   [ProducerCode],   [ProducerContactCode],   [QuotingOfficeLocationCode],   [IssuingOfficeLocationCode],   [PolicyTransactionID],   [LineCode],   [StateOfIssuance],   [AccountNumber],   [RewriteOfAccountNumber],   [RenewalOfAccountNumber],   [InsuredID] ,   [DateIssued],   [Error],   [ErrorTime] ,   [DateProcessed],   [ErrorMessage],   [ProcessedBy] ,   [Note],   [DnlTrId],   [DocumentImage],   [DocumentStoreGuid],   [DocStoreFileAssociation],   [DocStoreFileName],   [DocStoreCompressed],   [DocStoreAssociatedEntityType],   [DocStoreAssociatedEntityName],   [DocStoreAssociatedEntityFormName],   [DocStoreContext],   [DocStoreOriginalFileSize],   [CreatedQuoteID],   [BrokerCommissionPercent],   [TerrorismPremium],   [NumInstallments],   [QuoteStatusReasonID],   [EndorsementComment],   [ImportLogID],   [BillDate],   [EndorsementType],   [BusinessTypeID] ,   [InsuredFirstName],   [InsuredLastName],   [InsuredAddress2] ,   [producerComm],   [companyComm],   UniqueTransactionID   )       SELECT    --ProgramID      0,--@ProgramID,--ASCOT_AL3ImportPolicy_Zywave.ProgramID,      --GroupNumber      NULL,      --PolicyNumber      ASCOT_AL3ImportPolicy_Zywave_IM.PolicyNo,      --PolicyEffectiveDate    --MHW -- Do a case here for endts to pick up the right dates      --CONVERT(varchar(11), CONVERT(datetime, RISKINCEPTIONDATE), 101),      --case when isdate(ASCOT_AL3ImportPolicy_AmFed.RISKINCEPTIONDATE) = 1 then convert(datetime, ASCOT_AL3ImportPolicy_AmFed.RISKINCEPTIONDATE) else NULL end,      --case when isdate(ASCOT_AL3ImportPolicy_Highland_Part2.RISKINCEPTIONDATE) = 1 then convert(varchar(11), convert(datetime, ASCOT_AL3ImportPolicy_Highland_Part2.RISKINCEPTIONDATE), 101) else NULL end,      --case when isdate(ASCOT_AL3ImportPolicy_AmFed.effectivedate) = 1 then convert(varchar(11), convert(datetime, ASCOT_AL3ImportPolicy_AmFed.effectivedate), 101) else NULL end,      ASCOT_AL3ImportPolicy_Zywave_IM.PolicyEffDate,                --PolicyExpirationDate          ASCOT_AL3ImportPolicy_Zywave_IM.PolicyExpDate,            --PolicyIndicator           CASE ASCOT_AL3ImportPolicy_Zywave_IM.TransType                    when 'NB' THEN 'N'--New Business                   when 'CN' THEN 'C'--cancellation         when 'EN' THEN 'E'--endorsement         when 'RB' Then 'R' -- Renewal         when 'New Business' THEN 'N'--New Business         when 'Cancel' THEN 'C'--cancellation         when 'New' THEN 'N'--New Business         when 'Cancellation' THEN 'C'--cancellation         when 'Renewal' THEN 'R'--Renewal         when 'Endorsement' THEN 'E'--endorsement         when 'Reinstate' then 'W'         when 'Reinstatement' then 'W'          when 'Cancellation - Flat' THEN 'C'--cancellation  Pro Rated          when 'Cancellation - Pro-Rated' THEN 'C'--cancellation  Pro Rated          when 'Soft Delete' THEN 'C'       when 'Rewrite' THEN 'R'         ELSE ''        END,      --TransactionEffectiveDate      ASCOT_AL3ImportPolicy_Zywave_IM.TransactionEffectiveDate,    --Added Rewrite case on 12/02/2025---for rewrite Note generation----     --ExpiringPolicyNumber      --NULL,  -- Not being supplied by Amfed       case when ASCOT_AL3ImportPolicy_Zywave_IM.TransType='Renewal'       --then (select top 1 PolicyNo from ASCOT_AL3ImportPolicy_Zywave_IM where ControlNo = ASCOT_AL3ImportPolicy_Zywave_IM.ControlNo) -- (select controlno from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid = @importlogid))      --then (select top 1 PolicyNo from ASCOT_AL3ImportPolicy_Zywave_IM where ControlNo = (select controlno from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid = @importlogid))      then (select PolicyNumber from tblQuotes where quoteguid = (select quoteguid from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid = @importlogid))       when ASCOT_AL3ImportPolicy_Zywave_IM.TransType='Rewrite'       --then (select top 1 PolicyNo from ASCOT_AL3ImportPolicy_Zywave_IM where ControlNo = ASCOT_AL3ImportPolicy_Zywave_IM.ControlNo) -- (select controlno from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid = @importlogid))      --then (select top 1 PolicyNo from ASCOT_AL3ImportPolicy_Zywave_IM where ControlNo = (select controlno from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid = @importlogid))      then (select PolicyNumber from tblQuotes where quoteguid = (select quoteguid from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid = @importlogid))          else null end,      --ClaimsMadePolicyIndicator      NULL,      --PriorActions      NULL,      --RetroactiveDate      NULL,      --DiscoveryDate      NULL,      --InsuredName         ASCOT_AL3ImportPolicy_Zywave_IM.InsuredName,      --CASE WHEN ISNULL(ASCOT_AL3ImportPolicy_Zywave_IM.InsuredName, '') <> ''      -- THEN ASCOT_AL3ImportPolicy_Zywave_IM.InsuredName           --END,    --DBAName      NULL,      --InsuredAddress          ASCOT_AL3ImportPolicy_Zywave_IM.InsuredAddress1,      --InsuredCity          ASCOT_AL3ImportPolicy_Zywave_IM.InsuredCity,      --InsuredState              ASCOT_AL3ImportPolicy_Zywave_IM.InsuredState,            --InsuredZip          ASCOT_AL3ImportPolicy_Zywave_IM.InsuredZip,      --InsuredCounty      NULL,            --RiskLocationindicator      NULL,      --SICCode      NULL,      --TypeOfPolicy      NULL,     -- ASCOT_AL3ImportPolicy_Zywave_IM.PolicyType,        --SystemDate      CONVERT(varchar(11), GETDATE(), 101),      --AccountingDate      CONVERT(varchar(11), GETDATE(), 101),      --SubmissionDate      CONVERT(varchar(11), GETDATE(), 101),      --PremiumAmount            --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,   ASCOT_AL3ImportPolicy_Zywave_IM.TotalPremium,        --PremiumState        @RiskState,--ASCOT_AL3ImportPolicy_Zywave_IM.InsuredState,           --CompanyCode              --CompanyCodeTable.CompanyLocationCode,       CASE WHEN ASCOT_AL3ImportPolicy_Zywave_IM.Company = 'Ascot Specialty Insurance Company (ASIC)' THEN 1         WHEN ASCOT_AL3ImportPolicy_Zywave_IM.Company = 'Ascot Insurance Company (AIC)' THEN 2          ELSE 0          END,      --CompanyContactCode      0,      --ProducerCode         ProducerCodeTable.ProducerLocationID,      --ProducerContactCode      0, -- select * from tblProducerContacts where fname like '%Amfed AIC%'      --QuotingOfficeLocationCode      0,      --IssuingOfficeLocationCode      0,      --PolicyTransactionID     ---policytransactionid ---use the id column from ASCOT_AL3ImportPolicy_BondPro table  and populate the policytransaction id in the master table      ASCOT_AL3ImportPolicy_Zywave_IM.ID,      --LineCode          --select * from lstLines where LineName like '%compensation%'      @LineID,      --StateOfIssuance            @RiskState,--ASCOT_AL3ImportPolicy_Zywave_IM.InsuredState,      --AccountNumber      --MHW Need to append policy Number       ASCOT_AL3ImportPolicy_Zywave_IM.PolicyNo AS AccountNumber,    ----Added on 12/02/2025---For genereate Rewriteaccountnumber and note for rewrite-----    --RewriteOfAccountNumber     case when(ASCOT_AL3ImportPolicy_Zywave_IM.transtype='Rewrite')  then (select PolicyNumber from tblQuotes where quoteguid = (select quoteguid from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid = @importlogid))     else NULL END,  -- AmFed is not doing rewrites             --ASCOT_AL3ImportPolicy_Zywave_IM.ControlNo,      --RenewalOfAccountNumber          --NULL,--ASCOT_AL3ImportPolicy_AmFed.expPolicy,      ASCOT_AL3ImportPolicy_Zywave_IM.ControlNo,      --InsuredID          --MHW Anderson said we need some sort of ID to uniquely identify the insured.        --ASCOT_AL3ImportPolicy_Zywave_IM.PolicyNo      case when ASCOT_AL3ImportPolicy_Zywave_IM.PolicyNo is null and isnull(ASCOT_AL3ImportPolicy_Zywave_IM.Reasonid,0) <> 0        then ASCOT_AL3ImportPolicy_Zywave_IM.InsuredName else ASCOT_AL3ImportPolicy_Zywave_IM.PolicyNo end,        --DateIssued           null,      --Error      NULL,      --ErrorTime       NULL,      --DateProcessed      NULL,      --ErrorMessage      NULL,      --ProcessedBy      NULL,      --Note      NULL,      --DnlTrId      NEWID(),      --DocumentImage      NULL,      --DocumentStoreGuid      NULL,      --DocStoreFileAssociation      NULL,      --DocStoreFileName      NULL,      --DocStoreCompressed      NULL,      --DocStoreAssociatedEntityType      NULL,      --DocStoreAssociatedEntityName      NULL,      --DocStoreAssociatedEntityFormName      NULL,      --DocStoreContext      NULL,      --DocStoreOriginalFileSize      NULL,      --CreatedQuoteID      NULL,      --BrokerCommissionPercent      NULL,      --TerrorismPremium        --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1     --                  THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)    --                  ELSE 0    --              END,        0,      --NumInstallments          NULL,--1,      --QuoteStatusReasonID      ASCOT_AL3ImportPolicy_Zywave_IM.ReasonID,      --EndorsementComment      NULL,      --ImportLogID      ASCOT_AL3ImportPolicy_Zywave_IM.ImportLogID,      --BillDate      NULL,    --EndodrsementType      NULL,      --BusinessType      NULL,        --InusredFirstName      NULL,       --InusredLasttName      NULL,       --InsuredAddress2      ASCOT_AL3ImportPolicy_Zywave_IM.InsuredAddress2,          ASCOT_AL3ImportPolicy_Zywave_IM.ProducerCommission, --producerComm,        NULL,--companyComm      --UniqueTransactionID      null --?     FROM  ASCOT_AL3ImportPolicy_Zywave_IM   OUTER APPLY (       SELECT TOP 1 tblProducerLocations.ProducerLocationID       FROM tblProducerLocations       --WHERE tblProducerLocations.[Name] = ASCOT_AL3ImportPolicy_BondPro.ProducerSuppliedInSourcedata       WHERE tblProducerLocations.ProducerLocationGUID = ASCOT_AL3ImportPolicy_Zywave_IM.ProducerLocationGUID      ) AS ProducerCodeTable   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = ASCOT_AL3ImportPolicy_Zywave_IM.InsuredState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave_IM.Company      ) AS CompanyCodeTable     --OUTER APPLY (   --   SELECT TOP 1 tblQuotes.ControlNo,   --      tblQuotes.QuoteGUID,   --      tblQuotes.QuoteID,   --      tblQuotes.AccountNumber   --     FROM tblQuotes   --     WHERE tblQuotes.PolicyNumber = ASCOT_AL3ImportPolicy_AmFed.ExpiringPolicyNumber   --     ORDER BY tblQuotes.QuoteID DESC   --    ) AS ExpiringPolicyTable       WHERE  ASCOT_AL3ImportPolicy_Zywave_IM.ImportLogID = @ImportLogID     --DnlTrId has been created so now set it in the data tables       UPDATE ASCOT_AL3ImportPolicy_Zywave_IM SET DnlTrId = AL3MasterTable.DnlTrId   FROM ASCOT_AL3ImportPolicy_Zywave_IM   CROSS APPLY (       SELECT TOP 1 ASCOT_AL3PolicyMasterTable_V2.DnlTrId       FROM ASCOT_AL3PolicyMasterTable_V2       WHERE ASCOT_AL3PolicyMasterTable_V2.PolicyTransactionID = ASCOT_AL3ImportPolicy_Zywave_IM.ID       --policytransactionid ---use the id column from ASCOT_AL3ImportPolicy_AmFed table  since thsi is an import from excel vs comming from existing database where we can use the quoteid of teh source.       AND ASCOT_AL3PolicyMasterTable_V2.ImportLogID = ASCOT_AL3ImportPolicy_Zywave_IM.ImportLogID       )AS AL3MasterTable   WHERE ASCOT_AL3ImportPolicy_Zywave_IM.ImportLogID = @ImportLogID        IF OBJECT_ID('tempdb..#temp') IS NOT NULL BEGIN DROP TABLE #temp END    SELECT * INTO #temp from  (  SELECT ImportLogID, zywaveid,CoverageType,              SUM(CAST(CoverageTypeValue AS decimal(18, 2))) AS CoverageTypeValue       FROM Ascot_AL3ImportPremiumRiskCoverage_IM    where ImportLogID = @ImportLogID    GROUP BY ImportLogID, zywaveid,CoverageType  ) a  --------------------------------------------TRIA----------------------------------------------------------------------------   IF OBJECT_ID('tempdb..#tempTRIA') IS NOT NULL BEGIN DROP TABLE #tempTRIA END    SELECT * INTO #tempTRIA from  (  SELECT ImportLogID, zywaveid,CoverageType,              SUM(CAST(CoverageTypeValue AS decimal(18, 2))) AS CoverageTypeValue       FROM Ascot_AL3ImportTRIARiskCoverage_IM    where ImportLogID = @ImportLogID    GROUP BY ImportLogID, zywaveid,CoverageType  ) TRIADT       ------------------------------------- CHILD LINE ENTERIES -----------------------------------------  IF OBJECT_ID('tempdb..#temp_IM') IS NOT NULL BEGIN DROP TABLE #temp_IM END  SELECT   IMPZ.DnlTrId as DnlTrId,   IMPZ.ImportLogID as ImportLogID,   IMPZ.InsuredState as InsuredState,      PRC.RiskState as RiskState,     CASE WHEN PRC.CoverageType = 'ZywaveBMFac' THEN 454   WHEN PRC.CoverageType = 'ZywaveCEFac' THEN 453   WHEN PRC.CoverageType = 'ZywaveInlandMarineBuildersRisk' THEN 451   WHEN PRC.CoverageType = 'ZywaveInlandMarineConstruction' THEN 452   ELSE null   END AS LineCode,        PRC.CoverageType AS CoverageType,      isnull(PRC.CoverageTypeValue,0) AS CoverageValue,      TRC.CoverageType as CoverageTypeTRIA,      isnull(TRC.CoverageTypeValue,0)AS CoverageValueTRIA     into #temp_IM    FROM      (   SELECT ZywaveID, ImportLogID, CoverageType,SUM(CoverageTypeValue) CoverageTypeValue,RiskState   FROM   (     SELECT DISTINCT  ZywaveID, ImportLogID, CoverageType, cast(CoverageTypeValue as money) CoverageTypeValue, RiskState     FROM Ascot_AL3ImportPremiumRiskCoverage_IM     WHERE ImportLogID = @ImportLogID    )A    group by ZywaveID, ImportLogID, CoverageType,RiskState) PRC  LEFT JOIN       (   SELECT ZywaveID, ImportLogID, CoverageType,SUM(CoverageTypeValue) CoverageTypeValue,RiskState   FROM   (   SELECT DISTINCT  ZywaveID, ImportLogID, CoverageType, (cast(CoverageTypeValue as money)) CoverageTypeValue, RiskState       FROM Ascot_AL3ImportTRIARiskCoverage_IM       WHERE ImportLogID = @ImportLogID   )A   group by ZywaveID, ImportLogID, CoverageType,RiskState) TRC  ON       PRC.RiskState = TRC.RiskState AND      PRC.ZywaveID = TRC.ZywaveID AND      PRC.ImportLogID = TRC.ImportLogID AND      (          (PRC.CoverageType = 'ZywaveInlandMarineBuildersRisk' AND TRC.CoverageType = 'ZywaveInlandMarineBuildersRiskTRIA') OR          (PRC.CoverageType = 'ZywaveInlandMarineConstruction' AND TRC.CoverageType = 'ZywaveInlandMarineConstructionTRIA')      )      join ASCOT_AL3ImportPolicy_Zywave_IM IMPZ on PRC.ImportLogID = IMPZ.ImportLogID AND PRC.ZywaveID = IMPZ.ZywaveID  WHERE      PRC.CoverageType IN ('ZywaveBMFac', 'ZywaveCEFac', 'ZywaveInlandMarineBuildersRisk', 'ZywaveInlandMarineConstruction')  ------------------------------------------------------------   INSERT INTO Ascot_AL3QuoteDetailTable_v2(DnlTrId, CompanyLocationCode, LineCode, StateID, Premium, Terrorism, ImportLogID)       Select     Dnltrid,    CompanyCodeTable.CompanyLocationCode,    LineCode,    RiskState,    CoverageValue,    CoverageValueTRIA,    importlogid        from #temp_IM t    OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = t.InsuredState         AND tblCompanyLines.CompanyLocationGUID = @IssuingLocationGuid                         --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave_IM.Company      ) AS CompanyCodeTable      -----------------------------------------------------------------------------------------------------------------------------------------    IF OBJECT_ID('tempdb..#temp_IM_Fees') IS NOT NULL BEGIN DROP TABLE #temp_IM_Fees END     Declare @CoverageType nvarchar(100)   Set @CoverageType=(Select Top 1 CoverageType from Ascot_AL3ImportPremiumRiskCoverage_IM where ImportLogID=@importlogId and CoverageTypeValue<>'0.00')   Declare @DnlTrID uniqueIdentifier= (Select DnlTrID from ASCOT_AL3ImportPolicy_Zywave_IM where ImportLogID=@importlogId) ---25/10     SELECT     --DT.DnlTrID AS DnlTrID,    @DnlTrID AS DnlTrID,    DT.TaxState AS StateID,    DT.InsuredState as InsuredState,    NULL AS OfficeID,     DT.TaxCode AS TaxCode,     DT.TaxAmount AS FeeAmount ,    DT.TaxName AS TaxName,    DT.CoverageType As CoverageType,    DT.CoverageTypeValue as CoverageTypeValue,    CASE WHEN @CoverageType = 'ZywaveBMFac' THEN 454      WHEN @CoverageType = 'ZywaveCEFac' THEN 453      WHEN @CoverageType = 'ZywaveInlandMarineBuildersRisk' THEN 451      WHEN @CoverageType = 'ZywaveInlandMarineConstruction' THEN 452      ELSE null      END AS LineCode    INTO #temp_IM_Fees    FROM    (     SELECT STI.PolicyNo, STI.StateTaxID, STI.ImportLogID, STI.ZywaveID, STI.TaxState, STI.TaxCode, STI.TaxAmount, STI.TaxName,PRC.CoverageType,PRC.CoverageTypeValue, IMPZ.Dnltrid,IMPZ.InsuredState,      ROW_NUMBER() OVER (PARTITION BY STI.StateTaxID, STI.ZywaveID ORDER BY STI.TaxAmount DESC) AS rn FROM Ascot_AL3ImportStatetaxinfo_Zywave_IM STI    join AScot_al3ImportPremiumState_Zywave_IM PSZI on PSZI.ImportLogId=STI.ImportLogID    left JOIN Ascot_AL3ImportTRIARiskCoverage_IM TRC ON TRC.ImportLogID = STI.ImportLogID OR TRC.ZywaveID = STI.ZywaveID     JOIN Ascot_AL3ImportPremiumRiskCoverage_IM PRC ON STI.ImportLogID = PRC.ImportLogID  and PSZI.RiskStateId=PRC.RiskSTateID    JOIN ASCOT_AL3ImportPolicy_Zywave_IM IMPZ ON  IMPZ.PolicyNo = STI.PolicyNo AND IMPZ.ZywaveID = STI.ZywaveID    left JOIN ( SELECT RiskStateID, ZywaveID, ImportLogID, CoverageType, CoverageTypeValue    FROM Ascot_AL3ImportTRIARiskCoverage_IM ) c ON STI.ImportLogID = c.ImportLogID-- OR TRC.RiskStateID = c.RiskStateID     WHERE STI.ImportLogID =  @importLogId )AS DT WHERE rn = 1         INSERT INTO Ascot_AL3FeesTable(ImportLogID, DnlTrID, CompanyLocationCode, LineID, StateID, OfficeID, ChargeCode, FeeAmount)              Select       @ImportLogID,      Dnltrid,      CompanyCodeTable.CompanyLocationCode,      LineCode,      t.StateID,      NULL,      fpc.ChargeCode,      t.FeeAmount          from #temp_IM_Fees t       join tblFin_PolicyCharges fpc on fpc.ChargeCode = t.TaxCode       OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.StateID = t.InsuredState       AND tblCompanyLines.CompanyLocationGUID = @IssuingLocationGuid       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave_IM.Company      ) AS CompanyCodeTable        END  
NetRateSplitPremiumByLOB	  Create PROCEDURE [dbo].[NetRateSplitPremiumByLOB]   @QuoteID int,   --@ProgramID int,   @ProcessSessionGuid uniqueidentifier  AS  BEGIN        DECLARE @LOBSplit TABLE   (    LineGuidFrom uniqueidentifier,    LineNameFrom varchar(100),    LineGuidTo uniqueidentifier,    LineNameTo varchar(100),    ParticipationPercentage decimal(9, 8)   )     INSERT INTO @LOBSplit      SELECT    DISTINCT dbo.Ascot_tblCaptivePremiumSplits.LineGUIDFrom,       lstLines.LineName as LineNameFrom,      dbo.Ascot_tblCaptivePremiumSplits.LineGUIDTo,       llTo.LineName as LineNameTo,      dbo.Ascot_tblCaptivePremiumSplits.SplitPct   FROM  dbo.tblQuotes    INNER JOIN dbo.tblQuoteDetails      ON dbo.tblQuotes.QuoteGUID = dbo.tblQuoteDetails.QuoteGuid    INNER JOIN dbo.Ascot_ParentCaptiveProgamsCodes      ON dbo.tblQuoteDetails.ProgramID = dbo.Ascot_ParentCaptiveProgamsCodes.ProgramID    INNER JOIN dbo.Ascot_tblCaptivePremiumSplits      ON dbo.Ascot_ParentCaptiveProgamsCodes.ParentID = dbo.Ascot_tblCaptivePremiumSplits.ParentID    INNER JOIN dbo.tblCompanyLines      ON dbo.tblQuoteDetails.CompanyLineGuid = dbo.tblCompanyLines.CompanyLineGUID    INNER JOIN dbo.lstLines      ON dbo.tblCompanyLines.LineGUID = dbo.lstLines.LineGUID      AND dbo.Ascot_tblCaptivePremiumSplits.LineGUIDFrom = dbo.lstLines.LineGUID   INNER JOIN dbo.lstLines llTo     ON dbo.Ascot_tblCaptivePremiumSplits.LineGUIDTo = llTo.LineGUID   WHERE       dbo.tblQuotes.QuoteId = @QuoteID     --select '@LOBSplit' as tablename, * from @LOBSplit           IF OBJECT_ID('tempdb..#SplitPremiumTable') IS NOT NULL   BEGIN      DROP TABLE #SplitPremiumTable     END     CREATE TABLE #SplitPremiumTable   (    TransactionPremiumID int,    LineGuidFrom uniqueidentifier,    LineGuid uniqueidentifier,    ChargeID varchar(100),    TargetedPercent decimal(9, 8),    OriginalPremium money,    UpdatedPremium money,    SplitPremium money   )     INSERT INTO #SplitPremiumTable     SELECT        /* for debugging        SplitTable.LineNameTo,       SplitTable.LineNameFrom,       tblNetRateTransactionPremium.Premium,       tblNetRateTransactionPremium.CalculationInclusion,       tblNetRateTransactionPremium.PremiumType      */      tblNetRateTransactionPremium.ID,      SplitTable.LineGuidFrom,      SplitTable.LineGuidTo as LineGuid,      tblNetRateTransactionPremium.ApplyToChargeID,      SplitTable.ParticipationPercentage,      tblNetRateTransactionPremium.Premium as OriginalPremium,      (        tblNetRateTransactionPremium.Premium        - ROUND(tblNetRateTransactionPremium.Premium * SplitTable.ParticipationPercentage, 2)      ) as UpdatedPremium,      (       ROUND(tblNetRateTransactionPremium.Premium * SplitTable.ParticipationPercentage, 2)       ) as SplitPremium   FROM  tblNetRateTransactionPremium   INNER JOIN lstNetRateLOBCodes      ON tblNetRateTransactionPremium.ApplyToLOB = lstNetRateLOBCodes.NetRateLOBID   INNER JOIN lstLines      ON lstNetRateLOBCodes.NetRate_LOB_Code = lstLines.NetRate_LOB_Code   CROSS JOIN @LOBSplit SplitTable   WHERE  tblNetRateTransactionPremium.QuoteID = @QuoteID   AND   tblNetRateTransactionPremium.ProcessSessionGuid = @ProcessSessionGuid   AND   SplitTable.LineGuidFrom = lstLines.LineGUID   --and   tblNetRateTransactionPremium.CalculationInclusion = 1   --used for debugging   --and   tblNetRateTransactionPremium.PremiumType = 396 --(157, 396)  --396 --248         --select '#SplitPremiumTable Start' as tablename, * from #SplitPremiumTable order by TransactionPremiumID     IF EXISTS(SELECT * FROM tblNetRateTransactionPremium      CROSS APPLY (          SELECT SUM(SplitPremium) As SplitPremium,           SUM(UpdatedPremium) as UpdatedPremium          FROM #SplitPremiumTable S           WHERE S.TransactionPremiumID = tblNetRateTransactionPremium.ID         ) As SplitPremiumTable      WHERE SplitPremiumTable.SplitPremium + SplitPremiumTable.UpdatedPremium <> tblNetRateTransactionPremium.Premium      AND tblNetRateTransactionPremium.QuoteID = @QuoteID      AND tblNetRateTransactionPremium.ProcessSessionGuid = @ProcessSessionGuid)   BEGIN        WHILE EXISTS(SELECT tblNetRateTransactionPremium.ID       FROM tblNetRateTransactionPremium       INNER JOIN #SplitPremiumTable SubS ON tblNetRateTransactionPremium.ID = SubS.TransactionPremiumID       WHERE tblNetRateTransactionPremium.QuoteID = @QuoteID       AND tblNetRateTransactionPremium.ProcessSessionGuid = @ProcessSessionGuid       GROUP BY tblNetRateTransactionPremium.ID,         tblNetRateTransactionPremium.Premium       HAVING SUM(SubS.SplitPremium + SubS.UpdatedPremium) <> tblNetRateTransactionPremium.Premium)    BEGIN       --select 'here2'         SELECT  tblNetRateTransactionPremium.ID,        sum(SubS.SplitPremium + SubS.UpdatedPremium) as SplitPremium,        tblNetRateTransactionPremium.Premium       FROM tblNetRateTransactionPremium       INNER JOIN #SplitPremiumTable SubS ON tblNetRateTransactionPremium.ID = SubS.TransactionPremiumID       WHERE tblNetRateTransactionPremium.QuoteID = @QuoteID       AND tblNetRateTransactionPremium.ProcessSessionGuid = @ProcessSessionGuid       GROUP BY tblNetRateTransactionPremium.ID,         tblNetRateTransactionPremium.Premium       HAVING SUM(SubS.SplitPremium + SubS.UpdatedPremium) <> tblNetRateTransactionPremium.Premium       DECLARE @CursorTransactionPremiumID int     DECLARE @CursorLineGuid uniqueidentifier       DECLARE PremiumCursor CURSOR FAST_FORWARD      FOR SELECT tblNetRateTransactionPremium.ID,         S.LineGuid       FROM tblNetRateTransactionPremium       INNER JOIN #SplitPremiumTable S ON tblNetRateTransactionPremium.ID = S.TransactionPremiumID       CROSS APPLY (           SELECT SUM(SubS.SplitPremium + SubS.UpdatedPremium) As AggregatedSplitPremium           FROM #SplitPremiumTable SubS           WHERE SubS.TransactionPremiumID = S.TransactionPremiumID          ) As AggregatedSplitPremiumTable       WHERE tblNetRateTransactionPremium.QuoteID = @QuoteID       AND tblNetRateTransactionPremium.ProcessSessionGuid = @ProcessSessionGuid       AND AggregatedSplitPremiumTable.AggregatedSplitPremium <> tblNetRateTransactionPremium.Premium       OPEN PremiumCursor         FETCH NEXT FROM  PremiumCursor INTO @CursorTransactionPremiumID, @CursorLineGuid       WHILE @@FETCH_STATUS = 0     BEGIN                DECLARE @TotalPremium money      DECLARE @AggregatedSplitPremium money        SELECT @TotalPremium = Premium FROM tblNetRateTransactionPremium WHERE QuoteID = @QuoteID AND ProcessSessionGuid = @ProcessSessionGuid AND ID = @CursorTransactionPremiumID      SELECT @AggregatedSplitPremium = SUM(SplitPremium + UpdatedPremium) FROM #SplitPremiumTable WHERE TransactionPremiumID = @CursorTransactionPremiumID        --select @TotalPremium as 'total premium'      --select @AggregatedSplitPremium as 'aggregate split premium'        IF @TotalPremium <> @AggregatedSplitPremium      BEGIN         select @@FETCH_STATUS as '@@FETCH_STATUS'         DECLARE @IncrementAmount money       IF @TotalPremium - @AggregatedSplitPremium > 0       BEGIN          SET @IncrementAmount = 0.01         END         IF @TotalPremium - @AggregatedSplitPremium < 0       BEGIN          SET @IncrementAmount = -0.01         END         UPDATE S SET SplitPremium = SplitPremium + @IncrementAmount       FROM #SplitPremiumTable S       WHERE LineGuid = @CursorLineGuid       AND S.TransactionPremiumID = @CursorTransactionPremiumID        END        FETCH NEXT FROM  PremiumCursor INTO @CursorTransactionPremiumID, @CursorLineGuid       END       CLOSE PremiumCursor     DEALLOCATE PremiumCursor      END        END       --select '#SplitPremiumTable Final' as tablename, * from #SplitPremiumTable     --before inserting the final split premium we need to make sure any negative premium does not reduce the total premium for a company location and line   --across all transactions to below zero     --for instance if a flat cancellation is done and rounding required pennies to be added to certain company locations, make sure adding those   --negative pennies does not cause the negative premium on this transaction, when added to the total premium across all previous transactions,   --to go below zero          DECLARE @ControlNo int   SELECT @ControlNo = ControlNo FROM tblQuotes WHERE QuoteID = @QuoteID     IF OBJECT_ID('tempdb..#SplitPremiumAggregation') IS NOT NULL   BEGIN      DROP TABLE #SplitPremiumAggregation     END     CREATE TABLE #SplitPremiumAggregation   (    Premium money,    LineName varchar(100),    LineGuid uniqueidentifier,    ChargeID varchar(100)   )        INSERT INTO #SplitPremiumAggregation      SELECT      SUM(T.SplitPremium),     T.LineName,     LineGuid,     ChargeID   FROM   (         --select '#SplitPremiumTable' as tablename, * from #SplitPremiumTable      --union # 1 grabs the original line guids; these are the main line guids we use to create and calculated the XOL lines     SELECT SUM(S.UpdatedPremium) As SplitPremium,      --S.SplitPremium,      lstlines.LineName,      LineGuidFrom as LineGuid,      tblNetRateTransactionPremium.ApplyToChargeID As ChargeID--,      --1 as unionnumber    FROM #SplitPremiumTable S    INNER JOIN tblNetRateTransactionPremium ON tblNetRateTransactionPremium.QuoteID = @QuoteID     AND tblNetRateTransactionPremium.ProcessSessionGuid = @ProcessSessionGuid     AND tblNetRateTransactionPremium.ID = S.TransactionPremiumID    join lstlines     on S.LineGuidFrom = lstlines.LineGUID    GROUP BY       lstlines.LineName,      LineGuidFrom,      tblNetRateTransactionPremium.ApplyToChargeID        UNION ALL        --union # 2 grab the XOL or the line guids we are creating from the original premium    SELECT SUM(S.SplitPremium) As SplitPremium,      --S.SplitPremium,      lstlines.LineName,      S.LineGuid,      tblNetRateTransactionPremium.ApplyToChargeID As ChargeID--,      --1 as unionnumber    FROM #SplitPremiumTable S    INNER JOIN tblNetRateTransactionPremium ON tblNetRateTransactionPremium.QuoteID = @QuoteID     AND tblNetRateTransactionPremium.ProcessSessionGuid = @ProcessSessionGuid     AND tblNetRateTransactionPremium.ID = S.TransactionPremiumID    join lstlines     on S.LineGuid = lstlines.LineGUID    GROUP BY       lstlines.LineName,      S.LineGuid,      tblNetRateTransactionPremium.ApplyToChargeID         UNION ALL      --union # 3 this needs to be corrected to account for the first transaction    SELECT SUM(tblNetRateTransactionPremiumLineSplit.SplitPremium) As SplitPremium,      --tblNetRateTransactionPremiumLineSplit.SplitPremium,      lstLines.linename,      lstLines.LineGUID,      tblNetRateTransactionPremium.ApplyToChargeID As ChargeID--,      --2 as unionnumber    FROM tblQuotes     INNER JOIN tblNetRateTransactionPremiumLineSplit ON tblQuotes.QuoteID = tblNetRateTransactionPremiumLineSplit.QuoteID    INNER JOIN tblNetRateTransactionPremium ON tblNetRateTransactionPremiumLineSplit.TransactionPremiumID = tblNetRateTransactionPremium.ID     AND tblNetRateTransactionPremium.QuoteID = tblQuotes.QuoteID    INNER JOIN tblNetRatePopulateTransactionLog ON tblNetRatePopulateTransactionLog.QuoteID = tblNetRateTransactionPremium.QuoteID     AND tblNetRatePopulateTransactionLog.ProcessSessionGuid = tblNetRateTransactionPremium.ProcessSessionGuid     and tblNetRatePopulateTransactionLog.ProcessSessionGuid = tblNetRateTransactionPremiumLineSplit.ProcessSessionGuid     AND tblNetRatePopulateTransactionLog.UsedInPremiumCalculation = 1    INNER JOIN lstNetRateLOBCodes ON tblNetRateTransactionPremium.ApplyToLOB = lstNetRateLOBCodes.NetRateLOBID    --INNER JOIN lstLines ON lstNetRateLOBCodes.NetRate_LOB_Code = lstLines.NetRate_LOB_Code    INNER JOIN lstLines       on tblNetRateTransactionPremiumLineSplit.LineGuid = lstLines.LineGUID    WHERE tblQuotes.ControlNo = @ControlNo    AND  tblQuotes.QuoteID < @QuoteID    AND  tblNetRateTransactionPremium.CalculationInclusion = 1    --AND  EXISTS(SELECT * FROM @CompanyLocationSplit SplitTable WHERE SplitTable.LineGuid = lstLines.LineGUID)    GROUP BY       lstLines.linename,      lstLines.LineGUID,      tblNetRateTransactionPremium.ApplyToChargeID   ) As [T]   GROUP BY     LineName,     LineGuid,     ChargeID          --select '#SplitPremiumAggregation' as tablename, * from #SplitPremiumAggregation     /* for testing/debugging   SELECT  tblNetRateTransactionPremiumLineSplit.*      --lstLines.linename,      --lstLines.LineGUID,      --tblNetRateTransactionPremium.ApplyToChargeID As ChargeID--,      --2 as unionnumber    FROM tblQuotes     INNER JOIN tblNetRateTransactionPremiumLineSplit ON tblQuotes.QuoteID = tblNetRateTransactionPremiumLineSplit.QuoteID    INNER JOIN tblNetRateTransactionPremium ON tblNetRateTransactionPremiumLineSplit.TransactionPremiumID = tblNetRateTransactionPremium.ID     AND tblNetRateTransactionPremium.QuoteID = tblQuotes.QuoteID    INNER JOIN tblNetRatePopulateTransactionLog ON tblNetRatePopulateTransactionLog.QuoteID = tblNetRateTransactionPremium.QuoteID     AND tblNetRatePopulateTransactionLog.ProcessSessionGuid = tblNetRateTransactionPremium.ProcessSessionGuid     and tblNetRatePopulateTransactionLog.ProcessSessionGuid = tblNetRateTransactionPremiumLineSplit.ProcessSessionGuid     AND tblNetRatePopulateTransactionLog.UsedInPremiumCalculation = 1    INNER JOIN lstNetRateLOBCodes ON tblNetRateTransactionPremium.ApplyToLOB = lstNetRateLOBCodes.NetRateLOBID    --INNER JOIN lstLines ON lstNetRateLOBCodes.NetRate_LOB_Code = lstLines.NetRate_LOB_Code    INNER JOIN lstLines       on tblNetRateTransactionPremiumLineSplit.LineGuid = lstLines.LineGUID    WHERE tblQuotes.ControlNo = @ControlNo    AND  tblQuotes.QuoteID < @QuoteID    AND  tblNetRateTransactionPremium.CalculationInclusion = 1    --AND  EXISTS(SELECT * FROM @CompanyLocationSplit SplitTable WHERE SplitTable.LineGuid = lstLines.LineGUID)   */     IF EXISTS(SELECT * FROM #SplitPremiumAggregation WHERE Premium < 0)   BEGIN      --select 'here'      --we have negative premium that brings us below zero    --first check to see if the grand total premium is greater than or equal to zero    --to make sure we actually have pennies available to shift around    IF (SELECT SUM(Premium) FROM #SplitPremiumAggregation) >= 0    BEGIN       --select 'here_02'       DECLARE @AvailableToMove TABLE     (      Premium money,      LineGuid uniqueidentifier,      ChargeID varchar(100)     )       INSERT INTO @AvailableToMove     SELECT SUM(S.Premium) as Premium,       S.LineGuid,       S.ChargeID     FROM #SplitPremiumAggregation S      WHERE EXISTS(SELECT * FROM #SplitPremiumAggregation SubS WHERE SubS.LineGuid = S.LineGuid AND SubS.ChargeID = S.ChargeID HAVING SUM(Premium) > 0)     GROUP BY S.LineGuid,       S.ChargeID            --select 'pre @AvailableToMove' as tablename, * from @AvailableToMove         DECLARE @CursorNegativePremiumAmount money     DECLARE @CursorNegativePremiumLineGuid uniqueidentifier     DECLARE @CursorNegativePremiumChargeID varchar(100)       DECLARE negativePremiumCursor CURSOR FAST_FORWARD      FOR SELECT Premium, LineGuid, ChargeID FROM #SplitPremiumAggregation WHERE Premium < 0       OPEN negativePremiumCursor       FETCH NEXT FROM negativePremiumCursor INTO @CursorNegativePremiumAmount, @CursorNegativePremiumLineGuid, @CursorNegativePremiumChargeID       WHILE @@FETCH_STATUS = 0     BEGIN        --select @CursorNegativePremiumAmount as '@CursorNegativePremiumAmount'        WHILE @CursorNegativePremiumAmount < 0      BEGIN         DECLARE @TransactionPremiumID int       SELECT TOP 1 @TransactionPremiumID = S.TransactionPremiumID       FROM #SplitPremiumTable S       WHERE S.LineGuid = @CursorNegativePremiumLineGuid       AND S.ChargeID = @CursorNegativePremiumChargeID         UPDATE T SET T.SplitPremium = T.SplitPremium + 0.01       FROM #SplitPremiumTable T       WHERE T.TransactionPremiumID = @TransactionPremiumID       AND T.LineGuid = @CursorNegativePremiumLineGuid       AND T.ChargeID = @CursorNegativePremiumChargeID         DECLARE @TakeFromLineGuid uniqueidentifier       DECLARE @TakeFromChargeID varchar(100)       SELECT TOP 1 @TakeFromLineGuid = T.LineGuid,          @TakeFromChargeID = T.ChargeID       FROM #SplitPremiumTable T        WHERE T.TransactionPremiumID = @TransactionPremiumID       AND EXISTS(           SELECT *           FROM @AvailableToMove A           WHERE A.LineGuid = T.LineGuid           AND A.ChargeID = T.ChargeID           AND A.Premium > 0          )       AND T.LineGuid = @CursorNegativePremiumLineGuid       AND T.ChargeID = @CursorNegativePremiumChargeID       --AND T.CompanyLocationGuid IN (SELECT A.CompanyLocationGuid FROM @AvailableToMove A WHERE A.Premium > 0)         UPDATE T SET T.SplitPremium = T.SplitPremium - 0.01       FROM #SplitPremiumTable T       WHERE T.TransactionPremiumID = @TransactionPremiumID       AND T.LineGuid = @TakeFromLineGuid       AND T.ChargeID = @TakeFromChargeID         --select '#SplitPremiumTable' as tablename, * From #SplitPremiumTable         UPDATE T SET T.Premium = T.Premium - 0.01       FROM @AvailableToMove T       WHERE T.LineGuid = @TakeFromLineGuid       AND T.ChargeID = @TakeFromChargeID         --select '@AvailableToMove' as tablename, * From @AvailableToMove         --select * from tblNetRateTransactionPremiumLineSplit          /* for debugging       insert into tblNetRateTransactionPremiumLineSplit         (QuoteId)       Value        (9)       */         SET @CursorNegativePremiumAmount = @CursorNegativePremiumAmount + 0.01        END        FETCH NEXT FROM negativePremiumCursor INTO @CursorNegativePremiumAmount, @CursorNegativePremiumLineGuid, @CursorNegativePremiumChargeID       END       CLOSE negativePremiumCursor     DEALLOCATE negativePremiumCursor        END     END       DELETE FROM tblNetRateTransactionPremiumLineSplit WHERE QuoteID = @QuoteID AND ProcessSessionGuid = @ProcessSessionGuid     INSERT INTO tblNetRateTransactionPremiumLineSplit(QuoteID, TransactionPremiumID, LineGuid, TargetedPercent, SplitPremium, ProcessSessionGuid)      --this will add the split premium (original premium - split premium = updated premium)   SELECT  @QuoteID as QuoteId,      Split.TransactionPremiumID,      --Split.LineGuidFrom,      Split.LineGuid,      Split.TargetedPercent,      Split.SplitPremium,      @ProcessSessionGuid as ProcessSessionGuid   FROM  #SplitPremiumTable Split      union all    --union 1 --add updated original premium (original premium - split premium = updated premium)   SELECT  @QuoteID as QuoteId,      Split.TransactionPremiumID,      Split.LineGuidFrom,      --Split.LineGuid,      (1.00 - Split.TargetedPercent) as TargetedPercent,      Split.UpdatedPremium,      @ProcessSessionGuid as ProcessSessionGuid   FROM  #SplitPremiumTable Split        /* for debugging   select       @QuoteID,      spl.LineGuid,      ll.LineName,      sum(spl.Splitpremium) as XOLPremium,      sum(spl.originalpremium) as originalpremium,      sum(spl.updatedpremium) as updatedpremium,      sum(spl.Splitpremium + spl.updatedpremium) as TotalPremiumCheck   from  #SplitPremiumTable spl   join  lstlines ll     on ll.lineguid = spl.LineGuid    group by spl.LineGuid,      ll.LineName   */     DROP TABLE #SplitPremiumTable   DROP TABLE #SplitPremiumAggregation         END            IF OBJECT_ID('dbo.NetRatePopulatePremium') IS NULL  BEGIN     EXEC('CREATE PROCEDURE dbo.NetRatePopulatePremium AS SELECT 1')    END    
Ascot_ImportAL3_Insert_NBS_Zywave_Captive_IM	CREATE PROCEDURE [dbo].[Ascot_ImportAL3_Insert_NBS_Zywave_Captive_IM]   @ImportLogID int  AS  BEGIN     DECLARE @ImportSource int   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID      DECLARE @RenewalOfControlNum INT = NULL  -- needed to be set for renewals   DECLARE @RenewalOfQuoteGuid UNIQUEIDENTIFIER = NULL -- needed to be set for renewals   DECLARE @RenewalOfQuoteID INT = NULL -- needed to obtain BOR producer contact on renewal   DECLARE @ImportVersion int = 0   DECLARE @PreBindNewBusinessRenewalProcessProcedure varchar(200) = ''   DECLARE @SQL_@PreBindExecute NVARCHAR(200)   DECLARE @ImportSouceName VARCHAR(200) = ''   Declare @QuoteStatusId int      SELECT  @ImportVersion = ImportVersion from ASCOT_AL3ZywaveImportHeader where ImportLogID = @ImportLogID    SELECT  @ImportSouceName = ISNULL(sourcename,'Policy Import') from ASCOT_lstAL3ImportSources where ID = @ImportSource       IF OBJECT_ID('tempdb..#PolsToCreate') IS NOT NULL BEGIN DROP TABLE #PolsToCreate END   SELECT   t.*,      cl.CompanyLocationGuid,      Cl.CompanyLineGUID,      l.LineGuid   INTO  #PolsToCreate   FROM  Ascot_AL3PolicyMasterTable_v2 t   INNER JOIN lstLines l ON l.LineID=t.LineCode   Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = t.CompanyCode   Inner Join  tblCompanyLines CL on CL.LineGUID = l.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and t.StateOfIssuance = CL.StateID and cl.ParentCompanyLineGUID IS NULL   WHERE  ImportLogID = @ImportLogID   AND   isNull(Error,0)=0   AND   DateProcessed IS NULL   AND   PolicyIndicator IN ('N', 'R')   AND   ISNULL(RewriteOfAccountNumber, '0') = '0'       ORDER BY PolicyTransactionID         --double check   IF OBJECT_ID('tempdb..#db') IS NOT NULL BEGIN DROP TABLE #db END     SELECT  t.DnlTrId,      CASE WHEN PremiumState IS NULL       THEN 'PremiumState is null'       WHEN CompanyCode IS NULL       THEN 'CompanyCode is null'       WHEN LineCode IS NULL       THEN 'LineCode is null'       WHEN ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0 and QuoteStatusReasonID is null       THEN 'PremiumAmount + TerrorismPremium is 0'       WHEN PolicyNumber IS NULL AND QuoteStatusReasonID is null       THEN 'PolicyNumber is null'       WHEN Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode)       THEN 'Duplicate policy number found'       WHEN (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID IS NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))       THEN 'Policy Transaction previously imported'       ELSE NULL      END As [Message]   INTO  #db   FROM  #PolsToCreate t   WHERE  PremiumState IS NULL      OR CompanyCode IS NULL      OR LineCode IS NULL      OR (ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0 and QuoteStatusReasonID is null)      OR (PolicyNumber IS NULL and QuoteStatusReasonID is null)            OR (Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode))      OR (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID is NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))      UPDATE Ascot_AL3PolicyMasterTable_v2   SET  Error=1,     ErrorMessage=ISNULL(d.[Message], 'Failed double check'),     ErrorTime=getdate()   FROM Ascot_AL3PolicyMasterTable_v2   INNER JOIN #db d ON Ascot_AL3PolicyMasterTable_v2.DnlTrId = d.DnlTrId       DELETE FROM #PolsToCreate    WHERE  DnlTrId IN (SELECT DnlTrId FROM #db)        IF OBJECT_ID('tempdb..#PolsToCreateDetails') IS NOT NULL   BEGIN      DROP TABLE #PolsToCreateDetails     END        CREATE TABLE #PolsToCreateDetails   (    ID int,    DnlTrId uniqueidentifier,    CompanyLocationCode int,    LineCode int,    StateID varchar(20),    Premium money,    Terrorism money,    CompanyLocationGuid uniqueidentifier,    CompanyLineGuid uniqueidentifier,    LineGuid uniqueidentifier,    CreatedQuoteOptionID int,    CreatedQuoteOptionGuid uniqueidentifier,    CreatedQuoteDetailID int   )            INSERT INTO #PolsToCreateDetails   SELECT    --ID int,      Ascot_AL3QuoteDetailTable_V2.ID,      --DnlTrId uniqueidentifier,      Ascot_AL3QuoteDetailTable_V2.DnlTrId,      --CompanyLocationCode int,      Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,      --LineCode int,      Ascot_AL3QuoteDetailTable_V2.LineCode,      --StateID varchar(20),      Ascot_AL3QuoteDetailTable_V2.StateID,      --Premium money,      Ascot_AL3QuoteDetailTable_V2.Premium,      --Terrorism money,      Ascot_AL3QuoteDetailTable_V2.Terrorism,      --CompanyLocationGuid uniqueidentifier,      tblCompanyLocations.CompanyLocationGUID,      --CompanyLineGuid uniqueidentifier      tblCompanyLines.CompanyLineGUID,      --LineGuid uniqueidentifier,      lstLines.LineGUID,      --CreatedQuoteOptionID int,      NULL,      --CreatedQuoteOptionGuid uniqueidentifier,      NULL,      --CreatedQuoteDetailID int,      NULL     FROM #PolsToCreate P   INNER JOIN Ascot_AL3QuoteDetailTable_V2 ON P.DnlTrId = Ascot_AL3QuoteDetailTable_V2.DnlTrId   LEFT JOIN tblCompanyLocations ON Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode = tblCompanyLocations.CompanyLocationCode   LEFT JOIN lstLines ON Ascot_AL3QuoteDetailTable_V2.LineCode = lstLines.LineID   LEFT JOIN tblCompanyLines ON tblCompanyLocations.CompanyLocationGUID = tblCompanyLines.CompanyLocationGUID    AND  lstLines.LineGuid = tblCompanyLines.LineGUID    AND  Ascot_AL3QuoteDetailTable_V2.StateID = tblCompanyLines.StateID    AND  ((tblCompanyLines.ParentCompanyLineGUID = P.CompanyLineGUID)       OR ((tblCompanyLines.ParentCompanyLineGUID IS NULL) AND (P.CompanyLineGUID <> tblCompanyLines.CompanyLineGUID))      )---replace= to<>       ALTER TABLE #PolsToCreate ADD SubmissionGroupID int   ALTER TABLE #PolsToCreate ADD QuoteID int   --ALTER TABLE #PolsToCreate ADD ProducerContactID int     --SELECT * FROM #PolsToCreate         DECLARE @MGASystemsUserGuid uniqueidentifier   SELECT @MGASystemsUserGuid = UserGuid FROM tblUsers WHERE Username = 'Admin1'     DECLARE @DnlTrId uniqueidentifier     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToCreate     OPEN Cur   FETCH Cur INTO @DnlTrId      DECLARE @preblocking int   SET @preblocking=1       WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 10 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:10' --10 SECONDS     END    END       IF OBJECT_ID('tempdb..#InvoiceInstallmentsTable') IS NOT NULL   BEGIN      DROP TABLE #InvoiceInstallmentsTable     END     CREATE TABLE #InvoiceInstallmentsTable   (    QuoteID int,    EffectiveDate datetime,    ExpirationDate datetime,    NumInstallments int,    Installment int,    InstallmentDueDate datetime,    BillingCode varchar(100),    InstallmentMod decimal(20, 19)   )     IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL   BEGIN      DROP TABLE #ConfigurationsTable     END     CREATE TABLE #ConfigurationsTable   (    ID int,    StartingOnPoliciesEffective smalldatetime,    QuotingLocationGuid uniqueidentifier,    IssuingLocationGuid uniqueidentifier,    UnderwriterGuid uniqueidentifier,    IssuedByUserID int,    BoundByUserID int,    CostCenterID int,    BrokerCommissionFeeChargeCode int,    ProgramID int,    UnderwritingAssistantGuid uniqueidentifier,    AutoApplyFees bit,    CopyNotesandDocs BIT,    ProducerContactID INT,    ProducerLocationID int,    BillingTypeID INT,    CompanyLocationCode INT,    UseUWCloseDate BIT   )     WHILE @@Fetch_status=0    BEGIN     BEGIN TRY        BEGIN TRAN       DECLARE @PolicyNumber varchar(50)       DECLARE @datebilled datetime       DECLARE @policyIndicator varchar(5)       DECLARE @BusinessTypeID INT        DECLARE @CompanyLocationCode INT       DECLARE @InsuredFirstName VARCHAR (max)       DECLARE @InsuredLastName VARCHAR (max)        DECLARE @InsuredAddress2 VARCHAR (max)        DECLARE @InsuredFirstLastName VARCHAR (max)          SELECT  @PolicyNumber=PolicyNumber,          @datebilled = BillDate,          @policyIndicator = PolicyIndicator,         @BusinessTypeID =BusinessTypeID,         @CompanyLocationCode = CompanyCode,         @InsuredFirstName = InsuredFirstName,         @InsuredLastName = InsuredLastName,         @InsuredAddress2 =InsuredAddress2                FROM #PolsToCreate        WHERE DnlTrId=@DnlTrId         PRINT @PolicyNumber;              IF @datebilled IS NULL       BEGIN        SET @datebilled = getdate()                         END       ------------------------------------------------------------------ IssuingLocationGuid Change--------------------------------------------------------------       --Declare @IssuingLocationGuid UNIQUEIDENTIFIER, @QuotingLocationguid UNIQUEIDENTIFIER        -- SELECT @QuotingLocationguid=OfficeGUID from tblclientoffices  where Location in(Select SUBSTRING(Company, 1, CHARINDEX('(', Company) - 2) from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid=@importlogId)         -- Select @IssuingLocationGuid =ParentOfficeGuid from tblclientoffices  where OfficeGUID=@QuotingLocationguid         --------------------------------------------------------------------------------------------------------------------------------------------------------------------       INSERT INTO #ConfigurationsTable       SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,          Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,          Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,          --@QuotingLocationguid as QuotingLocationguid,          Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,          --@IssuingLocationGuid as IssuingLocationGuid,          Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,          Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,          Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,          Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,          Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,          Ascot_tblAL3ProgramConfigurations_v2.ProgramID,          --@ProgramID,          Ascot_tblAL3ProgramConfigurations_v2.UnderwritingAssistantGuid,          Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,          Ascot_tblAL3ProgramConfigurations_v2.CopyNotesandDocs,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerContactID,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerLocationID,          ASCOT_tblAL3ProgramConfigurations_V2.BillingTypeID,                ASCOT_tblAL3ProgramConfigurations_V2.CompanyLocationCode,          ASCOT_tblAL3ProgramConfigurations_V2.UseUWCloseDate         FROM  Ascot_tblAL3ProgramConfigurations_v2       INNER JOIN #PolsToCreate P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)        AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID        AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode        AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0        AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource         DECLARE @ConfigurationID int         SELECT TOP 1 @ConfigurationID = C.ID       FROM #ConfigurationsTable C       WHERE C.CompanyLocationCode = @CompanyLocationCode       ORDER BY C.StartingOnPoliciesEffective DESC         DECLARE @QuotingLocationGuid uniqueidentifier       DECLARE @QuotingLocationID int       DECLARE @IssuingLocationGuid uniqueidentifier       DECLARE @UnderwriterGuid uniqueidentifier       DECLARE @IssuedByUserID int       DECLARE @BoundByUserID int       DECLARE @CostCenterID int       DECLARE @BrokerCommissionFeeChargeCode int          DECLARE @ProgramID int       DECLARE @UnderwritingAssistantGuid uniqueidentifier       DECLARE @RunAutoApplyFees bit       DECLARE @CopyNotesandDocs bit       DECLARE @ProducerContactID int       DECLARE @ProducerLocationID int       DECLARE @BillingTypeID int       DECLARE @clientofficeID INT       DECLARE @AutoApplyFees bit       DECLARE @UseUWCloseDate BIT = 0  -- TFS 92747         SELECT @QuotingLocationGuid = QuotingLocationGuid,         @IssuingLocationGuid = IssuingLocationGuid,         @UnderwriterGuid = UnderwriterGuid,         @IssuedByUserID = IssuedByUserID,         @BoundByUserID = BoundByUserID,         @CostCenterID = CostCenterID,         @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,         @ProgramID = ProgramID,         @UnderwritingAssistantGuid = UnderwritingAssistantGuid,         @RunAutoApplyFees = AutoApplyFees,         @CopyNotesandDocs = CopyNotesandDocs,         @ProducerContactID = ProducerContactID,         @ProducerLocationID = ProducerLocationID,         @BillingTypeID = ISNULL(BillingTypeID,3), -- Default this to agnecy,         @AutoApplyFees = AutoApplyFees,         @UseUWCloseDate = UseUWCloseDate         FROM #ConfigurationsTable       WHERE ID = @ConfigurationID         SELECT @QuotingLocationID = tblClientOffices.OfficeID       FROM tblClientOffices       WHERE tblClientOffices.OfficeGuid = @QuotingLocationGuid         IF @ConfigurationID IS NULL       BEGIN          raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;         END         IF @ProducerLocationID = 0       BEGIN          SELECT @ProducerLocationID = ProducerCode        FROM #PolsToCreate         WHERE DnlTrId=@DnlTrId         END         -- TFS 87790 Get the quoting location office id used in spaccountingtransfer       select @clientofficeID =  officeid from tblclientoffices where officeguid = @QuotingLocationGuid         --make sure it doesn't exist.       DECLARE @AlreadyExists int       SELECT  @AlreadyExists=COUNT(*)        FROM  tblQuotes        OUTER APPLY (           SELECT TOP 1 RewriteQ.ControlNo,              RewriteQ.QuotingLocationGuid           FROM tblQuotes SubQ           INNER JOIN tblQuotes RewriteQ ON SubQ.QuoteGuid = RewriteQ.RewriteOfQuoteGuid           WHERE SubQ.ControlNo = tblQuotes.ControlNo          ) As RewriteTable       WHERE  PolicyNumber=@PolicyNumber       AND   tblQuotes.QuotingLocationGuid = @QuotingLocationGuid       AND   EXISTS(SELECT * FROM tblCompanyLines WHERE tblCompanyLines.CompanyLineGUID = tblQuotes.CompanyLineGuid AND tblCompanyLines.EnforceUniquePolicyNumbers = 1)       AND   ISNULL(RewriteTable.QuotingLocationGuid, tblQuotes.QuotingLocationGuid) = tblQuotes.QuotingLocationGuid       --in some cases an Ascot policy is being cancelled and rewritten to an Ethos policy that then needs to create a matching Ascot policy.        --This check is failing the creation in that case so check to see if there is a rewrite of this policy and if its quoting location matches this policys quoting location       --if the quoting locations match then don't create the policy           IF @AlreadyExists > 0        BEGIN         raiserror('Policy Already Exists', 15, 1) with nowait;        END         DECLARE @QuotingOfficeID int       SELECT @QuotingOfficeID = OfficeID       FROM tblClientOffices WHERE OfficeGuid = @QuotingLocationGuid           /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                 SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHTHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END           --insert the insured       --after discussion there is no clearance here       ----LEEDISABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ----LEEDISABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              --select top 1 * from tblInsureds       raiserror('tblInsureds', 0, 1) with nowait;         -- Insert it as a coproration or Individual           --INSURED INDIVIDUAL       If ISNULL(@InsuredFirstName,'')<> ''       BEGIN        SET @InsuredFirstLastName = @InsuredFirstName + ' ' + @InsuredLastName          INSERT INTO tblInsureds          (             RiskID,             BusinessTypeID,             PolicyName,             FirstName,            LastName,             Name,             StatusID,             Soundex,             StrippedName,             StrippedPolicyName,             NumSubmissions,             DBA)           SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                     4, -- select * from lstBusinessTypes where businesstype = 'Individual'            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            1,            SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(@InsuredFirstLastName))), 0, 51),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            1,            SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)         FROM  #PolsToCreate p         WHERE  DnlTrId=@DnlTrId         AND  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)       END         ELSE        --INSURED CORPORATE            BEGIN          INSERT INTO tblInsureds (RiskID, BusinessTypeID, PolicyName, CorporationName, Name, StatusID, Soundex, StrippedName, StrippedPolicyName, NumSubmissions, DBA)        SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                    13, -- select * from lstBusinessTypes where businesstype = 'Corporation'           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           1,           SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(p.InsuredName))), 0, 51),           SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),           SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),           1,           SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)        FROM  #PolsToCreate p        WHERE  DnlTrId=@DnlTrId        and  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)         END              ----LEEENABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ----LEEENABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              --end-------------------------------------------------------------------------------------------------------------------              --add the insureds location       raiserror('tblInsuredLocations', 0, 1) with nowait;              INSERT INTO tblInsuredLocations (DeliveryMethodID, LocationTypeID, Address1, Address2, City, State, ZipCode, County, ISOCountryCode, Name, InsuredGuid)       SELECT  1,          1,          SUBSTRING(RTRIM(LTRIM(p.InsuredAddress)), 0, 251),          SUBSTRING(RTRIM(LTRIM(@InsuredAddress2)), 0, 251),          SUBSTRING(RTRIM(LTRIM(p.InsuredCity)), 0, 51),          RTRIM(LTRIM(p.InsuredState)),           SUBSTRING(RTRIM(LTRIM(p.InsuredZip)), 0, 11),          SUBSTRING(RTRIM(LTRIM(p.insuredcounty)), 0, 51),          'USA' AS ISOCountryCode,           'Mailing' AS Name,          i.InsuredGuid       FROM  #PolsToCreate p       INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       WHERE  DnlTrId=@DnlTrId       and  NOT EXISTS(SELECT * FROM tblInsuredLocations WHERE tblInsuredLocations.InsuredGUID = I.InsuredGUID AND tblInsuredLocations.LocationTypeID = 1)           --Enable trigger tblInsuredLocations_OnlyOnePrimary on dbo.tblInsuredLocations       --end-------------------------------------------------------------------------------------------------------------------              --add submission       raiserror('tblSubmissionGroup', 0, 1) with nowait;           -- TFS 86643   Allow the program to dynamically assign a producer contact from designated producer location if one is not specified from the  config table.       IF ISNULL(@ProducerContactID,0) = 0             BEGIN        SELECT  TOP 1 @ProducerContactID = ProducerContactID FROM tblProducerContacts pc join tblProducerLocations p on pc.ProducerLocationGUID = p.ProducerLocationGUID WHERE p.ProducerLocationID = @ProducerLocationID       END         INSERT INTO tblSubmissionGroup (ProducerLocationGuid, ProducerContactID, InsuredGuid, DateSubmitted, AddedByUserGuid)       SELECT  tblProducerLocations.ProducerLocationGuid,          --(SELECT TOP 1 ProducerContactID FROM tblProducerContacts pc WHERE pc.ProducerLocationGuid = tblProducerLocations.ProducerLocationGUID),          @ProducerContactID,          i.InsuredGuid,          getdate(),          '5be2621d-4bff-44de-b7d7-17fd01c90c85'        FROM  #PolsToCreate p       INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       WHERE  DnlTrId=@DnlTrId              UPDATE  #PolsToCreate       SET   SubmissionGroupID=scope_identity()       WHERE  DnlTrId=@DnlTrId                       --UPDATE  #PolsToCreate       --SET   ProducerContactID=s.ProducerContactID       --FROM  #PolsToCreate p       --INNER JOIN tblSubmissionGroup s ON s.SubmissionGroupID=p.SubmissionGroupID       --WHERE  DnlTrId=@DnlTrId;       --end-------------------------------------------------------------------------------------------------------------------              --add policy       ----LEEDISABLE TRIGGER dbo.RecordQuoteStatusChange on dbo.tblQuotes       raiserror('tblQuotes', 0, 1) with nowait;       INSERT INTO tblQuotes (        SubmissionGroupGuid,        QuotingLocationGuid,        IssuingLocationGuid,        CompanyLocationGuid,        ControlGuid,        LineGuid,        QuoteStatusID,         EffectiveDate,         ExpirationDate,         PolicyTypeID,         StateID,        ProducerContactGuid,        UnderwriterUserGuid,         RetailerGuid,         TACSRUserGuid,        PolicyNumber,         PolicyNumberIndex,         SIC_Code,        BillingTypeID,        MinimumEarnedPercentage,         DateIssued,         IssuedByUserID,        DateBound,        BoundByUserID,         InsuredDBA,         InsuredFEIN,         InsuredSSN,         InsuredBusinessTypeID,         InsuredPolicyName,         InsuredCorporationName,         InsuredSalutation,         InsuredFirstName,         InsuredMiddleName,         InsuredLastName,        InsuredAddress1,         InsuredAddress2,         InsuredCity,         InsuredState,         InsuredCounty,         InsuredISOCountryCode,         InsuredZipCode,         InsuredPhone,         InsuredFax,        ProducerLocationID,         ProducerName,         ProducerLocationName,         ProducerAddress1,         ProducerAddress2,         ProducerCity,         ProducerCounty,         ProducerState,         ProducerISOCountryCode,         ProducerZipCode,         ProducerPhone,         ProducerFax,         FinanceCompanyGuid,         CompanyLineGuid,         AccountNumber,         CostCenterID,         InspectionCompanyID,         QuickQuote,         InstallmentBillingQuoteOptionID,         Auditable,         ControlNo,        UnderwritingAssistantGuid,        QuoteStatusReasonID,        --TFS 90517   added Renewal logic to populate renewal fields on tblquotes        RenewalOfControlNum,        RenewalOfQuoteGuid       -- InsuredPolicyName       )       SELECT  s.SubmissionGroupGuid,          @QuotingLocationGuid AS QuotingLocationGuid,           @IssuingLocationGuid AS IssuingLocationGuid,          p.CompanyLocationGuid,          NEWID(),          p.LineGuid,          1 as QuoteStatusID,          p.PolicyEffectiveDate,          p.PolicyExpirationDate,          CASE p.PolicyIndicator WHEN 'N' THEN 1 WHEN 'R' THEN 2 ELSE NULL END,          p.PremiumState,          pc.ProducerContactGUID,          @UnderwriterGuid as UnderwriterGuid,          NULL,          NULL,          p.PolicyNumber,          NULL,          NULL,          --3,          @BillingTypeID,          NULL AS MinimumEarnedPercentage,           p.dateissued AS DateIssued,           @IssuedByUserID AS IssuedByUserID,           getdate() AS DateBound,          @BoundByUserID AS BoundByUserID,           NULL AS InsuredDBA,           NULL AS InsuredFEIN,           NULL AS InsuredSSN,           InsuredTable.BusinessTypeID,           SUBSTRING(InsuredTable.[Name], 0, 501),           SUBSTRING(InsuredTable.CorporationName, 0, 501),           NULL AS InsuredSalutation,           NULL AS InsuredFirstName,           NULL AS InsuredMiddleName,           NULL AS InsuredLastName,          InsuredTable.Address1,           InsuredTable.Address2,           InsuredTable.City,           InsuredTable.[State],           '' AS InsuredCounty,           InsuredTable.ISOCountryCode,           InsuredTable.ZipCode,           NULL AS InsPhone,           NULL AS InsFax,          pl.ProducerLocationID,           pr.ProducerName,           pl.Name AS ProdLocationName,           pl.Address1 AS ProdAddress,           pl.Address2 AS ProdAddress2,           pl.City AS ProdCity,           pl.County,           pl.State AS ProdState,           pl.ISOCountryCode AS ProdCountry,           pl.ZipCode AS ProdZip,           pl.Phone,           pl.Fax,           NULL AS finance,           p.CompanyLineGUID,           p.AccountNumber AS AccountNumber,          @CostCenterID AS CostCenterID,           NULL AS Insp,           0 AS QQ,           NULL AS InstallM,           0 AS audit,           ISNULL((SELECT MAX(ControlNo) FROM dbo.tblQuotes), 0)+1,          @UnderwritingAssistantGuid,          p.QuoteStatusReasonID,          --TFS 90517  added Renewal logic to populate renewal fields on tblquotes          --This needs to be tested in Ascot TEST before  it goes live 9/23/22                    CASE p.PolicyIndicator            WHEN 'N' THEN NULL            WHEN 'R' THEN p.RenewalOfAccountNumber            ELSE NULL END, --RenewalOfControlNum,                    CASE p.PolicyIndicator            WHEN 'N' THEN NULL            WHEN 'R' THEN (select top 1 quoteguid from tblQuotes where ControlNo = p.RenewalOfAccountNumber order by QuoteID desc)            ELSE NULL END --RenewalOfQuoteguid               --1 + (Select Top 1 ControlNo from tblQuotes order by ControlNo Desc) AS ControlNo --This is a place holder we will update right before committing.       FROM  #PolsToCreate p       CROSS APPLY (           SELECT TOP 1 i.InsuredGUID,              i.BusinessTypeID,              i.[Name],              i.CorporationName,              il.Address1,               il.Address2,               il.City,               il.[State],              il.ISOCountryCode,               il.ZipCode           FROM tblInsureds i           INNER JOIN tblInsuredLocations il ON il.InsuredGuid=i.InsuredGuid           WHERE i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)           and il.LocationTypeID = 1          ) As InsuredTable           INNER JOIN tblSubmissionGroup s ON s.InsuredGuid=InsuredTable.InsuredGUID       INNER JOIN tblProducerLocations pl ON pl.ProducerLocationGuid=s.ProducerLocationGuid       INNER JOIN tblProducers pr ON pr.ProducerGuid=pl.ProducerGuid       INNER JOIN tblProducerContacts pc on pc.ProducerContactID = s.ProducerContactID       WHERE  DnlTrId=@DnlTrId       AND   P.SubmissionGroupID = s.SubmissionGroupID           DECLARE @QuoteID int       SET @QuoteID=scope_identity()         DECLARE @QuoteGuid uniqueidentifier       SELECT @QuoteGuid = QuoteGuid FROM tblQuotes WHERE QuoteID = @QuoteID         UPDATE Q SET CostCenterID = ISNULL(CostCenterTable.GroupID, Q.CostCenterID)       FROM tblQuotes Q       OUTER APPLY (           SELECT TOP 1 GroupID           FROM dbo.GetQuoteCostCenters(@QuoteGuid) T           ORDER BY T.IsDefault DESC, T.SystemDefined DESC, T.EffectiveDate DESC          ) As CostCenterTable       WHERE Q.QuoteGUID = @QuoteGuid                  UPDATE  #PolsToCreate       SET   QuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;         UPDATE  Ascot_AL3PolicyMasterTable_v2       SET   CreatedQuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;                --end-------------------------------------------------------------------------------------------------------------------             --add quote details       raiserror('tblQuoteDetails', 0, 1) with nowait;         --for monoline policies       INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       SELECT  q.QuoteGuid,          p.CompanyLineGuid,          (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=p.CompanyLocationGuid),          1,          --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),          --TFS 87790 Get dynamic  commissions          ISNULL(p.producerComm,dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),          0,          30 as TermsOfPayment,          CASE WHEN @ProgramID = 0           THEN ProgramCodeTable.ProgramID           ELSE @ProgramID          END       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN lstLines ON q.LineGuid = lstLines.LineGUID       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       OUTER APPLY (           SELECT TOP 1 tblCompanyProgramCodes.ProgramID           FROM tblCompanyProgramCodes            LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID           LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID           WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')           AND ( (tblCompanyProgramCodes.LineGUID = q.LineGUID OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode)))           --AND ( tblCompanyProgramCodes.LineGUID = q.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')           --AND ( q.EffectiveDate BETWEEN Convert(varchar(12),tblCompanyProgramCodes.ContractEffective,101) AND Convert(varchar(12),tblCompanyProgramCodes.ContractExpiration,101))           AND ( q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)           AND (ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'  AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Special Program for Highland' )           ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = q.StateID THEN 1 ELSE 0 END +             CASE WHEN ((tblCompanyProgramCodes.LineGUID = q.LineGuid  OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode))) THEN 1 ELSE 0 END +             --CASE WHEN tblCompanyProgramCodes.LineGUID = q.LineGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +             --CASE WHEN tblCompanyProgramCodes.GroupCode = lstLines.GroupCode THEN 1 ELSE 0 END DESC,             tblCompanyProgramCodes.ContractEffective DESC          ) As ProgramCodeTable       WHERE  DnlTrId=@DnlTrId       AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)                    --for package policies       INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       SELECT  q.QuoteGuid,          DetailTable.CompanyLineGuid,          (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=DetailTable.CompanyLocationGuid),          1,          --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),          --TFS 87790 Get dynamic  commissions          ISNULL(p.producerComm, dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),          0,          30 as TermsOfPayment,          CASE WHEN @ProgramID = 0           THEN ProgramCodeTable.ProgramID           ELSE @ProgramID          END       FROM  #PolsToCreate p       CROSS APPLY (           SELECT DISTINCT SubPD.CompanyLineGuid,               SubPD.CompanyLocationGuid,               SubCL.LineGUID,               SubPD.StateID           FROM #PolsToCreateDetails SubPD           INNER JOIN tblCompanyLines SubCL ON SubPD.CompanyLineGuid = SubCL.CompanyLineGuid           WHERE SubPD.DnlTrId = P.DnlTrId           --AND SubPD.StateID = P.StateOfIssuance          ) AS DetailTable       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN lstLines ParentLine ON q.LineGuid = ParentLine.LineGUID       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       OUTER APPLY (           SELECT TOP 1 tblCompanyProgramCodes.ProgramID           FROM tblCompanyProgramCodes            LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID           LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID           WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')           AND ( tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')           AND (q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)           AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'           ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = DetailTable.StateID THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.GroupCode = ParentLine.GroupCode THEN 1 ELSE 0 END DESC,             tblCompanyProgramCodes.ContractEffective DESC          ) As ProgramCodeTable       WHERE  DnlTrId=@DnlTrId         UPDATE PD SET CreatedQuoteDetailID = tblQuoteDetails.QuoteDetailID       FROM #PolsToCreateDetails PD       INNER JOIN #PolsToCreate P ON PD.DnlTrId = P.DnlTrId       INNER JOIN tblQuotes ON P.QuoteID = tblQuotes.QuoteID       INNER JOIN tblQuoteDetails ON tblQuotes.QuoteGUID = tblQuoteDetails.QuoteGuid        AND tblQuoteDetails.CompanyLineGuid = PD.CompanyLineGuid       --WHERE PD.StateID = P.StateOfIssuance                --end-------------------------------------------------------------------------------------------------------------------                  --add quote option       --for monoline policies       raiserror('tblQuoteOptions', 0, 1) with nowait;       INSERT INTO tblQuoteOptions (QuoteGUID, LineGUID, CompanyLocationID, DateCreated, Quote, Bound, CompanyInstallmentID)       SELECT  q.QuoteGuid,          q.LineGuid,          c.CompanyLocationCode,          getdate(),          1,          1,          NULL       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN  tblCompanyLines cl ON cl.CompanyLineGuid=p.CompanyLineGuid       INNER JOIN tblCompanyLocations c ON c.CompanyLocationGuid = cl.CompanyLocationGuid       WHERE  DnlTrId=@DnlTrId       AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)                --for package policies       raiserror('tblQuoteOptions', 0, 1) with nowait;       INSERT INTO tblQuoteOptions (QuoteGUID, LineGUID, CompanyLocationID, DateCreated, Quote, Bound, CompanyInstallmentID)       SELECT  q.QuoteGuid,          DetailTable.LineGuid,          DetailTable.CompanyLocationCode,          getdate(),          1,          1,          NULL       FROM  #PolsToCreate p       CROSS APPLY (           SELECT DISTINCT SubPD.LineGuid,               SubPD.CompanyLocationCode           FROM #PolsToCreateDetails SubPD           WHERE SubPD.DnlTrId = P.DnlTrId           AND SubPD.StateID = P.StateOfIssuance          ) AS DetailTable       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN  tblCompanyLines cl ON cl.CompanyLineGuid=p.CompanyLineGuid       --INNER JOIN tblCompanyLocations c ON c.CompanyLocationGuid = cl.CompanyLocationGuid       WHERE  DnlTrId=@DnlTrId         UPDATE PD SET CreatedQuoteOptionID = tblQuoteOptions.QuoteOptionID,           CreatedQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid       FROM #PolsToCreateDetails PD       INNER JOIN #PolsToCreate P ON PD.DnlTrId = P.DnlTrId       INNER JOIN tblQuotes ON P.QuoteID = tblQuotes.QuoteID       INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID        AND tblQuoteOptions.LineGUID = PD.LineGuid        AND tblQuoteOptions.CompanyLocationID = PD.CompanyLocationCode         --end-------------------------------------------------------------------------------------------------------------------         raiserror('tblQuoteOptionPremiums', 0, 1) with nowait;       --Monoline policies       --add option premium       INSERT INTO tblQuoteOptionPremiums (QuoteOptionGuid, ChargeCode, OfficeID, Premium, AnnualPremium, Commissionable)       SELECT  qo.QuoteOptionGuid,          pc.ChargeCode,          @QuotingOfficeID,          isnull(p.PremiumAmount,0),          isnull(p.PremiumAmount,0),          1 as Commissionable       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN tblQuoteOptions qo ON q.QuoteGUID = qo.QuoteGUID       INNER JOIN tblFin_PolicyCharges pc ON q.StateID = pc.StateID       WHERE  DnlTrId=@DnlTrId       AND   pc.ChargeType='p'       AND   pc.ChargeName='Premium'       AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)           --add option terrorism       raiserror('tblQuoteOptionPremiums', 0, 1) with nowait;       INSERT INTO tblQuoteOptionPremiums (QuoteOp
Ascot_ImportAL3_Update_Quote_NBS_Zywave_Captive_IM	CREATE PROCEDURE [dbo].[Ascot_ImportAL3_Update_Quote_NBS_Zywave_Captive_IM]    @ImportLogID int  AS  BEGIN     DECLARE @ImportSource int   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID      DECLARE @RenewalOfControlNum INT = NULL  -- needed to be set for renewals   DECLARE @RenewalOfQuoteGuid UNIQUEIDENTIFIER = NULL -- needed to be set for renewals   DECLARE @RenewalOfQuoteID INT = NULL -- needed to obtain BOR producer contact on renewal   DECLARE @ImportVersion int = 0   DECLARE @PreBindNewBusinessRenewalProcessProcedure varchar(200) = ''   DECLARE @SQL_@PreBindExecute NVARCHAR(200)   DECLARE @ImportSouceName VARCHAR(200) = ''   DECLARE @QuotestatusId INT         SELECT  @ImportVersion = ImportVersion from ASCOT_AL3ZywaveImportHeader where ImportLogID = @ImportLogID    SELECT  @ImportSouceName = ISNULL(sourcename,'Policy Import') from ASCOT_lstAL3ImportSources where ID = @ImportSource       IF OBJECT_ID('tempdb..#PolsToCreate') IS NOT NULL BEGIN DROP TABLE #PolsToCreate END   SELECT   t.*,      cl.CompanyLocationGuid,      Cl.CompanyLineGUID,      l.LineGuid   INTO  #PolsToCreate   FROM  Ascot_AL3PolicyMasterTable_v2 t   INNER JOIN lstLines l ON l.LineID=t.LineCode   Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = t.CompanyCode   Inner Join  tblCompanyLines CL on CL.LineGUID = l.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and t.StateOfIssuance = CL.StateID and cl.ParentCompanyLineGUID IS NULL   WHERE  ImportLogID = @ImportLogID   AND   isNull(Error,0)=0   AND   DateProcessed IS NULL   AND   PolicyIndicator IN ('N', 'R')   AND   ISNULL(RewriteOfAccountNumber, '0') = '0'       ORDER BY PolicyTransactionID           --double check   IF OBJECT_ID('tempdb..#db') IS NOT NULL BEGIN DROP TABLE #db END     SELECT  t.DnlTrId,      CASE WHEN PremiumState IS NULL       THEN 'PremiumState is null'       WHEN CompanyCode IS NULL       THEN 'CompanyCode is null'       WHEN LineCode IS NULL       THEN 'LineCode is null'       WHEN ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0 and QuoteStatusReasonID is null       THEN 'PremiumAmount + TerrorismPremium is 0'       WHEN PolicyNumber IS NULL AND QuoteStatusReasonID is null       THEN 'PolicyNumber is null'       WHEN Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode)       THEN 'Duplicate policy number found'       WHEN (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID IS NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))       THEN 'Policy Transaction previously imported'       ELSE NULL      END As [Message]   INTO  #db   FROM  #PolsToCreate t   WHERE  PremiumState IS NULL      OR CompanyCode IS NULL      OR LineCode IS NULL      OR ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0 and QuoteStatusReasonID is null      --OR PolicyNumber IS NULL      OR (PolicyNumber IS NULL and QuoteStatusReasonID is null)      OR (Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode))      OR (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID is NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))      UPDATE Ascot_AL3PolicyMasterTable_v2   SET  Error=1,     ErrorMessage=ISNULL(d.[Message], 'Failed double check'),     ErrorTime=getdate()   FROM Ascot_AL3PolicyMasterTable_v2   INNER JOIN #db d ON Ascot_AL3PolicyMasterTable_v2.DnlTrId = d.DnlTrId       DELETE FROM #PolsToCreate    WHERE  DnlTrId IN (SELECT DnlTrId FROM #db)        IF OBJECT_ID('tempdb..#PolsToCreateDetails') IS NOT NULL   BEGIN      DROP TABLE #PolsToCreateDetails     END        CREATE TABLE #PolsToCreateDetails   (    ID int,    DnlTrId uniqueidentifier,    CompanyLocationCode int,    LineCode int,    StateID varchar(20),    Premium money,    Terrorism money,    CompanyLocationGuid uniqueidentifier,    CompanyLineGuid uniqueidentifier,    LineGuid uniqueidentifier,    CreatedQuoteOptionID int,    CreatedQuoteOptionGuid uniqueidentifier,    CreatedQuoteDetailID int   )               INSERT INTO #PolsToCreateDetails   SELECT    --ID int,      Ascot_AL3QuoteDetailTable_V2.ID,      --DnlTrId uniqueidentifier,      Ascot_AL3QuoteDetailTable_V2.DnlTrId,      --CompanyLocationCode int,      Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,      --LineCode int,      Ascot_AL3QuoteDetailTable_V2.LineCode,      --StateID varchar(20),      Ascot_AL3QuoteDetailTable_V2.StateID,      --Premium money,      Ascot_AL3QuoteDetailTable_V2.Premium,      --Terrorism money,      Ascot_AL3QuoteDetailTable_V2.Terrorism,      --CompanyLocationGuid uniqueidentifier,      tblCompanyLocations.CompanyLocationGUID,      --CompanyLineGuid uniqueidentifier      tblCompanyLines.CompanyLineGUID,      --LineGuid uniqueidentifier,      lstLines.LineGUID,      --CreatedQuoteOptionID int,      NULL,      --CreatedQuoteOptionGuid uniqueidentifier,      NULL,      --CreatedQuoteDetailID int,      NULL     FROM #PolsToCreate P   INNER JOIN Ascot_AL3QuoteDetailTable_V2 ON P.DnlTrId = Ascot_AL3QuoteDetailTable_V2.DnlTrId   LEFT JOIN tblCompanyLocations ON Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode = tblCompanyLocations.CompanyLocationCode   LEFT JOIN lstLines ON Ascot_AL3QuoteDetailTable_V2.LineCode = lstLines.LineID   LEFT JOIN tblCompanyLines ON tblCompanyLocations.CompanyLocationGUID = tblCompanyLines.CompanyLocationGUID    AND  lstLines.LineGuid = tblCompanyLines.LineGUID    AND  Ascot_AL3QuoteDetailTable_V2.StateID = tblCompanyLines.StateID    AND  ((tblCompanyLines.ParentCompanyLineGUID = P.CompanyLineGUID)       OR ((tblCompanyLines.ParentCompanyLineGUID IS NULL) AND (P.CompanyLineGUID = tblCompanyLines.CompanyLineGUID))      )  --select '#PolsToCreate' As PolsToCreate, * from #PolsToCreate  --select '#PolsToCreateDetails' AS PolsToCreateDetails, * from #PolsToCreateDetails       --ALTER TABLE #PolsToCreate ADD InsuredID int   ALTER TABLE #PolsToCreate ADD SubmissionGroupID int   ALTER TABLE #PolsToCreate ADD QuoteID int   --ALTER TABLE #PolsToCreate ADD ProducerContactID int     --SELECT * FROM #PolsToCreate               DECLARE @MGASystemsUserGuid uniqueidentifier   SELECT @MGASystemsUserGuid = UserGuid FROM tblUsers WHERE Username = 'Admin1'     DECLARE @DnlTrId uniqueidentifier     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToCreate     OPEN Cur   FETCH Cur INTO @DnlTrId      DECLARE @preblocking int   SET @preblocking=1       WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 10 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:10' --10 SECONDS     END    END       IF OBJECT_ID('tempdb..#InvoiceInstallmentsTable') IS NOT NULL   BEGIN      DROP TABLE #InvoiceInstallmentsTable     END     CREATE TABLE #InvoiceInstallmentsTable   (    QuoteID int,    EffectiveDate datetime,    ExpirationDate datetime,    NumInstallments int,    Installment int,    InstallmentDueDate datetime,    BillingCode varchar(100),    InstallmentMod decimal(20, 19)   )     IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL   BEGIN      DROP TABLE #ConfigurationsTable     END     CREATE TABLE #ConfigurationsTable   (    ID int,    StartingOnPoliciesEffective smalldatetime,    QuotingLocationGuid uniqueidentifier,    IssuingLocationGuid uniqueidentifier,    UnderwriterGuid uniqueidentifier,    IssuedByUserID int,    BoundByUserID int,    CostCenterID int,    BrokerCommissionFeeChargeCode int,    ProgramID int,    UnderwritingAssistantGuid uniqueidentifier,    AutoApplyFees bit,    CopyNotesandDocs BIT,    ProducerContactID INT,    ProducerLocationID int,    BillingTypeID INT,    CompanyLocationCode INT,    UseUWCloseDate BIT   )     WHILE @@Fetch_status=0    BEGIN     BEGIN TRY        BEGIN TRAN       DECLARE @PolicyNumber varchar(50)       DECLARE @datebilled datetime       DECLARE @policyIndicator varchar(5)       DECLARE @BusinessTypeID INT        DECLARE @CompanyLocationCode INT       DECLARE @InsuredFirstName VARCHAR (max)       DECLARE @InsuredLastName VARCHAR (max)        DECLARE @InsuredAddress2 VARCHAR (max)        DECLARE @InsuredFirstLastName VARCHAR (max)          SELECT  @PolicyNumber=PolicyNumber,          @datebilled = BillDate,          @policyIndicator = PolicyIndicator,         @BusinessTypeID =BusinessTypeID,         @CompanyLocationCode = CompanyCode,         @InsuredFirstName = InsuredFirstName,         @InsuredLastName = InsuredLastName,         @InsuredAddress2 =InsuredAddress2                FROM #PolsToCreate        WHERE DnlTrId=@DnlTrId         PRINT @PolicyNumber;              IF @datebilled IS NULL       BEGIN        SET @datebilled = getdate()                         END       ------------------------------------------------------------------ IssuingLocationGuid Change--------------------------------------------------------------       --Declare @IssuingLocationGuid UNIQUEIDENTIFIER, @QuotingLocationguid UNIQUEIDENTIFIER        -- SELECT @QuotingLocationguid=OfficeGUID from tblclientoffices  where Location in(Select SUBSTRING(Company, 1, CHARINDEX('(', Company) - 2) from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid=@importlogId)         -- Select @IssuingLocationGuid =ParentOfficeGuid from tblclientoffices  where OfficeGUID=@QuotingLocationguid         --------------------------------------------------------------------------------------------------------------------------------------------------------------------       INSERT INTO #ConfigurationsTable       SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,          Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,          Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,          --@QuotingLocationguid as QuotingLocationguid,          Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,          --@IssuingLocationGuid as IssuingLocationGuid,          Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,          Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,          Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,          Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,          Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,          Ascot_tblAL3ProgramConfigurations_v2.ProgramID,          --@ProgramID,          Ascot_tblAL3ProgramConfigurations_v2.UnderwritingAssistantGuid,          Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,          Ascot_tblAL3ProgramConfigurations_v2.CopyNotesandDocs,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerContactID,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerLocationID,          ASCOT_tblAL3ProgramConfigurations_V2.BillingTypeID,                ASCOT_tblAL3ProgramConfigurations_V2.CompanyLocationCode,          ASCOT_tblAL3ProgramConfigurations_V2.UseUWCloseDate         FROM  Ascot_tblAL3ProgramConfigurations_v2       INNER JOIN #PolsToCreate P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)        AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID        AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode        AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0        AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource         DECLARE @ConfigurationID int         SELECT TOP 1 @ConfigurationID = C.ID       FROM #ConfigurationsTable C       WHERE C.CompanyLocationCode = @CompanyLocationCode       ORDER BY C.StartingOnPoliciesEffective DESC         DECLARE @QuotingLocationGuid uniqueidentifier       DECLARE @QuotingLocationID int       DECLARE @IssuingLocationGuid uniqueidentifier       DECLARE @UnderwriterGuid uniqueidentifier       DECLARE @IssuedByUserID int       DECLARE @BoundByUserID int       DECLARE @CostCenterID int       DECLARE @BrokerCommissionFeeChargeCode int          DECLARE @ProgramID int       DECLARE @UnderwritingAssistantGuid uniqueidentifier       DECLARE @RunAutoApplyFees bit       DECLARE @CopyNotesandDocs bit       DECLARE @ProducerContactID int       DECLARE @ProducerLocationID int       DECLARE @BillingTypeID int       DECLARE @clientofficeID INT       DECLARE @AutoApplyFees bit       DECLARE @UseUWCloseDate BIT = 0  -- TFS 92747         SELECT @QuotingLocationGuid = QuotingLocationGuid,         @IssuingLocationGuid = IssuingLocationGuid,         @UnderwriterGuid = UnderwriterGuid,         @IssuedByUserID = IssuedByUserID,         @BoundByUserID = BoundByUserID,         @CostCenterID = CostCenterID,         @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,         @ProgramID = ProgramID,         @UnderwritingAssistantGuid = UnderwritingAssistantGuid,         @RunAutoApplyFees = AutoApplyFees,         @CopyNotesandDocs = CopyNotesandDocs,         @ProducerContactID = ProducerContactID,         @ProducerLocationID = ProducerLocationID,         @BillingTypeID = ISNULL(BillingTypeID,3), -- Default this to agnecy,         @AutoApplyFees = AutoApplyFees,         @UseUWCloseDate = UseUWCloseDate         FROM #ConfigurationsTable       WHERE ID = @ConfigurationID         SELECT @QuotingLocationID = tblClientOffices.OfficeID       FROM tblClientOffices       WHERE tblClientOffices.OfficeGuid = @QuotingLocationGuid         IF @ConfigurationID IS NULL       BEGIN          raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;         END         IF @ProducerLocationID = 0       BEGIN          SELECT @ProducerLocationID = ProducerCode        FROM #PolsToCreate         WHERE DnlTrId=@DnlTrId         END         -- TFS 87790 Get the quoting location office id used in spaccountingtransfer       select @clientofficeID =  officeid from tblclientoffices where officeguid = @QuotingLocationGuid         --make sure it doesn't exist.       DECLARE @AlreadyExists int       SELECT  @AlreadyExists=COUNT(*)        FROM  tblQuotes        OUTER APPLY (           SELECT TOP 1 RewriteQ.ControlNo,              RewriteQ.QuotingLocationGuid           FROM tblQuotes SubQ           INNER JOIN tblQuotes RewriteQ ON SubQ.QuoteGuid = RewriteQ.RewriteOfQuoteGuid           WHERE SubQ.ControlNo = tblQuotes.ControlNo          ) As RewriteTable       WHERE  PolicyNumber=@PolicyNumber       AND   tblQuotes.QuotingLocationGuid = @QuotingLocationGuid       AND   EXISTS(SELECT * FROM tblCompanyLines WHERE tblCompanyLines.CompanyLineGUID = tblQuotes.CompanyLineGuid AND tblCompanyLines.EnforceUniquePolicyNumbers = 1)       AND   ISNULL(RewriteTable.QuotingLocationGuid, tblQuotes.QuotingLocationGuid) = tblQuotes.QuotingLocationGuid       --in some cases an Ascot policy is being cancelled and rewritten to an Ethos policy that then needs to create a matching Ascot policy.        --This check is failing the creation in that case so check to see if there is a rewrite of this policy and if its quoting location matches this policys quoting location       --if the quoting locations match then don't create the policy           IF @AlreadyExists > 0        BEGIN         raiserror('Policy Already Exists', 15, 1) with nowait;        END         DECLARE @QuotingOfficeID int       SELECT @QuotingOfficeID = OfficeID       FROM tblClientOffices WHERE OfficeGuid = @QuotingLocationGuid         /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                 SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHTHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END           --insert the insured       --after discussion there is no clearance here       ----LEEDISABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ----LEEDISABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              --select top 1 * from tblInsureds       --raiserror('tblInsureds', 0, 1) with nowait;         ---- Insert it as a coproration or Individual           ----INSURED INDIVIDUAL       --If ISNULL(@InsuredFirstName,'')<> ''       --BEGIN       -- SET @InsuredFirstLastName = @InsuredFirstName + ' ' + @InsuredLastName         -- INSERT INTO tblInsureds        --  (        --     RiskID,        --     BusinessTypeID,        --     PolicyName,        --     FirstName,       --     LastName,        --     Name,        --     StatusID,        --     Soundex,        --     StrippedName,        --     StrippedPolicyName,        --     NumSubmissions,        --     DBA)         --  SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                --     4, -- select * from lstBusinessTypes where businesstype = 'Individual'       --     SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),       --     SUBSTRING(LTRIM(RTRIM(@InsuredFirstName)), 0, 501),       --     SUBSTRING(LTRIM(RTRIM(@InsuredLastName)), 0, 501),       --     SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),       --     1,       --     SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(@InsuredFirstLastName))), 0, 51),       --     SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),       --     SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),       --     1,       --     SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)       --  FROM  #PolsToCreate p       --  WHERE  DnlTrId=@DnlTrId       --  AND  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)       --END         --ELSE        ----INSURED CORPORATE            --BEGIN         -- INSERT INTO tblInsureds (RiskID, BusinessTypeID, PolicyName, CorporationName, Name, StatusID, Soundex, StrippedName, StrippedPolicyName, NumSubmissions, DBA)       -- SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                --    13, -- select * from lstBusinessTypes where businesstype = 'Corporation'       --    SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),       --    SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),       --    SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),       --    1,       --    SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(p.InsuredName))), 0, 51),       --    SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),       --    SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),       --    1,       --    SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)       -- FROM  #PolsToCreate p       -- WHERE  DnlTrId=@DnlTrId       -- and  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)         --END              ------LEEENABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ------LEEENABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              ----end-------------------------------------------------------------------------------------------------------------------              ----add the insureds location       --raiserror('tblInsuredLocations', 0, 1) with nowait;         --SELECT  1,       --   1,       --   SUBSTRING(RTRIM(LTRIM(p.InsuredAddress)), 0, 251),       --   SUBSTRING(RTRIM(LTRIM(@InsuredAddress2)), 0, 251),       --   SUBSTRING(RTRIM(LTRIM(p.InsuredCity)), 0, 51),       --   RTRIM(LTRIM(p.InsuredState)),       --   SUBSTRING(RTRIM(LTRIM(p.InsuredZip)), 0, 11),       --   SUBSTRING(RTRIM(LTRIM(p.insuredcounty)), 0, 51),       --   'USA' AS ISOCountryCode,        --   'Mailing' AS Name,       --   i.InsuredGuid       --FROM  #PolsToCreate p       --INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       --WHERE  DnlTrId=@DnlTrId       --and  NOT EXISTS(SELECT * FROM tblInsuredLocations WHERE tblInsuredLocations.InsuredGUID = I.InsuredGUID AND tblInsuredLocations.LocationTypeID = 1)                --INSERT INTO tblInsuredLocations (DeliveryMethodID, LocationTypeID, Address1, Address2, City, State, ZipCode, County, ISOCountryCode, Name, InsuredGuid)       --SELECT  1,       --   1,       --   SUBSTRING(RTRIM(LTRIM(p.InsuredAddress)), 0, 251),       --   SUBSTRING(RTRIM(LTRIM(@InsuredAddress2)), 0, 251),       --   SUBSTRING(RTRIM(LTRIM(p.InsuredCity)), 0, 51),       --   RTRIM(LTRIM(p.InsuredState)),       --   SUBSTRING(RTRIM(LTRIM(p.InsuredZip)), 0, 11),       --   SUBSTRING(RTRIM(LTRIM(p.insuredcounty)), 0, 51),       --   'USA' AS ISOCountryCode,        --   'Mailing' AS Name,       --   i.InsuredGuid       --FROM  #PolsToCreate p       --INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       --WHERE  DnlTrId=@DnlTrId       --and  NOT EXISTS(SELECT * FROM tblInsuredLocations WHERE tblInsuredLocations.InsuredGUID = I.InsuredGUID AND tblInsuredLocations.LocationTypeID = 1)           --Enable trigger tblInsuredLocations_OnlyOnePrimary on dbo.tblInsuredLocations       --end-------------------------------------------------------------------------------------------------------------------              --add submission       --raiserror('tblSubmissionGroup', 0, 1) with nowait;           ---- TFS 86643   Allow the program to dynamically assign a producer contact from designated producer location if one is not specified from the  config table.       --IF ISNULL(@ProducerContactID,0) = 0             --BEGIN       -- SELECT  TOP 1 @ProducerContactID = ProducerContactID FROM tblProducerContacts pc join tblProducerLocations p on pc.ProducerLocationGUID = p.ProducerLocationGUID WHERE p.ProducerLocationID = @ProducerLocationID       --END         --INSERT INTO tblSubmissionGroup (ProducerLocationGuid, ProducerContactID, InsuredGuid, DateSubmitted, AddedByUserGuid)       --SELECT  tblProducerLocations.ProducerLocationGuid,       --   --(SELECT TOP 1 ProducerContactID FROM tblProducerContacts pc WHERE pc.ProducerLocationGuid = tblProducerLocations.ProducerLocationGUID),       --   @ProducerContactID,       --   i.InsuredGuid,       --   getdate(),       --   '5be2621d-4bff-44de-b7d7-17fd01c90c85'        --FROM  #PolsToCreate p       --INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       --Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       --WHERE  DnlTrId=@DnlTrId              UPDATE  #PolsToCreate       SET   SubmissionGroupID=scope_identity()       WHERE  DnlTrId=@DnlTrId                       --UPDATE  #PolsToCreate       --SET   ProducerContactID=s.ProducerContactID       --FROM  #PolsToCreate p       --INNER JOIN tblSubmissionGroup s ON s.SubmissionGroupID=p.SubmissionGroupID       --WHERE  DnlTrId=@DnlTrId;       --end-------------------------------------------------------------------------------------------------------------------           --add policy       ----LEEDISABLE TRIGGER dbo.RecordQuoteStatusChange on dbo.tblQuotes       raiserror('tblQuotes', 0, 1) with nowait;       Declare @XMLQuoteGUID_IM nvarchar(50)       Select @XMLQuoteGUID_IM =QuoteGUID  from [dbo].[ASCOT_AL3ImportPolicy_Zywave_IM] where ImportLogId=@ImportLogID       --Select * from #PolsToCreate                    --UPDATE tblquotes       -- set        --  PolicyNumber = p.PolicyNumber,       --  DateIssued = p.dateissued,        --  IssuedByUserID = @IssuedByUserID,       --  DateBound = getdate(),       --  BoundByUserID = @BoundByUserID,       --  AccountNumber = p.AccountNumber,         --  UnderwritingAssistantGuid = @UnderwritingAssistantGuid,       --  QuoteStatusReasonID = p.QuoteStatusReasonID               -- FROM  #PolsToCreate p       --  INNER JOIN  ASCOT_AL3ImportPolicy_Zywave_IM PZIM on PZIM.DnlTrId = p.DnlTrId       --  WHERE  p.DnlTrId=@DnlTrId and PZIM.quoteguid = @XMLQuoteGUID_IM         --AND   P.SubmissionGroupID = s.SubmissionGroupID            --INSERT INTO tblQuotes (       -- SubmissionGroupGuid,       -- QuotingLocationGuid,       -- IssuingLocationGuid,       -- CompanyLocationGuid,       -- ControlGuid,       -- LineGuid,       -- QuoteStatusID,        -- EffectiveDate,        -- ExpirationDate,        -- PolicyTypeID,        -- StateID,       -- ProducerContactGuid,       -- UnderwriterUserGuid,        -- RetailerGuid,        -- TACSRUserGuid,       -- PolicyNumber,        -- PolicyNumberIndex,        -- SIC_Code,       -- BillingTypeID,       -- MinimumEarnedPercentage,        -- DateIssued,        -- IssuedByUserID,       -- DateBound,       -- BoundByUserID,        -- InsuredDBA,        -- InsuredFEIN,        -- InsuredSSN,        -- InsuredBusinessTypeID,        -- InsuredPolicyName,        -- InsuredCorporationName,        -- InsuredSalutation,        -- InsuredFirstName,        -- InsuredMiddleName,        -- InsuredLastName,       -- InsuredAddress1,        -- InsuredAddress2,        -- InsuredCity,        -- InsuredState,        -- InsuredCounty,        -- InsuredISOCountryCode,        -- InsuredZipCode,        -- InsuredPhone,        -- InsuredFax,       -- ProducerLocationID,        -- ProducerName,        -- ProducerLocationName,        -- ProducerAddress1,        -- ProducerAddress2,        -- ProducerCity,        -- ProducerCounty,        -- ProducerState,        -- ProducerISOCountryCode,        -- ProducerZipCode,        -- ProducerPhone,        -- ProducerFax,        -- FinanceCompanyGuid,        -- CompanyLineGuid,        -- AccountNumber,        -- CostCenterID,        -- InspectionCompanyID,        -- QuickQuote,        -- InstallmentBillingQuoteOptionID,        -- Auditable,        -- ControlNo,       -- UnderwritingAssistantGuid,       -- QuoteStatusReasonID,       -- --TFS 90517   added Renewal logic to populate renewal fields on tblquotes       -- RenewalOfControlNum,       -- RenewalOfQuoteGuid       --)       --SELECT  s.SubmissionGroupGuid,       --   @QuotingLocationGuid AS QuotingLocationGuid,        --   @IssuingLocationGuid AS IssuingLocationGuid,       --   p.CompanyLocationGuid,       --   NEWID(),       --   p.LineGuid,       --   1 as QuoteStatusID,       --   p.PolicyEffectiveDate,       --   p.PolicyExpirationDate,       --   CASE p.PolicyIndicator WHEN 'N' THEN 1 WHEN 'R' THEN 2 ELSE NULL END,       --   p.PremiumState,       --   pc.ProducerContactGUID,       --   @UnderwriterGuid as UnderwriterGuid,       --   NULL,       --   NULL,       --   p.PolicyNumber,       --   NULL,       --   NULL,       --   --3,       --   @BillingTypeID,       --   NULL AS MinimumEarnedPercentage,        --   p.dateissued AS DateIssued,        --   @IssuedByUserID AS IssuedByUserID,        --   getdate() AS DateBound,       --   @BoundByUserID AS BoundByUserID,        --   NULL AS InsuredDBA,        --   NULL AS InsuredFEIN,        --   NULL AS InsuredSSN,        --   InsuredTable.BusinessTypeID,        --   SUBSTRING(InsuredTable.[Name], 0, 501),        --   SUBSTRING(InsuredTable.CorporationName, 0, 501),        --   NULL AS InsuredSalutation,        --   NULL AS InsuredFirstName,        --   NULL AS InsuredMiddleName,        --   NULL AS InsuredLastName,       --   InsuredTable.Address1,        --   InsuredTable.Address2,        --   InsuredTable.City,        --   InsuredTable.[State],        --   '' AS InsuredCounty,        --   InsuredTable.ISOCountryCode,        --   InsuredTable.ZipCode,        --   NULL AS InsPhone,        --   NULL AS InsFax,       --   pl.ProducerLocationID,        --   pr.ProducerName,        --   pl.Name AS ProdLocationName,        --   pl.Address1 AS ProdAddress,        --   pl.Address2 AS ProdAddress2,        --   pl.City AS ProdCity,        --   pl.County,        --   pl.State AS ProdState,        --   pl.ISOCountryCode AS ProdCountry,        --   pl.ZipCode AS ProdZip,        --   pl.Phone,        --   pl.Fax,        --   NULL AS finance,        --   p.CompanyLineGUID,        --   p.AccountNumber AS AccountNumber,       --   @CostCenterID AS CostCenterID,        --   NULL AS Insp,        --   0 AS QQ,        --   NULL AS InstallM,        --   0 AS audit,        --   ISNULL((SELECT MAX(ControlNo) FROM dbo.tblQuotes), 0)+1,       --   @UnderwritingAssistantGuid,       --   p.QuoteStatusReasonID,         --   --TFS 90517  added Renewal logic to populate renewal fields on tblquotes       --   --This needs to be tested in Ascot TEST before  it goes live 9/23/22                 --   CASE p.PolicyIndicator        --    WHEN 'N' THEN NULL        --    WHEN 'R' THEN p.RenewalOfAccountNumber        --    ELSE NULL END, --RenewalOfControlNum,                 --   CASE p.PolicyIndicator        --    WHEN 'N' THEN NULL        --    WHEN 'R' THEN (select top 1 quoteguid from tblQuotes where ControlNo = p.RenewalOfAccountNumber order by QuoteID desc)        --    ELSE NULL END --RenewalOfQuoteguid           --    --1 + (Select Top 1 ControlNo from tblQuotes order by ControlNo Desc) AS ControlNo --This is a place holder we will update right before committing.       --FROM  #PolsToCreate p       --CROSS APPLY (       --    SELECT TOP 1 i.InsuredGUID,       --       i.BusinessTypeID,       --       i.[Name],       --       i.CorporationName,       --       il.Address1,        --       il.Address2,        --       il.City,        --       il.[State],       --       il.ISOCountryCode,        --       il.ZipCode       --    FROM tblInsureds i       --    INNER JOIN tblInsuredLocations il ON il.InsuredGuid=i.InsuredGuid       --    WHERE i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       --    and il.LocationTypeID = 1       --   ) As InsuredTable           --INNER JOIN tblSubmissionGroup s ON s.InsuredGuid=InsuredTable.InsuredGUID       --INNER JOIN tblProducerLocations pl ON pl.ProducerLocationGuid=s.ProducerLocationGuid       --INNER JOIN tblProducers pr ON pr.ProducerGuid=pl.ProducerGuid       --INNER JOIN tblProducerContacts pc on pc.ProducerContactID = s.ProducerContactID       --WHERE  DnlTrId=@DnlTrId       --AND   P.SubmissionGroupID = s.SubmissionGroupID           DECLARE @QuoteID int       --SET @QuoteID=scope_identity()       select @QuoteID = QuoteID from tblquotes where quoteguid = @XMLQuoteGUID_IM         Select @quoteid as id1         DECLARE @QuoteGuid uniqueidentifier       SELECT @QuoteGuid = QuoteGuid FROM tblQuotes WHERE QuoteID = @QuoteID                UPDATE Q SET CostCenterID = ISNULL(CostCenterTable.GroupID, Q.CostCenterID)       FROM tblQuotes Q       OUTER APPLY (           SELECT TOP 1 GroupID           FROM dbo.GetQuoteCostCenters(@QuoteGuid) T           ORDER BY T.IsDefault DESC, T.SystemDefined DESC, T.EffectiveDate DESC          ) As CostCenterTable       WHERE Q.QuoteGUID = @QuoteGuid                  UPDATE  #PolsToCreate       SET   QuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;         UPDATE  Ascot_AL3PolicyMasterTable_v2       SET   CreatedQuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;                --end-------------------------------------------------------------------------------------------------------------------              --add quote details       raiserror('tblQuoteDetails', 0, 1) with nowait;         ----for monoline policies       --INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       --SELECT  q.QuoteGuid,       --   p.CompanyLineGuid,       --   (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=p.CompanyLocationGuid),       --   1,       --   --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),       --   --TFS 87790 Get dynamic  commissions       --   ISNULL(p.producerComm,dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),       --   0,       --   30 as TermsOfPayment,       --   CASE WHEN @ProgramID = 0       --    THEN ProgramCodeTable.ProgramID       --    ELSE @ProgramID       --   END       --FROM  #PolsToCreate p       --INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       --INNER JOIN lstLines ON q.LineGuid = lstLines.LineGUID       --Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       --OUTER APPLY (       --    SELECT TOP 1 tblCompanyProgramCodes.ProgramID       --    FROM tblCompanyProgramCodes        --    LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID       --    LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID       --    WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')       --    AND ( (tblCompanyProgramCodes.LineGUID = q.LineGUID OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode)))       --    --AND ( tblCompanyProgramCodes.LineGUID = q.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')       --    AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')       --    AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')       --    --AND ( q.EffectiveDate BETWEEN Convert(varchar(12),tblCompanyProgramCodes.ContractEffective,101) AND Convert(varchar(12),tblCompanyProgramCodes.ContractExpiration,101))       --    AND ( q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)       --    AND (ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'  AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Special Program for Highland' )       --    ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = q.StateID THEN 1 ELSE 0 END +       --      CASE WHEN ((tblCompanyProgramCodes.LineGUID = q.LineGuid  OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode))) THEN 1 ELSE 0 END +       --      --CASE WHEN tblCompanyProgramCodes.LineGUID = q.LineGuid THEN 1 ELSE 0 END +       --      CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +       --      CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +       --      CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +       --      --CASE WHEN tblCompanyProgramCodes.GroupCode = lstLines.GroupCode THEN 1 ELSE 0 END DESC,       --      tblCompanyProgramCodes.ContractEffective DESC       --   ) As ProgramCodeTable       --WHERE  DnlTrId=@DnlTrId       --AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)              ----for package policies       --INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       --SELECT  q.QuoteGuid,       --   DetailTable.CompanyLineGuid,       --   (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=DetailTable.CompanyLocationGuid),       --   1,       --   --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),       --   --TFS 87790 Get dynamic  commissions       --   ISNULL(p.producerComm, dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),       --   0,       --   30 as TermsOfPayment,       --   CASE WHEN @ProgramID = 0       --    THEN ProgramCodeTable.ProgramID       --    ELSE @ProgramID       --   END       --FROM  #PolsToCreate p       --CROSS APPLY (       --    SELECT DISTINCT SubPD.CompanyLineGuid,       --        SubPD.CompanyLocationGuid,       --        SubCL.LineGUID,       --        SubPD.StateID       --    FROM #PolsToCreateDetails SubPD       --    INNER JOIN tblCompanyLines SubCL ON SubPD.CompanyLineGuid = SubCL.CompanyLineGuid       --    WHERE SubPD.DnlTrId = P.DnlTrId       --    AND SubPD.StateID = P.StateOfIssuance       --   ) AS DetailTable       --INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       --INNER JOIN lstLines ParentLine ON q.LineGuid = ParentLine.LineGUID       --Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       --OUTER APPLY (       --    SELECT TOP 1 tblCompanyProgramCodes.ProgramID       --    FROM tblCompanyProgramCodes        --    LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID       --    LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID       --    WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')       --    AND ( tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')       --    AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')       --    AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')       --    AND (q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)       --    AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'       --    ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = DetailTable.StateID THEN 1 ELSE 0 END +       --      CASE WHEN tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid THEN 1 ELSE 0 END +       --      CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +       --      CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +       --      CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +       --      CASE WHEN tblCompanyProgramCodes.GroupCode = ParentLine.GroupCode THEN 1 ELSE 0 END DESC,       --      tblCompanyProgramCodes.ContractEffective DESC       --   ) As ProgramCodeTable       --WHERE  DnlTrId=@DnlTrId         UPDATE PD SET CreatedQuoteDetailID = tblQuoteDetails.QuoteDetailID       FROM #PolsToCreateDetails PD       INNER JOIN #PolsToCreate P ON PD.DnlTrId = P.DnlTrId       INNER JOIN tblQuotes ON P.QuoteID = tblQuotes.QuoteID       INNER JOIN tblQuoteDetails ON tblQuotes.QuoteGUID = tblQuoteDetails.QuoteGuid        AND tblQuoteDetails.CompanyLineGuid = PD.CompanyLineGuid       WHERE PD.StateID = P.StateOfIssuance       --------------------------------------------------------16/04 Writing Compnay User Story 107144            Declare @CompanyLocationGUID_XML Varchar(250),@XMLQuoteidtest varchar(100),        @CompanyLineGUID_XML varchar(250),@InsuredNameXML varchar(250),@StateIDXML varchar(50),@InsuredZipXML varchar(50),@InsuredCityXML varchar(50), @PremiumStateXML varchar(20),        @InsuredAddressXML varchar(250), @InsuredCountryXML varchar(250), @InsuredGUID nvarchar(250)        Select @InsuredGUID=InsuredGUID from tblSubmissionGroup where SubmissionGroupGUID=(Select SubmissionGroupGUID from tblquotes where QuoteGuid = @QuoteGuid)        Select         @StateIDXML = p.InsuredStat
Ascot_ImportAL3_NBS_Zywave_Captive_IM	  CREATE PROCEDURE [dbo].[Ascot_ImportAL3_NBS_Zywave_Captive_IM]   @ImportLogID int  AS  BEGIN        DECLARE @XMLQuoteGuid nvarchar(100) , @XMLControlNo int    SELECT @XMLQuoteGuid = QuoteGuid ,        @XMLControlNo = ControlNo        FROM ASCOT_AL3ImportPolicy_Zywave_IM WHERE ImportLogID = @ImportLogID      IF @XMLQuoteGuid is not null and @XMLControlNo is not null     BEGIN        select 'Test1'       EXEC [dbo].[Ascot_ImportAL3_Update_Quote_NBS_Zywave_Captive_IM] @ImportLogID     END      ELSE     BEGIN       select 'Test2'       EXEC [dbo].[Ascot_ImportAL3_Insert_NBS_Zywave_Captive_IM]    @ImportLogID     END    END
Ascot_ImportAL3_NBS_V2_DynamicProducer	CREATE   PROCEDURE [dbo].[Ascot_ImportAL3_NBS_V2_DynamicProducer]   @ImportLogID int  AS  BEGIN     DECLARE @ImportSource int   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID      DECLARE @RenewalOfControlNum INT = NULL  -- needed to be set for renewals   DECLARE @RenewalOfQuoteGuid UNIQUEIDENTIFIER = NULL -- needed to be set for renewalsF   DECLARE @RenewalOfQuoteID INT = NULL -- needed to obtain BOR producer contact on renewal   DECLARE @ImportVersion int = 0   DECLARE @PreBindNewBusinessRenewalProcessProcedure varchar(200) = ''   DECLARE @SQL_@PreBindExecute NVARCHAR(200)   DECLARE @ImportSouceName VARCHAR(200) = ''     SELECT  @ImportVersion = ImportVersion from ASCOT_AL3ImportHeader where ImportLogID = @ImportLogID     SELECT  @ImportSouceName = ISNULL(sourcename,'Policy Import') from ASCOT_lstAL3ImportSources where ID = @ImportVersion       IF OBJECT_ID('tempdb..#PolsToCreate') IS NOT NULL BEGIN DROP TABLE #PolsToCreate END   SELECT   t.*,      cl.CompanyLocationGuid,      Cl.CompanyLineGUID,      l.LineGuid   INTO  #PolsToCreate   FROM  dbo.Ascot_AL3PolicyMasterTable_v2 t   INNER JOIN lstLines l ON l.LineID=t.LineCode   Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = t.CompanyCode   Inner Join  tblCompanyLines CL on CL.LineGUID = l.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and t.StateOfIssuance = CL.StateID and cl.ParentCompanyLineGUID IS NULL   WHERE  ImportLogID = @ImportLogID   AND   isNull(Error,0)=0   AND   DateProcessed IS NULL   AND   PolicyIndicator IN ('N', 'R')   AND   ISNULL(RewriteOfAccountNumber, '0') = '0'       ORDER BY PolicyTransactionID     DELETE FROM #PolsToCreate     WHERE EXISTS (     SELECT 1 FROM Ascot_AL3PolicyMasterTable_v2 t     WHERE t.PolicyTransactionID < #PolsToCreate.PolicyTransactionID     AND t.ImportLogID = @ImportLogID     AND t.PolicyIndicator NOT IN ('N', 'R')     AND t.AccountNumber = #PolsToCreate.AccountNumber     )       --double check   IF OBJECT_ID('tempdb..#db') IS NOT NULL BEGIN DROP TABLE #db END     SELECT  t.DnlTrId,      CASE WHEN PremiumState IS NULL       THEN 'PremiumState is null'       WHEN CompanyCode IS NULL       THEN 'CompanyCode is null'       WHEN LineCode IS NULL       THEN 'LineCode is null'       WHEN ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0       THEN 'PremiumAmount + TerrorismPremium is 0'       WHEN PolicyNumber IS NULL       THEN 'PolicyNumber is null'       WHEN Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode)       THEN 'Duplicate policy number found'       WHEN (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           -- AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID IS NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))       THEN 'Policy Transaction previously imported'       ELSE NULL      END As [Message]   INTO  #db   FROM  #PolsToCreate t   WHERE  PremiumState IS NULL      OR CompanyCode IS NULL      OR LineCode IS NULL      OR ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0      OR PolicyNumber IS NULL      OR (Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode))      OR (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           -- AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID is NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))      UPDATE Ascot_AL3PolicyMasterTable_v2   SET  Error=1,     ErrorMessage=ISNULL(d.[Message], 'Failed double check'),     ErrorTime=getdate()   FROM Ascot_AL3PolicyMasterTable_v2   INNER JOIN #db d ON Ascot_AL3PolicyMasterTable_v2.DnlTrId = d.DnlTrId       DELETE FROM #PolsToCreate    WHERE  DnlTrId IN (SELECT DnlTrId FROM #db)        IF OBJECT_ID('tempdb..#PolsToCreateDetails') IS NOT NULL   BEGIN      DROP TABLE #PolsToCreateDetails     END        CREATE TABLE #PolsToCreateDetails   (    ID int,    DnlTrId uniqueidentifier,    CompanyLocationCode int,    LineCode int,    StateID varchar(20),    Premium money,    Terrorism money,    CompanyLocationGuid uniqueidentifier,    CompanyLineGuid uniqueidentifier,    LineGuid uniqueidentifier,    CreatedQuoteOptionID int,    CreatedQuoteOptionGuid uniqueidentifier,    CreatedQuoteDetailID int   )               INSERT INTO #PolsToCreateDetails   SELECT    --ID int,      Ascot_AL3QuoteDetailTable_V2.ID,      --DnlTrId uniqueidentifier,      Ascot_AL3QuoteDetailTable_V2.DnlTrId,      --CompanyLocationCode int,      Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,      --LineCode int,      Ascot_AL3QuoteDetailTable_V2.LineCode,      --StateID varchar(20),      Ascot_AL3QuoteDetailTable_V2.StateID,      --Premium money,      Ascot_AL3QuoteDetailTable_V2.Premium,      --Terrorism money,      Ascot_AL3QuoteDetailTable_V2.Terrorism,      --CompanyLocationGuid uniqueidentifier,      tblCompanyLocations.CompanyLocationGUID,      --CompanyLineGuid uniqueidentifier      tblCompanyLines.CompanyLineGUID,      --LineGuid uniqueidentifier,      lstLines.LineGUID,      --CreatedQuoteOptionID int,      NULL,      --CreatedQuoteOptionGuid uniqueidentifier,      NULL,      --CreatedQuoteDetailID int,      NULL     FROM #PolsToCreate P   INNER JOIN Ascot_AL3QuoteDetailTable_V2 ON P.DnlTrId = Ascot_AL3QuoteDetailTable_V2.DnlTrId   LEFT JOIN tblCompanyLocations ON Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode = tblCompanyLocations.CompanyLocationCode   LEFT JOIN lstLines ON Ascot_AL3QuoteDetailTable_V2.LineCode = lstLines.LineID   LEFT JOIN tblCompanyLines ON tblCompanyLocations.CompanyLocationGUID = tblCompanyLines.CompanyLocationGUID    AND  lstLines.LineGuid = tblCompanyLines.LineGUID    AND  Ascot_AL3QuoteDetailTable_V2.StateID = tblCompanyLines.StateID    AND  ((tblCompanyLines.ParentCompanyLineGUID = P.CompanyLineGUID)       OR ((tblCompanyLines.ParentCompanyLineGUID IS NULL) AND (P.CompanyLineGUID = tblCompanyLines.CompanyLineGUID))      )  --select '#PolsToCreate' As PolsToCreate, * from #PolsToCreate  --select '#PolsToCreateDetails' AS PolsToCreateDetails, * from #PolsToCreateDetails       --ALTER TABLE #PolsToCreate ADD InsuredID int   ALTER TABLE #PolsToCreate ADD SubmissionGroupID int   ALTER TABLE #PolsToCreate ADD QuoteID int   --ALTER TABLE #PolsToCreate ADD ProducerContactID int     --SELECT * FROM #PolsToCreate         DECLARE @MGASystemsUserGuid uniqueidentifier   SELECT @MGASystemsUserGuid = UserGuid FROM tblUsers WHERE Username = 'Admin1'     DECLARE @DnlTrId uniqueidentifier     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToCreate     OPEN Cur   FETCH Cur INTO @DnlTrId      DECLARE @preblocking int   SET @preblocking=1       WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 10 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:10' --10 SECONDS     END    END       IF OBJECT_ID('tempdb..#InvoiceInstallmentsTable') IS NOT NULL   BEGIN      DROP TABLE #InvoiceInstallmentsTable     END     CREATE TABLE #InvoiceInstallmentsTable   (    QuoteID int,    EffectiveDate datetime,    ExpirationDate datetime,    NumInstallments int,    Installment int,    InstallmentDueDate datetime,    BillingCode varchar(100),    InstallmentMod decimal(20, 19)   )     IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL   BEGIN      DROP TABLE #ConfigurationsTable     END     CREATE TABLE #ConfigurationsTable   (    ID int,    StartingOnPoliciesEffective smalldatetime,    QuotingLocationGuid uniqueidentifier,    IssuingLocationGuid uniqueidentifier,    UnderwriterGuid uniqueidentifier,    IssuedByUserID int,    BoundByUserID int,    CostCenterID int,    BrokerCommissionFeeChargeCode int,    ProgramID int,    UnderwritingAssistantGuid uniqueidentifier,    AutoApplyFees bit,    CopyNotesandDocs BIT,    ProducerContactID INT,    ProducerLocationID int,    BillingTypeID INT,    CompanyLocationCode INT,    UseUWCloseDate BIT   )     WHILE @@Fetch_status=0    BEGIN     BEGIN TRY        BEGIN TRAN       DECLARE @PolicyNumber varchar(50)       DECLARE @datebilled datetime       DECLARE @policyIndicator varchar(5)       DECLARE @BusinessTypeID INT        DECLARE @CompanyLocationCode INT       DECLARE @InsuredFirstName VARCHAR (max)       DECLARE @InsuredLastName VARCHAR (max)        DECLARE @InsuredAddress2 VARCHAR (max)        DECLARE @InsuredFirstLastName VARCHAR (max)          SELECT  @PolicyNumber=PolicyNumber,          @datebilled = BillDate,          @policyIndicator = PolicyIndicator,         @BusinessTypeID =BusinessTypeID,         @CompanyLocationCode = CompanyCode,         @InsuredFirstName = InsuredFirstName,         @InsuredLastName = InsuredLastName,         @InsuredAddress2 =InsuredAddress2                FROM #PolsToCreate        WHERE DnlTrId=@DnlTrId         PRINT @PolicyNumber;              IF @datebilled IS NULL       BEGIN        SET @datebilled = getdate()                         END           INSERT INTO #ConfigurationsTable       SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,          Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,          Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,          Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,          Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,          Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,          Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,          Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,          Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,          Ascot_tblAL3ProgramConfigurations_v2.ProgramID,          Ascot_tblAL3ProgramConfigurations_v2.UnderwritingAssistantGuid,          Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,          Ascot_tblAL3ProgramConfigurations_v2.CopyNotesandDocs,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerContactID,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerLocationID,          ASCOT_tblAL3ProgramConfigurations_V2.BillingTypeID,                ASCOT_tblAL3ProgramConfigurations_V2.CompanyLocationCode,          ASCOT_tblAL3ProgramConfigurations_V2.UseUWCloseDate         FROM  Ascot_tblAL3ProgramConfigurations_v2       INNER JOIN #PolsToCreate P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)        AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID        AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode        AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0        AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource         DECLARE @ConfigurationID int         SELECT TOP 1 @ConfigurationID = C.ID       FROM #ConfigurationsTable C       WHERE C.CompanyLocationCode = @CompanyLocationCode       ORDER BY C.StartingOnPoliciesEffective DESC         DECLARE @QuotingLocationGuid uniqueidentifier       DECLARE @QuotingLocationID int       DECLARE @IssuingLocationGuid uniqueidentifier       DECLARE @UnderwriterGuid uniqueidentifier       DECLARE @IssuedByUserID int       DECLARE @BoundByUserID int       DECLARE @CostCenterID int       DECLARE @BrokerCommissionFeeChargeCode int       DECLARE @ProgramID int       DECLARE @UnderwritingAssistantGuid uniqueidentifier       DECLARE @RunAutoApplyFees bit       DECLARE @CopyNotesandDocs bit       DECLARE @ProducerContactID int       DECLARE @ProducerLocationID int       DECLARE @BillingTypeID int       DECLARE @clientofficeID INT       DECLARE @AutoApplyFees bit       DECLARE @UseUWCloseDate BIT = 0  -- TFS 92747         SELECT @QuotingLocationGuid = QuotingLocationGuid,         @IssuingLocationGuid = IssuingLocationGuid,         @UnderwriterGuid = UnderwriterGuid,         @IssuedByUserID = IssuedByUserID,         @BoundByUserID = BoundByUserID,         @CostCenterID = CostCenterID,         @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,         @ProgramID = ProgramID,         @UnderwritingAssistantGuid = UnderwritingAssistantGuid,         @RunAutoApplyFees = AutoApplyFees,         @CopyNotesandDocs = CopyNotesandDocs,         @ProducerContactID = ProducerContactID,         @ProducerLocationID = ProducerLocationID,         @BillingTypeID = ISNULL(BillingTypeID,3), -- Default this to agnecy,         @AutoApplyFees = AutoApplyFees,         @UseUWCloseDate = UseUWCloseDate         FROM #ConfigurationsTable       WHERE ID = @ConfigurationID         SELECT @QuotingLocationID = tblClientOffices.OfficeID       FROM tblClientOffices       WHERE tblClientOffices.OfficeGuid = @QuotingLocationGuid         IF @ConfigurationID IS NULL       BEGIN          raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;         END         IF @ProducerLocationID = 0       BEGIN          SELECT @ProducerLocationID = ProducerCode        FROM #PolsToCreate         WHERE DnlTrId=@DnlTrId         END         -- TFS 87790 Get the quoting location office id used in spaccountingtransfer       select @clientofficeID =  officeid from tblclientoffices where officeguid = @QuotingLocationGuid         --make sure it doesn't exist.       DECLARE @AlreadyExists int       SELECT  @AlreadyExists=COUNT(*)        FROM  tblQuotes        OUTER APPLY (           SELECT TOP 1 RewriteQ.ControlNo,              RewriteQ.QuotingLocationGuid           FROM tblQuotes SubQ           INNER JOIN tblQuotes RewriteQ ON SubQ.QuoteGuid = RewriteQ.RewriteOfQuoteGuid           WHERE SubQ.ControlNo = tblQuotes.ControlNo          ) As RewriteTable       WHERE  PolicyNumber=@PolicyNumber       AND   tblQuotes.QuotingLocationGuid = @QuotingLocationGuid       AND   EXISTS(SELECT * FROM tblCompanyLines WHERE tblCompanyLines.CompanyLineGUID = tblQuotes.CompanyLineGuid AND tblCompanyLines.EnforceUniquePolicyNumbers = 1)       AND   ISNULL(RewriteTable.QuotingLocationGuid, tblQuotes.QuotingLocationGuid) = tblQuotes.QuotingLocationGuid       --in some cases an Ascot policy is being cancelled and rewritten to an Ethos policy that then needs to create a matching Ascot policy.        --This check is failing the creation in that case so check to see if there is a rewrite of this policy and if its quoting location matches this policys quoting location       --if the quoting locations match then don't create the policy           IF @AlreadyExists > 0        BEGIN         raiserror('Policy Already Exists', 15, 1) with nowait;        END         DECLARE @QuotingOfficeID int       SELECT @QuotingOfficeID = OfficeID       FROM tblClientOffices WHERE OfficeGuid = @QuotingLocationGuid         /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                 SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHTHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END           --insert the insured       --after discussion there is no clearance here       ----LEEDISABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ----LEEDISABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              --select top 1 * from tblInsureds       raiserror('tblInsureds', 0, 1) with nowait;         -- Insert it as a coproration or Individual           --INSURED INDIVIDUAL       If ISNULL(@InsuredFirstName,'')<> ''       BEGIN        SET @InsuredFirstLastName = @InsuredFirstName + ' ' + @InsuredLastName          INSERT INTO tblInsureds          (             RiskID,             BusinessTypeID,             PolicyName,             FirstName,            LastName,             Name,             StatusID,             Soundex,             StrippedName,             StrippedPolicyName,             NumSubmissions,             DBA)           SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                     4, -- select * from lstBusinessTypes where businesstype = 'Individual'            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            1,            SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(@InsuredFirstLastName))), 0, 51),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            1,            SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)         FROM  #PolsToCreate p         WHERE  DnlTrId=@DnlTrId         AND  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)       END         ELSE        --INSURED CORPORATE            BEGIN          INSERT INTO tblInsureds (RiskID, BusinessTypeID, PolicyName, CorporationName, Name, StatusID, Soundex, StrippedName, StrippedPolicyName, NumSubmissions, DBA)        SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                    13, -- select * from lstBusinessTypes where businesstype = 'Corporation'           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           1,           SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(p.InsuredName))), 0, 51),           SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),           SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),           1,           SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)        FROM  #PolsToCreate p        WHERE  DnlTrId=@DnlTrId        and  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)         END              ----LEEENABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ----LEEENABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              --end-------------------------------------------------------------------------------------------------------------------              --add the insureds location       raiserror('tblInsuredLocations', 0, 1) with nowait;              INSERT INTO tblInsuredLocations (DeliveryMethodID, LocationTypeID, Address1, Address2, City, State, ZipCode, County, ISOCountryCode, Name, InsuredGuid)       SELECT  1,          1,          SUBSTRING(RTRIM(LTRIM(p.InsuredAddress)), 0, 251),          SUBSTRING(RTRIM(LTRIM(@InsuredAddress2)), 0, 251),          SUBSTRING(RTRIM(LTRIM(p.InsuredCity)), 0, 51),          RTRIM(LTRIM(p.InsuredState)),          SUBSTRING(RTRIM(LTRIM(p.InsuredZip)), 0, 11),          SUBSTRING(RTRIM(LTRIM(p.insuredcounty)), 0, 51),          'USA' AS ISOCountryCode,           'Mailing' AS Name,          i.InsuredGuid       FROM  #PolsToCreate p       INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       WHERE  DnlTrId=@DnlTrId       and  NOT EXISTS(SELECT * FROM tblInsuredLocations WHERE tblInsuredLocations.InsuredGUID = I.InsuredGUID AND tblInsuredLocations.LocationTypeID = 1)           --Enable trigger tblInsuredLocations_OnlyOnePrimary on dbo.tblInsuredLocations       --end-------------------------------------------------------------------------------------------------------------------              --add submission       raiserror('tblSubmissionGroup', 0, 1) with nowait;           -- TFS 86643   Allow the program to dynamically assign a producer contact from designated producer location if one is not specified from the  config table.       IF ISNULL(@ProducerContactID,0) = 0             BEGIN        SELECT  TOP 1 @ProducerContactID = ProducerContactID FROM tblProducerContacts pc join tblProducerLocations p on pc.ProducerLocationGUID = p.ProducerLocationGUID WHERE p.ProducerLocationID = @ProducerLocationID       END         INSERT INTO tblSubmissionGroup (ProducerLocationGuid, ProducerContactID, InsuredGuid, DateSubmitted, AddedByUserGuid)       SELECT  tblProducerLocations.ProducerLocationGuid,          --(SELECT TOP 1 ProducerContactID FROM tblProducerContacts pc WHERE pc.ProducerLocationGuid = tblProducerLocations.ProducerLocationGUID),          @ProducerContactID,          i.InsuredGuid,          getdate(),          '5be2621d-4bff-44de-b7d7-17fd01c90c85'        FROM  #PolsToCreate p       INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       WHERE  DnlTrId=@DnlTrId              UPDATE  #PolsToCreate       SET   SubmissionGroupID=scope_identity()       WHERE  DnlTrId=@DnlTrId                       --UPDATE  #PolsToCreate       --SET   ProducerContactID=s.ProducerContactID       --FROM  #PolsToCreate p       --INNER JOIN tblSubmissionGroup s ON s.SubmissionGroupID=p.SubmissionGroupID       --WHERE  DnlTrId=@DnlTrId;       --end-------------------------------------------------------------------------------------------------------------------           --add policy       ----LEEDISABLE TRIGGER dbo.RecordQuoteStatusChange on dbo.tblQuotes       raiserror('tblQuotes', 0, 1) with nowait;       INSERT INTO tblQuotes (        SubmissionGroupGuid,        QuotingLocationGuid,        IssuingLocationGuid,        CompanyLocationGuid,        ControlGuid,        LineGuid,        QuoteStatusID,         EffectiveDate,         ExpirationDate,         PolicyTypeID,         StateID,        ProducerContactGuid,        UnderwriterUserGuid,         RetailerGuid,         TACSRUserGuid,        PolicyNumber,         PolicyNumberIndex,         SIC_Code,        BillingTypeID,        MinimumEarnedPercentage,         DateIssued,         IssuedByUserID,        DateBound,        BoundByUserID,         InsuredDBA,         InsuredFEIN,         InsuredSSN,         InsuredBusinessTypeID,         InsuredPolicyName,         InsuredCorporationName,         InsuredSalutation,         InsuredFirstName,         InsuredMiddleName,         InsuredLastName,        InsuredAddress1,         InsuredAddress2,         InsuredCity,         InsuredState,         InsuredCounty,         InsuredISOCountryCode,         InsuredZipCode,         InsuredPhone,         InsuredFax,        ProducerLocationID,         ProducerName,         ProducerLocationName,         ProducerAddress1,         ProducerAddress2,         ProducerCity,         ProducerCounty,         ProducerState,         ProducerISOCountryCode,         ProducerZipCode,         ProducerPhone,         ProducerFax,         FinanceCompanyGuid,         CompanyLineGuid,         AccountNumber,         CostCenterID,         InspectionCompanyID,         QuickQuote,         InstallmentBillingQuoteOptionID,         Auditable,         ControlNo,        UnderwritingAssistantGuid,        QuoteStatusReasonID,        --TFS 90517   added Renewal logic to populate renewal fields on tblquotes        RenewalOfControlNum,        RenewalOfQuoteGuid       )       SELECT  s.SubmissionGroupGuid,          @QuotingLocationGuid AS QuotingLocationGuid,           @IssuingLocationGuid AS IssuingLocationGuid,          p.CompanyLocationGuid,          NEWID(),          p.LineGuid,          1 as QuoteStatusID,          p.PolicyEffectiveDate,          p.PolicyExpirationDate,          CASE p.PolicyIndicator WHEN 'N' THEN 1 WHEN 'R' THEN 2 ELSE NULL END,          p.PremiumState,          pc.ProducerContactGUID,          @UnderwriterGuid as UnderwriterGuid,          NULL,          NULL,          p.PolicyNumber,          NULL,          NULL,          --3,          @BillingTypeID,          NULL AS MinimumEarnedPercentage,           p.dateissued AS DateIssued,           @IssuedByUserID AS IssuedByUserID,           getdate() AS DateBound,          @BoundByUserID AS BoundByUserID,           NULL AS InsuredDBA,           NULL AS InsuredFEIN,           NULL AS InsuredSSN,           InsuredTable.BusinessTypeID,           SUBSTRING(InsuredTable.[Name], 0, 501),           SUBSTRING(InsuredTable.CorporationName, 0, 501),           NULL AS InsuredSalutation,           NULL AS InsuredFirstName,           NULL AS InsuredMiddleName,           NULL AS InsuredLastName,          InsuredTable.Address1,           InsuredTable.Address2,           InsuredTable.City,           InsuredTable.[State],           '' AS InsuredCounty,           InsuredTable.ISOCountryCode,           InsuredTable.ZipCode,           NULL AS InsPhone,           NULL AS InsFax,          pl.ProducerLocationID,           pr.ProducerName,           pl.Name AS ProdLocationName,           pl.Address1 AS ProdAddress,           pl.Address2 AS ProdAddress2,           pl.City AS ProdCity,           pl.County,           pl.State AS ProdState,           pl.ISOCountryCode AS ProdCountry,           pl.ZipCode AS ProdZip,           pl.Phone,           pl.Fax,           NULL AS finance,           p.CompanyLineGUID,           p.AccountNumber AS AccountNumber,          @CostCenterID AS CostCenterID,           NULL AS Insp,           0 AS QQ,           NULL AS InstallM,           0 AS audit,           ISNULL((SELECT MAX(ControlNo) FROM dbo.tblQuotes), 0)+1,          @UnderwritingAssistantGuid,          p.QuoteStatusReasonID,            --TFS 90517  added Renewal logic to populate renewal fields on tblquotes          --This needs to be tested in Ascot TEST before  it goes live 9/23/22                    CASE p.PolicyIndicator            WHEN 'N' THEN NULL            WHEN 'R' THEN p.RenewalOfAccountNumber            ELSE NULL END, --RenewalOfControlNum,                    CASE p.PolicyIndicator            WHEN 'N' THEN NULL            WHEN 'R' THEN (select top 1 quoteguid from tblQuotes where ControlNo = p.RenewalOfAccountNumber order by QuoteID desc)            ELSE NULL END --RenewalOfQuoteguid               --1 + (Select Top 1 ControlNo from tblQuotes order by ControlNo Desc) AS ControlNo --This is a place holder we will update right before committing.       FROM  #PolsToCreate p       CROSS APPLY (           SELECT TOP 1 i.InsuredGUID,              i.BusinessTypeID,              i.[Name],              i.CorporationName,              il.Address1,               il.Address2,               il.City,               il.[State],              il.ISOCountryCode,               il.ZipCode           FROM tblInsureds i           INNER JOIN tblInsuredLocations il ON il.InsuredGuid=i.InsuredGuid           WHERE i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)           and il.LocationTypeID = 1          ) As InsuredTable           INNER JOIN tblSubmissionGroup s ON s.InsuredGuid=InsuredTable.InsuredGUID       INNER JOIN tblProducerLocations pl ON pl.ProducerLocationGuid=s.ProducerLocationGuid       INNER JOIN tblProducers pr ON pr.ProducerGuid=pl.ProducerGuid       INNER JOIN tblProducerContacts pc on pc.ProducerContactID = s.ProducerContactID       WHERE  DnlTrId=@DnlTrId       AND   P.SubmissionGroupID = s.SubmissionGroupID           DECLARE @QuoteID int       SET @QuoteID=scope_identity()         DECLARE @QuoteGuid uniqueidentifier       SELECT @QuoteGuid = QuoteGuid FROM tblQuotes WHERE QuoteID = @QuoteID         Declare @ReinsuredName varchar(200),@DomJurisdiction varchar(200),@NAICComCode varchar(200),@ReinsurersEIN varchar(200)       Select @ReinsuredName=ReinsuredName,@DomJurisdiction=DomJurisdiction,@NAICComCode=NAICComCode,@ReinsurersEIN=ReinsurersEIN From ASCOT_AL3ImportPolicy_BondPro where ImportLogId=@ImportLogId         SELECT 'testing',       @QuoteGuid,       p.BusinessTypeId,       @ReinsuredName,       @DomJurisdiction,       @NAICComCode,       @ReinsurersEIN       from #PolsToCreate p where p.DnlTrId=@DnlTrId       --insert intoSelect * from GreyHawk_tblQuotes       insert into GreyHawk_tblQuotes        (Quoteguid, BusinessType,ReinsuredName,DomiciliaryJurisdiction,NAICCompanyCode,ReinsurersFedIDNumber)       SELECT       @QuoteGuid,       p.BusinessTypeId,       @ReinsuredName,       @DomJurisdiction,       @NAICComCode,       @ReinsurersEIN       from #PolsToCreate p where p.DnlTrId=@DnlTrId         UPDATE Q SET CostCenterID = ISNULL(CostCenterTable.GroupID, Q.CostCenterID)       FROM tblQuotes Q       OUTER APPLY (           SELECT TOP 1 GroupID           FROM dbo.GetQuoteCostCenters(@QuoteGuid) T           ORDER BY T.IsDefault DESC, T.SystemDefined DESC, T.EffectiveDate DESC          ) As CostCenterTable       WHERE Q.QuoteGUID = @QuoteGuid           UPDATE  #PolsToCreate       SET   QuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;         UPDATE  Ascot_AL3PolicyMasterTable_v2       SET   CreatedQuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;                --end-------------------------------------------------------------------------------------------------------------------              --add quote details       raiserror('tblQuoteDetails', 0, 1) with nowait;         --for monoline policies       INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       SELECT  q.QuoteGuid,          p.CompanyLineGuid,          (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=p.CompanyLocationGuid),          1,          --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),          --TFS 87790 Get dynamic  commissions          ISNULL(p.producerComm,dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),          0,          30 as TermsOfPayment,          CASE WHEN @ProgramID = 0           THEN ProgramCodeTable.ProgramID           ELSE @ProgramID          END       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN lstLines ON q.LineGuid = lstLines.LineGUID       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       OUTER APPLY (           SELECT TOP 1 tblCompanyProgramCodes.ProgramID           FROM tblCompanyProgramCodes            LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID           LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID           WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')           AND ( (tblCompanyProgramCodes.LineGUID = q.LineGUID OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode)))           --AND ( tblCompanyProgramCodes.LineGUID = q.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')           --AND ( q.EffectiveDate BETWEEN Convert(varchar(12),tblCompanyProgramCodes.ContractEffective,101) AND Convert(varchar(12),tblCompanyProgramCodes.ContractExpiration,101))           AND ( q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)           AND (ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'  AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Special Program for Highland' )           ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = q.StateID THEN 1 ELSE 0 END +             CASE WHEN ((tblCompanyProgramCodes.LineGUID = q.LineGuid  OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode))) THEN 1 ELSE 0 END +             --CASE WHEN tblCompanyProgramCodes.LineGUID = q.LineGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +             --CASE WHEN tblCompanyProgramCodes.GroupCode = lstLines.GroupCode THEN 1 ELSE 0 END DESC,             tblCompanyProgramCodes.ContractEffective DESC          ) As ProgramCodeTable       WHERE  DnlTrId=@DnlTrId       AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)              --for package policies       INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       SELECT  q.QuoteGuid,          DetailTable.CompanyLineGuid,          (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=DetailTable.CompanyLocationGuid),          1,          --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),          --TFS 87790 Get dynamic  commissions          ISNULL(p.producerComm, dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),          0,          30 as TermsOfPayment,          CASE WHEN @ProgramID = 0           THEN ProgramCodeTable.ProgramID           ELSE @ProgramID          END       FROM  #PolsToCreate p       CROSS APPLY (           SELECT DISTINCT SubPD.CompanyLineGuid,               SubPD.CompanyLocationGuid,               SubCL.LineGUID,               SubPD.StateID           FROM #PolsToCreateDetails SubPD           INNER JOIN tblCompanyLines SubCL ON SubPD.CompanyLineGuid = SubCL.CompanyLineGuid           WHERE SubPD.DnlTrId = P.DnlTrId           AND SubPD.StateID = P.StateOfIssuance          ) AS DetailTable       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN lstLines ParentLine ON q.LineGuid = ParentLine.LineGUID       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       OUTER APPLY (           SELECT TOP 1 tblCompanyProgramCodes.ProgramID           FROM tblCompanyProgramCodes            LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID           LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID           WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')           AND ( tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')           AND (q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)           AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'           ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = DetailTable.StateID THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.GroupCode = ParentLine.GroupCode THEN 1 ELSE 0 END DESC,             tblCompanyProgramCodes.ContractEffective DESC          ) As ProgramCodeTable       WHERE  DnlTrId=@DnlTrId         -- ***** ADDED COST CENTER CODE HERE (this failed)*****      --EXEC UpdateCostCenter_AscotCaptives @QuoteGUID = @QuoteGuid      -- ***** END COST CENTER CODE *****         UPDATE PD SET CreatedQuoteDetailID = tblQuoteDetails.QuoteDetailID       FROM #PolsToCreateDetails PD       INNER JOIN #PolsToCreate P ON PD.DnlTrId = P.DnlTrId       INNER JOIN tblQuotes ON P.QuoteID = tblQuotes.QuoteID       INNER JOIN tblQuoteDetails ON tblQuotes.QuoteGUID = tblQuoteDetails.QuoteGuid        AND tblQuoteDetails.CompanyLineGuid = PD.CompanyLineGuid       WHERE PD.StateID = P.StateOfIssuance                --end-------------------------------------------------------------------------------------------------------------------                  --add quote option       --for monoline policies       raiserror('tblQuoteOptions', 0, 1) with nowait;       INSERT INTO tblQuoteOptions (QuoteGUID, LineGUID, CompanyLocationID, DateCreated, Quote, Bound, CompanyInstallmentID)       SELECT  q.QuoteGuid,          q.LineGuid,          c.CompanyLocationCode,          getdate(),          1,          1,          NULL       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN  tblCompanyLines cl ON cl.CompanyLineGuid=p.CompanyLineGuid       INNER JOIN tblCompanyLocations c ON c.CompanyLocationGuid = cl.CompanyLocationGuid       WHERE  DnlTrId=@DnlTrId       AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)         --for package policies       raiserror('tblQuoteOptions', 0, 1) with nowait;       INSERT INTO tblQuoteOptions (QuoteGUID, LineGUID, CompanyLocationID, DateCreated, Quote, Bound, CompanyInstallmentID)       SELECT  q.QuoteGuid,          DetailTable.LineGuid,          DetailTable.CompanyLocationCode,          getdate(),          1,          1,          NULL       FROM  #PolsToCreate p       CROSS APPLY (           SELECT DISTINCT SubPD.LineGuid,               SubPD.CompanyLocationCode           FROM #PolsToCreateDetails SubPD           WHERE SubPD.DnlTrId = P.DnlTrId           AND SubPD.StateID = P.StateOfIssuance          ) AS DetailTable       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN  tblCompanyLines cl ON cl.CompanyLineGuid=p.CompanyLineGuid       --INNER JOIN tblCompanyLocations c ON c.CompanyLocationGuid = cl.CompanyLocationGuid       WHERE  DnlTrId=@DnlTrId         UPDATE PD SET CreatedQuoteOptionID = tblQuoteOptions.QuoteOptionID,           CreatedQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid       FROM #PolsToCreateDetails PD       INNER JOIN #PolsToCreate P ON PD.DnlTrId = P.DnlTrId       INNER JOIN tblQuotes ON P.QuoteID = tblQuotes.QuoteID       INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID        AND tblQuoteOptions.LineGUID = PD.LineGuid        AND tblQuoteOptions.CompanyLocationID = PD.CompanyLocationCode         --end-------------------------------------------------------------------------------------------------------------------                      raiserror('tblQuoteOptionPremiums', 0, 1) with nowait;       --Monoline policies       --add option premium       INSERT INTO tblQuoteOptionPremiums (QuoteOptionGuid, ChargeCode, OfficeID, Premium, AnnualPremium, Commissionable)       SELECT  qo.QuoteOptionGuid,          pc.ChargeCode,          @QuotingOfficeID,          p.PremiumAmount,          p.PremiumAmount,          1 as Commissionable       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID  
Ascot_ImportAL3_REWRITE_v2_DynamicProducer	CREATE   PROCEDURE [dbo].[Ascot_ImportAL3_REWRITE_v2_DynamicProducer]    @ImportLogID int  AS  BEGIN     DECLARE @ImportSource int   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID     --note this has not been updated to handle installments     DECLARE @TransType varchar(25)   DECLARE @EnteredDate datetime    DECLARE @WrittenPremium money   DECLARE @PolicyNumber Varchar(50)   DECLARE @OriginalControlNo int   DECLARE @MGASystemsUserGuid uniqueidentifier   DECLARE @UniqueTransactionID int -- TFS 90577 -- Used to identify duplicate transaction uploads   DECLARE @UniqueTransactionIDExists INT   DECLARE @AccounNumber VARCHAR(50)   DECLARE @PolicyeffectiveDate varchar(50)   DECLARE @datebilled datetime      SET @datebilled = getdate()             SELECT @MGASystemsUserGuid = UserGuid FROM tblUsers WHERE Username = 'Admin1'       IF OBJECT_ID('tempdb..#PolsToEnd') IS NOT NULL BEGIN DROP TABLE #PolsToEnd END   SELECT --TOP 500      Ascot_AL3PolicyMasterTable_v2.*,      cl.CompanyLocationGuid,      Cl.CompanyLineGUID,      l.LineGuid   INTO  #PolsToEnd   FROM  [dbo].Ascot_AL3PolicyMasterTable_v2   INNER JOIN lstLines l ON l.LineID=Ascot_AL3PolicyMasterTable_v2.LineCode   Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode   Inner Join  tblCompanyLines CL on CL.LineGUID = l.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and Ascot_AL3PolicyMasterTable_v2.StateOfIssuance = CL.StateID and cl.ParentCompanyLineGUID IS NULL   WHERE  ImportLogID = @ImportLogID   AND   ISNULL(Error, 0) = 0      AND DateProcessed IS NULL      AND ISNULL(RewriteOfAccountNumber, '0') <> '0'      AND PolicyIndicator IN ('N', 'R')      --and DnlTrId = '7A783BD4-21F5-4446-A8EA-E756F81A37DD'   ORDER BY TransactionEffectiveDate     DELETE FROM #PolsToEnd    WHERE EXISTS (     SELECT 1 FROM dbo.Ascot_AL3PolicyMasterTable_v2 t     WHERE t.PolicyTransactionID < #PolsToEnd.PolicyTransactionID     AND t.ImportLogID = @ImportLogID     AND t.PolicyIndicator NOT IN ('N', 'R')     AND t.AccountNumber = #PolsToEnd.AccountNumber     )     IF OBJECT_ID('tempdb..#PolsToCreateDetails') IS NOT NULL   BEGIN      DROP TABLE #PolsToEndDetails     END        CREATE TABLE #PolsToEndDetails   (    ID int,    DnlTrId uniqueidentifier,    CompanyLocationCode int,    LineCode int,    StateID varchar(20),    Premium money,    Terrorism money,    CompanyLocationGuid uniqueidentifier,    CompanyLineGuid uniqueidentifier,    LineGuid uniqueidentifier,    CreatedQuoteOptionID int,    CreatedQuoteOptionGuid uniqueidentifier,    CreatedQuoteDetailID int   )         INSERT INTO #PolsToEndDetails   SELECT    --ID int,      Ascot_AL3QuoteDetailTable_V2.ID,      --DnlTrId uniqueidentifier,      Ascot_AL3QuoteDetailTable_V2.DnlTrId,      --CompanyLocationCode int,      Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,      --LineCode int,      Ascot_AL3QuoteDetailTable_V2.LineCode,      --StateID varchar(20),      Ascot_AL3QuoteDetailTable_V2.StateID,      --Premium money,      Ascot_AL3QuoteDetailTable_V2.Premium,      --Terrorism money,      Ascot_AL3QuoteDetailTable_V2.Terrorism,      --CompanyLocationGuid uniqueidentifier,      tblCompanyLocations.CompanyLocationGUID,      --CompanyLineGuid uniqueidentifier      tblCompanyLines.CompanyLineGUID,      --LineGuid uniqueidentifier,      lstLines.LineGUID,      --CreatedQuoteOptionID int,      NULL,      --CreatedQuoteOptionGuid uniqueidentifier,      NULL,      --CreatedQuoteDetailID int,      NULL     FROM #PolsToEnd P   INNER JOIN Ascot_AL3QuoteDetailTable_V2 ON P.DnlTrId = Ascot_AL3QuoteDetailTable_V2.DnlTrId   LEFT JOIN tblCompanyLocations ON Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode = tblCompanyLocations.CompanyLocationCode   LEFT JOIN lstLines ON Ascot_AL3QuoteDetailTable_V2.LineCode = lstLines.LineID   LEFT JOIN tblCompanyLines ON tblCompanyLocations.CompanyLocationGUID = tblCompanyLines.CompanyLocationGUID    AND  lstLines.LineGuid = tblCompanyLines.LineGUID    AND  Ascot_AL3QuoteDetailTable_V2.StateID = tblCompanyLines.StateID    AND  ((tblCompanyLines.ParentCompanyLineGUID = P.CompanyLineGUID)       OR ((tblCompanyLines.ParentCompanyLineGUID IS NULL) AND (P.CompanyLineGUID = tblCompanyLines.CompanyLineGUID))      )     DECLARE @DnlTrId uniqueidentifier     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToEnd ORDER BY AccountNumber, PolicyTransactionID     OPEN Cur   FETCH Cur INTO @DnlTrId     DECLARE @preblocking int   SET @preblocking=1     WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 10 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:10' --10 SECONDS     END    END       IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL    BEGIN       DROP TABLE #ConfigurationsTable      END      CREATE TABLE #ConfigurationsTable    (     ID int,     StartingOnPoliciesEffective smalldatetime,     QuotingLocationGuid uniqueidentifier,     IssuingLocationGuid uniqueidentifier,     UnderwriterGuid uniqueidentifier,     IssuedByUserID int,     BoundByUserID int,     CostCenterID int,     BrokerCommissionFeeChargeCode int,     AutoApplyFees BIT,     UseUWCloseDate BIT    )      WHILE @@Fetch_status=0     BEGIN      BEGIN TRY         BEGIN TRAN          SELECT @TransType=PolicyIndicator,          @EnteredDate=DateIssued,          @WrittenPremium=ISNULL(PremiumAmount, 0),          @PolicyNumber = PolicyNumber,          @OriginalControlNo = OriginalControlNoTable.Note,          @UniqueTransactionID = Ascot_AL3PolicyMasterTable_v2.UniqueTransactionID, -- TFS 91066 added logic to use UniqueTransactionID          @AccounNumber = AccountNumber,          @PolicyeffectiveDate = PolicyEffectiveDate                           FROM Ascot_AL3PolicyMasterTable_v2        OUTER APPLY (            SELECT TOP 1 SubT.Note            FROM Ascot_AL3PolicyMasterTable_v2 SubT            WHERE SubT.AccountNumber = Ascot_AL3PolicyMasterTable_v2.RewriteOfAccountNumber           ) As OriginalControlNoTable        WHERE DnlTrId=@DnlTrId                  INSERT INTO #ConfigurationsTable        SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,           Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,           Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,           Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,           Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,           Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,           Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,           Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,           Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,           Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,           Ascot_tblAL3ProgramConfigurations_v2.UseUWCloseDate           FROM  Ascot_tblAL3ProgramConfigurations_v2        INNER JOIN Ascot_AL3PolicyMasterTable_v2 P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)         AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID         AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode         AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0         AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource        WHERE  P.DnlTrId = @DnlTrId          DECLARE @ConfigurationID int          SELECT TOP 1 @ConfigurationID = C.ID        FROM #ConfigurationsTable C        ORDER BY C.StartingOnPoliciesEffective DESC          DECLARE @QuotingLocationGuid uniqueidentifier        DECLARE @IssuingLocationGuid uniqueidentifier        DECLARE @UnderwriterGuid uniqueidentifier        DECLARE @IssuedByUserID int        DECLARE @BoundByUserID int        DECLARE @CostCenterID int        DECLARE @BrokerCommissionFeeChargeCode int        DECLARE @clientofficeID INT        DECLARE @RunAutoApplyFees BIT                          DECLARE @UseUWCloseDate BIT = 0 -- TFS 92747          SELECT @QuotingLocationGuid = QuotingLocationGuid,          @IssuingLocationGuid = IssuingLocationGuid,          @UnderwriterGuid = UnderwriterGuid,          @IssuedByUserID = IssuedByUserID,          @BoundByUserID = BoundByUserID,          @CostCenterID = CostCenterID,          @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,          @RunAutoApplyFees = AutoApplyFees,          @UseUWCloseDate = UseUWCloseDate            FROM #ConfigurationsTable        WHERE ID = @ConfigurationID          IF @ConfigurationID IS NULL        BEGIN           raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;          END            /*TFS 90900          add logic to determine if the transaction was already imported             */         SET @UniqueTransactionIDExists = 0           SELECT @UniqueTransactionIDExists = 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = @AccounNumber          AND SubT.UniqueTransactionID = @UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> @DnlTrId          and l.ImportSource = @ImportSource          and @UniqueTransactionID IS NOT NULL -- Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.          IF @UniqueTransactionIDExists = 1          BEGIN         raiserror('Policy Transaction previously imported', 15, 1) with nowait;        END            -- TFS 87790 Get the quoting location office id used in spaccountingtransfer       select @clientofficeID =  officeid from tblclientoffices where officeguid = @QuotingLocationGuid                --make sure no prev errors        DECLARE @PrevErrors int        SELECT @PrevErrors=COUNT(*)         FROM  Ascot_AL3PolicyMasterTable_v2        WHERE  Error=1            AND DateProcessed IS NULL            AND DateIssued<@EnteredDate            AND PolicyNumber = @PolicyNumber           AND ErrorMessage NOT IN ('Ignore 0 Premium Endorsement')        IF @PrevErrors > 0         BEGIN          raiserror('Previous transactions had errors.', 15, 1) with nowait;         END           /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                                  --For rewrites the @datebound being passed to spaccoutingtransfer is the billdate                 SET @Effectivedate = CONVERT(varchar(11), CONVERT(datetime, @PolicyeffectiveDate), 101)          SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHETHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END                   DECLARE @OriginalQuoteGuid uniqueidentifier        DECLARE @OriginalQuoteID int        DECLARE @Comment varchar(50)        DECLARE @NewPremium money        DECLARE @TerrorismPremium money        DECLARE @DateBound datetime        DECLARE @UserGuid uniqueidentifier        DECLARE @BillingCode char(5)        DECLARE @BillingTypeID INT                SELECT TOP 1 @OriginalQuoteGuid = tblQuotes.QuoteGuid,          @OriginalQuoteID = tblQuotes.QuoteID,           @BillingTypeID = tblQuotes.BillingTypeID        FROM tblQuotes        WHERE tblQuotes.Controlno = @OriginalControlNo        ORDER BY tblQUotes.QuoteID DESC          SELECT TOP 1           @Comment = 'Automated Rewrite',             @NewPremium = t.PremiumAmount,           @TerrorismPremium = t.TerrorismPremium,           @DateBound = getdate(),           @UserGuid = '5be2621d-4bff-44de-b7d7-17fd01c90c85'--,           --@BillingCode = 'AGNCY'                     FROM           Ascot_AL3PolicyMasterTable_v2 t WITH (NOLOCK)        WHERE t.DnlTrId=@DnlTrId                DECLARE @TotalPremium money        SET @Comment='Automated Endorsement'          select @BillingCode = BillingCode from lstBillingTypes where BillingTypeID = @BillingTypeID      DECLARE @RewriteQuoteID int    DECLARE @RewriteQuoteGuid uniqueidentifier    DECLARE @RewriteControlNumber int    DECLARE @RewriteUnderwriterGuid uniqueidentifier    DECLARE @RewriteEffectiveDate datetime        -- TFS 89800 updated logic to make rewrite of accountnumber a varchar instead of int as this will be policynumber for imports whose source data does not contain    --an actual controlnumber which is unlike feeds that come from Ethos directly.  When the source data is comming from ethos, we can use this as an int as we have access to a controlnumber in IMS.      DECLARE @RewriteAccountNumber varchar (50)     ----copied from endorse      --Create the rewrite      EXEC  spCopyQuote         @QuoteGuid = @OriginalQuoteGuid,         @QuoteStatusID = 1,--submitted         @IsRenewal = 0,         @IsRewrite = 1,         @PolicyTypeID = 3--rewrite                  --Get the Rewrite Quote Guid      SELECT TOP 1 @RewriteQuoteGuid = Q.QuoteGuid,         @RewriteQuoteID = Q.QuoteID,         @RewriteControlNumber = Q.ControlNo,         @RewriteUnderwriterGuid = Q.UnderwriterUserGuid,        @RewriteEffectiveDate = Q.EffectiveDate      FROM tblQuotes Q WHERE RewriteOfQuoteGuid = @OriginalQuoteGuid        SELECT TOP 1 @RewriteAccountNumber = P.AccountNumber      FROM #PolsToEnd P      WHERE P.DnlTrId = @DnlTrId       UPDATE tblQuotes SET PolicyNumber = @PolicyNumber,          AccountNumber = @RewriteAccountNumber     WHERE QuoteGuid = @RewriteQuoteGuid         --//TFS 87687 to call a new column in version table that will hold a proc for custom processing prior to bind,       --in this case, it's for setting “Non renewed” and “By Definition” needs to be set for every transaction       EXEC Ascot_ImportAL3_NBS_V2_PreBindHighland @RewriteQuoteGuid, @RewriteQuoteID            --Copy forward the quote option      INSERT INTO      tblQuoteOptions      (         QuoteOptionGUID,         OriginalQuoteOptionGUID,         QuoteGUID,         LineGUID,         CompanyLocationID,         DateCreated,         Bound,         Quote,         AdditionalComments,         CompanyInstallmentID,         AutoApplyFeeLog      )      SELECT         NEWID(),         tblQuoteOptions.QUoteOptionGuid,         @RewriteQuoteGuid,         LineGUID,         CompanyLocationID,         GETDATE(),         1,         0,         AdditionalComments,         CompanyInstallmentID,         AutoApplyFeeLog      FROM         tblQuoteOptions      WHERE tblQuoteOptions.QuoteGUID = @OriginalQuoteGuid             --At this point, the endorsement has been created.  We now      --want to copy forward the old premium record with the new amount     INSERT INTO tblQuoteOptionPremiums     SELECT NewQuoteOptions.QuoteOptionGuid,       ISNULL(ChargeCodeTable.ChargeCode, tblFin_PolicyCharges.ChargeCode) AS ChargeCode,       tblQuoteOptionPremiums.OfficeId,       CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL        THEN CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN @TerrorismPremium ELSE @NewPremium END        ELSE CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END       END,       CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL        THEN CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN @TerrorismPremium ELSE @NewPremium END        ELSE CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END       END,       tblQuoteOptionPremiums.Commissionable,       GETDATE()     FROM tblQuoteOptions      INNER JOIN tblQuoteOptions NewQuoteOptions ON NewQuoteOptions.OriginalQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid     INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGuid = tblQuoteOptionPremiums.QuoteOptionGuid     INNER JOIN tblFin_PolicyCharges ON tblQuoteOptionPremiums.ChargeCode = tblFin_PolicyCharges.ChargeCode     INNER JOIN lstLines ON tblQuoteOptions.LineGuid = lstLines.LineGuid     OUTER APPLY (         SELECT Ascot_AL3QuoteDetailTable_v2.Premium,           Ascot_AL3QuoteDetailTable_v2.Terrorism,           Ascot_AL3QuoteDetailTable_v2.CompanyLocationCode,           Ascot_AL3QuoteDetailTable_v2.LineCode,           Ascot_AL3QuoteDetailTable_v2.StateID         FROM Ascot_AL3QuoteDetailTable_v2         WHERE Ascot_AL3QuoteDetailTable_v2.DnlTrId = @DnlTrID        ) AS NewPremiumTable     OUTER APPLY (         SELECT TOP 1 SubPC.ChargeCode,            SubPC.ChargeID         FROM tblFin_PolicyCharges SubPC         WHERE SubPC.ChargeID = tblFin_PolicyCharges.ChargeID         AND SubPC.StateID = NewPremiumTable.StateID        ) AS ChargeCodeTable     OUTER APPLY (         SELECT Ascot_AL3PolicyMasterTable_v2.CompanyCode AS CompanyLocationCode,           Ascot_AL3PolicyMasterTable_v2.LineCode         FROM Ascot_AL3PolicyMasterTable_v2         WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId = @DnlTrId        ) AS PolicyLevelImportTable     WHERE tblQuoteOptions.QuoteGuid = @OriginalQuoteGuid     AND  CASE WHEN NewPremiumTable.LineCode IS NULL        THEN CASE WHEN lstLines.LineID = PolicyLevelImportTable.LineCode THEN 1 ELSE 0 END        ELSE CASE WHEN lstLines.LineID = NewPremiumTable.LineCode THEN 1 ELSE 0 END       END = 1     AND  CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL        THEN CASE WHEN tblQuoteOptions.CompanyLocationID = PolicyLevelImportTable.CompanyLocationCode THEN 1 ELSE 0 END        ELSE CASE WHEN tblQuoteOptions.CompanyLocationID = NewPremiumTable.CompanyLocationCode THEN 1 ELSE 0 END       END = 1        IF @BrokerCommissionFeeChargeCode IS NOT NULL    BEGIN       DECLARE @BrokerCommissionPercent decimal(9, 8)     DECLARE @BrokerFeeAppliesToLineGuid uniqueidentifier     DECLARE @BrokerFeeAppliesToCompanyLineGuid uniqueidentifier     DECLARE @BrokerFeeAppliesToQuoteOptionGuid uniqueidentifier     DECLARE @BrokerFeeAppliesToOfficeID int       SELECT @BrokerCommissionPercent = Ascot_AL3PolicyMasterTable_v2.BrokerCommissionPercent,       @BrokerFeeAppliesToLineGuid = lstLines.LineGUID,       @BrokerFeeAppliesToCompanyLineGuid = CL.CompanyLineGuid     FROM Ascot_AL3PolicyMasterTable_v2     INNER JOIN lstLines ON Ascot_AL3PolicyMasterTable_v2.LineCode = lstLines.LineID     Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode     Inner Join  tblCompanyLines CL on CL.LineGUID = lstLines.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and Ascot_AL3PolicyMasterTable_v2.StateOfIssuance = CL.StateID     WHERE DnlTrId = @DnlTrId       SELECT @BrokerFeeAppliesToQuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID     FROM tblQuoteOptions     WHERE tblQuoteOptions.QuoteGuid = @RewriteQuoteGuid     AND  EXISTS(SELECT *          FROM tblQuoteOptionPremiums          WHERE tblQuoteOptionPremiums.QuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID          AND tblQuoteOptionPremiums.Premium <> 0         AND tblQuoteOptionPremiums.OfficeID = @BrokerFeeAppliesToOfficeID)     AND  tblQuoteOptions.LineGUID = @BrokerFeeAppliesToLineGuid       IF @BrokerFeeAppliesToQuoteOptionGuid IS NULL     BEGIN        SELECT @BrokerFeeAppliesToQuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID      FROM tblQuoteOptions      WHERE tblQuoteOptions.QuoteGuid = @RewriteQuoteGuid      AND  EXISTS(SELECT *           FROM tblQuoteOptionPremiums           WHERE tblQuoteOptionPremiums.QuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID           AND tblQuoteOptionPremiums.Premium <> 0)          --AND tblQuoteOptionPremiums.OfficeID = @BrokerFeeAppliesToOfficeID      --AND  tblQuoteOptions.LineGUID = @BrokerFeeAppliesToLineGuid       END       DECLARE @BrokerCommissionCompanyFeeID int     SELECT @BrokerCommissionCompanyFeeID = CompanyFeeID     FROM tblCompanyPolicyCharges     WHERE tblCompanyPolicyCharges.ChargeCode = @BrokerCommissionFeeChargeCode     AND tblCompanyPolicyCharges.LineGuid = @BrokerFeeAppliesToLineGuid       IF @BrokerCommissionCompanyFeeID IS NULL     BEGIN        raiserror('No CompanyFeeID setup found for ChargeCode and Line', 15, 1) with nowait;       END         INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, PercentageRate, Splittable, AutoApplied)     SELECT @BrokerFeeAppliesToQuoteOptionGuid,       @BrokerCommissionCompanyFeeID,       @BrokerCommissionFeeChargeCode,       @BrokerFeeAppliesToOfficeID,       @BrokerFeeAppliesToCompanyLineGuid,       3,       0,       @BrokerCommissionPercent,        0,       0     FROM Ascot_AL3PolicyMasterTable_v2     WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId = @DnlTrId        END          --Update Quote Option Data      UPDATE      tblQuoteOptions      SET      Bound = 1      WHERE      QuoteGuid = @RewriteQuoteGuid        --Update Quote Data      UPDATE      tblQuotes      SET      DateIssued = GETDATE(),      IssuedByUserID = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),      DateBound = GETDATE(),      BoundByUserId = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),      QuoteStatusId = 3      WHERE      QuoteGuid = @RewriteQuoteGuid      AND DateIssued IS NULL           UPDATE Ascot_AL3PolicyMasterTable_v2 SET CreatedQuoteID = @RewriteQuoteID      FROM Ascot_AL3PolicyMasterTable_v2      WHERE DnlTrID = @DnlTrID        -- ***** ADD YOUR COST CENTER UPDATE HERE *****    -- Log before calling    INSERT INTO Ascot_CostCenterUpdateLog (QuoteGUID, QuoteID, ControlNo, ProcedureName, Message)    VALUES (@RewriteQuoteGuid, @RewriteQuoteID, @RewriteControlNumber, 'Ascot_ImportAL3_REWRITE_v2_DynamicProducer', 'About to call UpdateCostCenter_AscotCaptives for rewrite')     -- Call the cost center update    EXEC UpdateCostCenter_AscotCaptives @QuoteGUID = @RewriteQuoteGuid     -- Log after calling    INSERT INTO Ascot_CostCenterUpdateLog (QuoteGUID, QuoteID, ControlNo, ProcedureName, Message)    VALUES (@RewriteQuoteGuid, @RewriteQuoteID, @RewriteControlNumber, 'Ascot_ImportAL3_REWRITE_v2_DynamicProducer', 'Completed UpdateCostCenter_AscotCaptives call for rewrite')    -- ***** END COST CENTER UPDATE *****        --TFS 89800  SQL Ascot added spautoapplyfees       --it can be controlled via @RunAutoApplyFees               IF @RunAutoApplyFees = 1       BEGIN          IF OBJECT_ID('AutoApplyFeesCur') IS NOT NULL         BEGIN          CLOSE AutoApplyFeesCur          DEALLOCATE AutoApplyFeesCur        END          DECLARE @CursorCreatedQuoteOptionGuid uniqueidentifier          DECLARE AutoApplyFeesCur Cursor FAST_FORWARD FORWARD_ONLY        FOR SELECT CreatedQuoteOptionGuid FROM #PolsToCreateDetails WHERE DnlTrId=@DnlTrId          OPEN AutoApplyFeesCur        FETCH AutoApplyFeesCur INTO @CursorCreatedQuoteOptionGuid          WHILE @@Fetch_status=0        BEGIN           exec spAutoApplyFees @CursorCreatedQuoteOptionGuid                  FETCH AutoApplyFeesCur INTO @CursorCreatedQuoteOptionGuid          END          CLOSE AutoApplyFeesCur         DEALLOCATE AutoApplyFeesCur         END                   --Send invoices to accounting (AccountingTransfer.vb)      DECLARE @invoicenum int            raiserror('spAccountingTransfer', 0, 1) with nowait;      --exec spaccountingtransfer 0, @RewriteQuoteGuid, @MGASystemsUserGuid, 17, 0, 1, @RewriteEffectiveDate,      --@datebilled, null, @billingCode, null, null, null,  @invoicenum output         exec spaccountingtransfer 0, @RewriteQuoteGuid, @MGASystemsUserGuid, @clientofficeID, 0, 1, @RewriteEffectiveDate,      @datebilled, null, @billingCode, null, null, null,  @invoicenum output                --Post to Journal      EXEC spFin_PostInvoice @InvoiceNum        exec GreyHawk_AfterPostInvoice @invoicenum--Posts reinsurance data        --Verify Invoices were created      DECLARE @InvoiceCount INT      SELECT @InvoiceCount = COUNT(*) FROM tblFin_Invoices WHERE QuoteID = (SELECT QuoteID FROM tblQuotes WHERE QuoteGuid = @RewriteQuoteGuid) AND Failed = 0        IF (@InvoiceCount <> 1)      BEGIN     ROLLBACK TRANSACTION     RETURN --Raise error here      END      ----copied from endorse                 --update sucess        UPDATE      Ascot_AL3PolicyMasterTable_v2        SET         Error=0,           ErrorMessage=NULL,           ErrorTime=NULL,           DateProcessed=getdate(),           ProcessedBy='MGA',           Note=@RewriteControlNumber        WHERE  DnlTrId=@DnlTrId                DECLARE @tmpContext VARCHAR(200)       SET @tmpContext = 'Ascot Policy Import V2 for importLogID:' + convert(varchar(10),@ImportLogID)         EXEC dbo.LogAction        @userid = 1,       @action = 'Policy transaction was imported into IMS via Ascot Policy Import',       @identifierID = @ImportLogID,       @identifierguid = @RewriteQuoteGuid,       @context = @tmpContext                COMMIT TRAN              if @@trancount<>0 COMMIT TRAN      END TRY      BEGIN CATCH       ROLLBACK TRAN       if @@trancount<>0 ROLLBACK TRAN              UPDATE      Ascot_AL3PolicyMasterTable_v2       SET         Error=1,          ErrorMessage = ERROR_MESSAGE(),          ErrorTime=getdate()       WHERE  DnlTrId=@DnlTrId      END CATCH            FETCH Cur INTO @DnlTrId            IF @@Fetch_status=0       BEGIN         raiserror('Wait 10 seconds', 0, 1) with nowait;        WAITFOR DELAY '00:00:10' --10 seconds                DECLARE @postblocking int        SET @postblocking=1          WHILE @postblocking > 0         BEGIN          SELECT @postblocking=COUNT(*)           FROM master.sys.dm_exec_requests          WHERE blocking_session_id <> 0                    IF @postblocking > 0           BEGIN           raiserror('Something is post-blocking wait 10 seconds', 0, 1) with nowait;           WAITFOR DELAY '00:00:10' --10 SECONDS          END         END        END     END     CLOSE Cur    DEALLOCATE Cur     DROP TABLE #ConfigurationsTable   DROP TABLE #PolsToEndDetails    END
Ascot_ImportAL3_ENDORSE_Zywave_Captive_IM	  CREATE  PROC  [dbo].[Ascot_ImportAL3_ENDORSE_Zywave_Captive_IM]    @ImportLogID INT  AS  BEGIN   DECLARE @TransType VARCHAR(25)   DECLARE @EnteredDate DATETIME    DECLARE @WrittenPremium MONEY   DECLARE @PolicyNumber VARCHAR(50)   DECLARE @PolicyTransactionID INT -- TFS 70502  USed to prevent duplicate trasnaction from being created should the feed run multiple times on same policy   DECLARE @CompanyLocationCode INT   DECLARE @UniqueTransactionID varchar(200) -- TFS 90577 -- Used to identify duplicate transaction uploads   DECLARE @UniqueTransactionIDExists INT   DECLARE @AccounNumber VARCHAR(50)     DECLARE @ImportSource INT   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID     IF OBJECT_ID('tempdb..#PolsToEnd') IS NOT NULL BEGIN DROP TABLE #PolsToEnd END   SELECT --TOP 500      *    INTO  #PolsToEnd   FROM  [dbo].Ascot_AL3PolicyMasterTable_v2   WHERE  ImportLogID = @ImportLogID   AND   ISNULL(Error, 0) = 0      AND DateProcessed IS NULL      AND PolicyIndicator IN ('E', 'C', 'W')          --AND policynumber= 'HABX2010000001-01'--'HABP2010000001-01'   ORDER BY TransactionEffectiveDate     DECLARE @DnlTrId UNIQUEIDENTIFIER     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToEnd ORDER BY AccountNumber, PolicyTransactionID     OPEN Cur   FETCH Cur INTO @DnlTrId     DECLARE @preblocking int   SET @preblocking=1     WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 5 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:05' --5 SECONDS     END    END          IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL    BEGIN       DROP TABLE #ConfigurationsTable      END      CREATE TABLE #ConfigurationsTable    (     ID int,     StartingOnPoliciesEffective smalldatetime,     QuotingLocationGuid uniqueidentifier,     IssuingLocationGuid uniqueidentifier,     UnderwriterGuid uniqueidentifier,     IssuedByUserID int,     BoundByUserID int,     CostCenterID int,     BrokerCommissionFeeChargeCode int,     UnderwritingAssistantGuid uniqueidentifier,     AutoApplyFees bit,     CompanyLocationCode INT,     UseUWCloseDate BIT    )      WHILE @@Fetch_status=0     BEGIN      BEGIN TRY         BEGIN TRAN          SELECT @TransType = PolicyIndicator,           @EnteredDate = DateIssued,          @WrittenPremium = ISNULL(PremiumAmount, 0),           @PolicyNumber = Ascot_AL3PolicyMasterTable_v2.PolicyNumber,          @PolicyTransactionID = Ascot_AL3PolicyMasterTable_v2.PolicyTransactionID,  --TFS 70502           @CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode,          @UniqueTransactionID = Ascot_AL3PolicyMasterTable_v2.UniqueTransactionID, -- TFS 91066 added logic to use UniqueTransactionID          @AccounNumber = Ascot_AL3PolicyMasterTable_v2.AccountNumber        FROM Ascot_AL3PolicyMasterTable_v2         WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId=@DnlTrId                Declare @IssuingLocationGuid UNIQUEIDENTIFIER, @QuotingLocationguid UNIQUEIDENTIFIER        SELECT @QuotingLocationguid=OfficeGUID from tblclientoffices  where Location in(Select SUBSTRING(Company, 1, CHARINDEX('(', Company) - 2) from ASCOT_AL3ImportPolicy_Zywave_IM where importlogid=@importlogId)                Select @IssuingLocationGuid =ParentOfficeGuid from tblclientoffices  where OfficeGUID=@QuotingLocationguid          INSERT INTO #ConfigurationsTable        SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,           Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,           --Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,           --Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,           @QuotingLocationguid,           @IssuingLocationGuid,           Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,           Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,           Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,           Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,           Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,           Ascot_tblAL3ProgramConfigurations_v2.UnderwritingAssistantGuid,           Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,                             ASCOT_tblAL3ProgramConfigurations_V2.CompanyLocationCode,           ASCOT_tblAL3ProgramConfigurations_V2.UseUWCloseDate          FROM  Ascot_tblAL3ProgramConfigurations_v2        INNER JOIN Ascot_AL3PolicyMasterTable_v2 P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)         AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID         AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode         AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0         AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource        WHERE  P.DnlTrId = @DnlTrId          DECLARE @ConfigurationID int          SELECT TOP 1 @ConfigurationID = C.ID        FROM #ConfigurationsTable C        WHERE C.CompanyLocationCode = @CompanyLocationCode              ORDER BY C.StartingOnPoliciesEffective DESC          --DECLARE @QuotingLocationGuid uniqueidentifier        --DECLARE @IssuingLocationGuid uniqueidentifier        DECLARE @UnderwriterGuid uniqueidentifier        DECLARE @IssuedByUserID int        DECLARE @BoundByUserID int        DECLARE @CostCenterID int        DECLARE @BrokerCommissionFeeChargeCode int        DECLARE @UnderwritingAssistantGuid uniqueidentifier        DECLARE @AutoApplyFees bit        DECLARE @UseUWCloseDate BIT = 0 -- TFS 92747          SELECT @QuotingLocationGuid = QuotingLocationGuid,          @IssuingLocationGuid = IssuingLocationGuid,          @UnderwriterGuid = UnderwriterGuid,          @IssuedByUserID = IssuedByUserID,          @BoundByUserID = BoundByUserID,          @CostCenterID = CostCenterID,          @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,          @UnderwritingAssistantGuid = UnderwritingAssistantGuid,          @AutoApplyFees = AutoApplyFees,          @UseUWCloseDate = UseUWCloseDate        FROM #ConfigurationsTable        WHERE ID = @ConfigurationID          IF @ConfigurationID IS NULL        BEGIN         raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;        END                        /*TFS 90900          add logic to determine if the transaction was already imported             */         SET @UniqueTransactionIDExists = 0           SELECT @UniqueTransactionIDExists = 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = @AccounNumber          AND SubT.UniqueTransactionID = @UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> @DnlTrId          and l.ImportSource = @ImportSource          and @UniqueTransactionID IS NOT NULL -- Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.          IF @UniqueTransactionIDExists = 1          BEGIN         raiserror('Policy Transaction previously imported', 15, 1) with nowait;        END                  --TFS 87326        DECLARE @MaxCtrlNum  int        DECLARE @MaxCtrlNumEffective smalldatetime        DECLARE @QuoteGuid uniqueidentifier        DECLARE @CurrentQuoteStatusID int          --TFS 88331  This quoting location clause is neccessary as BOLT policies (Excess Casualty) because they need to identify the  specific transaction         --as the source and destimation polcies are both in Ascot database but under different quoting office.        --SELECT    top 1  @MaxCtrlNum = controlno , @MaxCtrlNumEffective = EffectiveDate, @QuoteGuid = QuoteGUID, @CurrentQuoteStatusID = QuoteStatusID from tblQuotes         SELECT    top 1  @MaxCtrlNum = controlno , @MaxCtrlNumEffective = EffectiveDate, @CurrentQuoteStatusID = QuoteStatusID from tblQuotes         where PolicyNumber = @PolicyNumber          and QuotingLocationGuid = @QuotingLocationGuid                               order by ControlNo desc, QuoteID desc                --make sure no prev errors        DECLARE @PrevErrors int        SELECT @PrevErrors=COUNT(*)         FROM  Ascot_AL3PolicyMasterTable_v2         WHERE  Error=1            AND DateProcessed IS NULL                     AND PolicyNumber = @PolicyNumber           AND ErrorMessage NOT IN ('Ignore 0 Premium Endorsement')           -- TFS 70502            AND PolicyTransactionID < @PolicyTransactionID -- TFS 70502 Thsi will check the previous transaction id           and Note = @MaxCtrlNum           AND  DATEDIFF(d, PolicyEffectiveDate, @MaxCtrlNumEffective) <= 0                                 -- TFS 87326  The purpose is for the  error to only check errors on the latest control number. This will occur for rewrites and in come cases renewals.           -- 1:  Get the latest control number for the policy being processed that also has the  same policy  effective date           -- 2:  Add the control number here in where clause to limit the prcessing to the  latest ctrl           ---3:  compare the control number from step 2 to the note of teh master table for the polciy being processed and make sure he master note is equal controlnumber            IF @PrevErrors > 0         BEGIN          raiserror('Previous transactions had errors.', 15, 1) with nowait;         END                         DECLARE @QuoteID int        DECLARE @TransEffDate datetime        DECLARE @EndorsementComment varchar(50)              DECLARE @EndorsementCalcType char(1)        DECLARE @NewPremium money        DECLARE @TerrorismPremium money        DECLARE @QuoteStatusID int              DECLARE @DateBound datetime        DECLARE @UserGuid uniqueidentifier        DECLARE @BillingCode char(5)              DECLARE @ControlNo int        DECLARE @ExpirationDate datetime        DECLARE @BillingTypeID INT        DECLARE @producerComm DECIMAL(13,10) = NULL        DECLARE @companyComm DECIMAL(13,10) = NULL                                SELECT TOP 1           @ControlNo = q.ControlNo,            @QuoteID = q.QuoteID,              @QuoteGuid = q.QuoteGUID, --TFS 90900           @TransEffDate = t.TransactionEffectiveDate,           @EndorsementComment = t.EndorsementComment,                     @EndorsementCalcType = 'F',                    @NewPremium = ISNULL(PremiumAmount, 0),           @TerrorismPremium = ISNULL(TerrorismPremium, 0),           @QuoteStatusID = 9,                                 @DateBound = GETDATE(),           @UserGuid = '5be2621d-4bff-44de-b7d7-17fd01c90c85',                    @BillingTypeID = q.BillingTypeID, -- TFS 87790  getting this dynamically           @ExpirationDate = t.PolicyExpirationDate,           @producerComm = t.producerComm,           @companyComm = t.companyComm        FROM           Ascot_AL3PolicyMasterTable_v2 t WITH (NOLOCK)                    INNER JOIN tblQuotes q ON q.AccountNumber = t.AccountNumber--on endorsements use account number/control number as the policy number can change           INNER JOIN tblMaxQuoteIDs mb ON mb.MaxBoundQuoteID=q.QuoteID           INNER JOIN tblCompanyLocations ON q.CompanyLocationGuid = tblCompanyLocations.CompanyLocationGUID        WHERE t.DnlTrId=@DnlTrId        AND  tblCompanyLocations.CompanyLocationCode = @CompanyLocationCode              order by q.QuoteID desc          /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                DECLARE @datebilled datetime                        --For endts, cancels, etc, the @datebound being passed to spaccoutingtransfer is the billdate and the policy effective date is @TransEffDate which what is being pased in to spcopyquote for polciy effective date         SET @datebilled = @DateBound         SET @Effectivedate = @TransEffDate          SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHTHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END                  select top 1 @BillingCode = BillingCode from lstBillingTypes where BillingTypeID = @BillingTypeID          DECLARE @TotalPremium money        DECLARE @CopyOptions bit = 0                         IF @TransType='E'         BEGIN                  exec dbo.Ascot_EndorsePolicy_Zywave_IM @QuoteGuid, @TransEffDate, @EndorsementComment, @EndorsementCalcType, @NewPremium, @QuoteStatusID, 20, @DateBound, @UserGuid, @BillingCode, @AutoApplyFees, @DnlTrId, @BrokerCommissionFeeChargeCode, @ExpirationDate, @TerrorismPremium, @CopyOptions                 END                 DECLARE @PremiumChange money                IF @TransType='C'         BEGIN                                   Select @BrokerCommissionFeeChargeCode as Testing_BrokerCommissionFeeChargeCode,  'Testing_BrokerCommissionFeeChargeCode'         IF @CurrentQuoteStatusID=12          raiserror('Policy is already cancelled.', 15, 1) with nowait;                 exec dbo.Ascot_CancelPolicy_Zywave_IM @QuoteGuid, @TransEffDate, @EndorsementComment, @EndorsementCalcType, @WrittenPremium, 99, @DateBound, @UserGuid, @BillingCode, @AutoApplyFees, @DnlTrId, @BrokerCommissionFeeChargeCode, @TerrorismPremium, @CopyOptions                   END                 IF @TransType='W'         BEGIN           IF @CurrentQuoteStatusID<>12           raiserror('Cannot reinstate non-cancelled policy.', 15, 1) with nowait;                     exec dbo.Ascot_ReinstatePolicy_Zywave_IM @QuoteGuid, @TransEffDate, @EndorsementComment, @EndorsementCalcType, @WrittenPremium, 100, @DateBound, @UserGuid, @BillingCode, @AutoApplyFees, @DnlTrId, @BrokerCommissionFeeChargeCode, @TerrorismPremium, @CopyOptions                   END               --update sucess        UPDATE      Ascot_AL3PolicyMasterTable_v2        SET         Error=0,           ErrorMessage=NULL,           ErrorTime=NULL,           DateProcessed=getdate(),           ProcessedBy='MGA',           Note=@ControlNo        WHERE  DnlTrId=@DnlTrId         -- TFS 70502 Record the committed controls in this table to be used for custom client processing         DECLARE @tmpContext VARCHAR(200)       SET @tmpContext = 'Ascot Policy Import V2 for importLogID:' + convert(varchar(10),@ImportLogID)         EXEC dbo.LogAction        @userid = 1,       @action = 'Policy transaction was imported into IMS via Ascot Policy Import',       @identifierID = @ImportLogID,       @identifierguid = @QuoteGuid,       @context = @tmpContext              COMMIT TRAN              if @@trancount<>0 COMMIT TRAN      END TRY      BEGIN CATCH       ROLLBACK TRAN       if @@trancount<>0 ROLLBACK TRAN              UPDATE      Ascot_AL3PolicyMasterTable_v2       SET         Error=1,          ErrorMessage = ERROR_MESSAGE(),          ErrorTime=getdate()       WHERE  DnlTrId=@DnlTrId      END CATCH            FETCH Cur INTO @DnlTrId            IF @@Fetch_status=0       BEGIN         raiserror('Wait 5 seconds', 0, 1) with nowait;        WAITFOR DELAY '00:00:05' --5 seconds                DECLARE @postblocking int        SET @postblocking=1          WHILE @postblocking > 0         BEGIN          SELECT @postblocking=COUNT(*)           FROM master.sys.dm_exec_requests          WHERE blocking_session_id <> 0                    IF @postblocking > 0           BEGIN           raiserror('Something is post-blocking wait 5 seconds', 0, 1) with nowait;           WAITFOR DELAY '00:00:05' --20 SECONDS          END         END        END     END     CLOSE Cur    DEALLOCATE Cur     DROP TABLE #ConfigurationsTable  END
Ascot_ImportAL3_REWRITE_Zywave_Captive_IM	CREATE PROCEDURE [dbo].[Ascot_ImportAL3_REWRITE_Zywave_Captive_IM]    @ImportLogID int  AS    BEGIN   DECLARE @ImportSource int   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID     --DECLARE @CompanyLineGuid uniqueidentifier   --DECLARE @PolicyEffectiveDate datetime     --SELECT @CompanyLineGuid = Q.CompanyLineGuid,   --  @PolicyEffectiveDate = Q.EffectiveDate   --   FROM tblQuotes Q   --INNER JOIN tblClientOffices ON Q.QuotingLocationGuid = tblClientOffices.OfficeGuid   --   WHERE Q.QuoteGuid = @QuoteGuid       --note this has not been updated to handle installments     DECLARE @TransType varchar(25)   DECLARE @EnteredDate datetime    DECLARE @WrittenPremium money   DECLARE @PolicyNumber Varchar(50)   DECLARE @OriginalControlNo int   DECLARE @MGASystemsUserGuid uniqueidentifier   DECLARE @UniqueTransactionID int -- TFS 90577 -- Used to identify duplicate transaction uploads   DECLARE @UniqueTransactionIDExists INT   DECLARE @AccounNumber VARCHAR(50)   -------------------------------------------------30/10 Startn   DECLARE @PolicyeffectiveDate varchar(50)   DECLARE @datebilled datetime    SET @datebilled = getdate()     -------------------------------------------------30/10 END   SELECT @MGASystemsUserGuid = UserGuid FROM tblUsers WHERE Username = 'Admin1'       IF OBJECT_ID('tempdb..#PolsToEnd') IS NOT NULL BEGIN DROP TABLE #PolsToEnd END   SELECT --TOP 500      Ascot_AL3PolicyMasterTable_v2.*,      cl.CompanyLocationGuid,      Cl.CompanyLineGUID,      l.LineGuid   INTO  #PolsToEnd   FROM  [dbo].Ascot_AL3PolicyMasterTable_v2   INNER JOIN lstLines l ON l.LineID=Ascot_AL3PolicyMasterTable_v2.LineCode   Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode   Inner Join  tblCompanyLines CL on CL.LineGUID = l.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and Ascot_AL3PolicyMasterTable_v2.StateOfIssuance = CL.StateID and cl.ParentCompanyLineGUID IS NULL   WHERE  ImportLogID = @ImportLogID   AND   ISNULL(Error, 0) = 0      AND DateProcessed IS NULL      AND ISNULL(RewriteOfAccountNumber, '0') <> '0'      AND PolicyIndicator IN ('N', 'R','W','T')      --and DnlTrId = '7A783BD4-21F5-4446-A8EA-E756F81A37DD'   ORDER BY TransactionEffectiveDate      IF OBJECT_ID('tempdb..##PolsToEndDetails') IS NOT NULL   BEGIN      DROP TABLE #PolsToEndDetails     END        CREATE TABLE #PolsToEndDetails   (    ID int,    DnlTrId uniqueidentifier,    CompanyLocationCode int,    LineCode int,    StateID varchar(20),    Premium money,    Terrorism money,    CompanyLocationGuid uniqueidentifier,    CompanyLineGuid uniqueidentifier,    LineGuid uniqueidentifier,    CreatedQuoteOptionID int,    CreatedQuoteOptionGuid uniqueidentifier,    CreatedQuoteDetailID int   )         INSERT INTO #PolsToEndDetails   SELECT    --ID int,      Ascot_AL3QuoteDetailTable_V2.ID,      --DnlTrId uniqueidentifier,      Ascot_AL3QuoteDetailTable_V2.DnlTrId,      --CompanyLocationCode int,      Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,      --LineCode int,      Ascot_AL3QuoteDetailTable_V2.LineCode,      --StateID varchar(20),      Ascot_AL3QuoteDetailTable_V2.StateID,      --Premium money,      Ascot_AL3QuoteDetailTable_V2.Premium,      --Terrorism money,      Ascot_AL3QuoteDetailTable_V2.Terrorism,      --CompanyLocationGuid uniqueidentifier,      tblCompanyLocations.CompanyLocationGUID,      --CompanyLineGuid uniqueidentifier      tblCompanyLines.CompanyLineGUID,      --LineGuid uniqueidentifier,      lstLines.LineGUID,      --CreatedQuoteOptionID int,      NULL,      --CreatedQuoteOptionGuid uniqueidentifier,      NULL,      --CreatedQuoteDetailID int,      NULL     FROM #PolsToEnd P   INNER JOIN Ascot_AL3QuoteDetailTable_V2 ON P.DnlTrId = Ascot_AL3QuoteDetailTable_V2.DnlTrId   LEFT JOIN tblCompanyLocations ON Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode = tblCompanyLocations.CompanyLocationCode   LEFT JOIN lstLines ON Ascot_AL3QuoteDetailTable_V2.LineCode = lstLines.LineID   LEFT JOIN tblCompanyLines ON tblCompanyLocations.CompanyLocationGUID = tblCompanyLines.CompanyLocationGUID    AND  lstLines.LineGuid = tblCompanyLines.LineGUID    AND  Ascot_AL3QuoteDetailTable_V2.StateID = tblCompanyLines.StateID    AND  ((tblCompanyLines.ParentCompanyLineGUID = P.CompanyLineGUID)       OR ((tblCompanyLines.ParentCompanyLineGUID IS NULL) AND (P.CompanyLineGUID = tblCompanyLines.CompanyLineGUID))      )         IF OBJECT_ID('tempdb..#InvoiceInstallmentsTable') IS NOT NULL   BEGIN      DROP TABLE #InvoiceInstallmentsTable     END     CREATE TABLE #InvoiceInstallmentsTable   (    QuoteID int,    EffectiveDate datetime,    ExpirationDate datetime,    NumInstallments int,    Installment int,    InstallmentDueDate datetime,    BillingCode varchar(100),    InstallmentMod decimal(20, 19)   )           DECLARE @DnlTrId uniqueidentifier     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToEnd ORDER BY AccountNumber, PolicyTransactionID     OPEN Cur   FETCH Cur INTO @DnlTrId     DECLARE @preblocking int   SET @preblocking=1     WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 10 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:10' --10 SECONDS     END    END       IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL    BEGIN       DROP TABLE #ConfigurationsTable      END      CREATE TABLE #ConfigurationsTable    (     ID int,     StartingOnPoliciesEffective smalldatetime,     QuotingLocationGuid uniqueidentifier,     IssuingLocationGuid uniqueidentifier,     UnderwriterGuid uniqueidentifier,     IssuedByUserID int,     BoundByUserID int,     CostCenterID int,     BrokerCommissionFeeChargeCode int,     AutoApplyFees bit,     UseUWCloseDate BIT    )      WHILE @@Fetch_status=0     BEGIN      BEGIN TRY         BEGIN TRAN                  SELECT @TransType=PolicyIndicator,          @EnteredDate=DateIssued,          @WrittenPremium=ISNULL(PremiumAmount, 0),          @PolicyNumber = PolicyNumber,          @OriginalControlNo = OriginalControlNoTable.Note,          @UniqueTransactionID = Ascot_AL3PolicyMasterTable_v2.UniqueTransactionID, -- TFS 91066 added logic to use UniqueTransactionID          @AccounNumber = AccountNumber,@PolicyeffectiveDate = PolicyEffectiveDate                           FROM Ascot_AL3PolicyMasterTable_v2        OUTER APPLY (            SELECT TOP 1 SubT.Note            FROM Ascot_AL3PolicyMasterTable_v2 SubT            WHERE SubT.AccountNumber = Ascot_AL3PolicyMasterTable_v2.RewriteOfAccountNumber            order by SubT.Note desc           ) As OriginalControlNoTable        WHERE DnlTrId=@DnlTrId                  INSERT INTO #ConfigurationsTable        SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,           Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,           Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,           Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,           Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,           Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,           Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,           Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,           Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,           Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,           Ascot_tblAL3ProgramConfigurations_v2.UseUWCloseDate -----------------30/10          FROM  Ascot_tblAL3ProgramConfigurations_v2        --INNER JOIN Ascot_AL3PolicyMasterTable_v2 P ON P.ProducerCode = Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID        INNER JOIN Ascot_AL3PolicyMasterTable_v2 P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)         AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID         AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode         AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0         AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource        WHERE  P.DnlTrId = @DnlTrId          DECLARE @ConfigurationID int          SELECT TOP 1 @ConfigurationID = C.ID        FROM #ConfigurationsTable C        ORDER BY C.StartingOnPoliciesEffective DESC          DECLARE @QuotingLocationGuid uniqueidentifier        DECLARE @IssuingLocationGuid uniqueidentifier        DECLARE @UnderwriterGuid uniqueidentifier        DECLARE @IssuedByUserID int        DECLARE @BoundByUserID int        DECLARE @CostCenterID int        DECLARE @BrokerCommissionFeeChargeCode int        DECLARE @clientofficeID INT        DECLARE @RunAutoApplyFees bit        DECLARE @UseUWCloseDate BIT = 0 ------30/10          SELECT @QuotingLocationGuid = QuotingLocationGuid,          @IssuingLocationGuid = IssuingLocationGuid,          @UnderwriterGuid = UnderwriterGuid,          @IssuedByUserID = IssuedByUserID,          @BoundByUserID = BoundByUserID,          @CostCenterID = CostCenterID,          @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,          @RunAutoApplyFees = AutoApplyFees,          @UseUWCloseDate = UseUWCloseDate---------------30/10            FROM #ConfigurationsTable        WHERE ID = @ConfigurationID          IF @ConfigurationID IS NULL        BEGIN           raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;          END            /*TFS 90900          add logic to determine if the transaction was already imported             */         SET @UniqueTransactionIDExists = 0           SELECT @UniqueTransactionIDExists = 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = @AccounNumber          AND SubT.UniqueTransactionID = @UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> @DnlTrId          and l.ImportSource = @ImportSource          and @UniqueTransactionID IS NOT NULL -- Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.          IF @UniqueTransactionIDExists = 1          BEGIN         raiserror('Policy Transaction previously imported', 15, 1) with nowait;        END            -- TFS 87790 Get the quoting location office id used in spaccountingtransfer        select @clientofficeID =  officeid from tblclientoffices where officeguid = @QuotingLocationGuid                --make sure no prev errors        DECLARE @PrevErrors int        SELECT @PrevErrors=COUNT(*)         FROM  Ascot_AL3PolicyMasterTable_v2        WHERE  Error=1            AND DateProcessed IS NULL            AND DateIssued<@EnteredDate            AND PolicyNumber = @PolicyNumber           AND ErrorMessage NOT IN ('Ignore 0 Premium Endorsement')        IF @PrevErrors > 0         BEGIN          raiserror('Previous transactions had errors.', 15, 1) with nowait;         END                 DECLARE @OriginalQuoteGuid uniqueidentifier        DECLARE @OriginalQuoteID int        DECLARE @Comment varchar(50)        DECLARE @NewPremium money        DECLARE @TerrorismPremium money        DECLARE @DateBound datetime        DECLARE @UserGuid uniqueidentifier        DECLARE @BillingCode char(5)        DECLARE @BillingTypeID INT                               SELECT TOP 1 @OriginalQuoteGuid = tblQuotes.QuoteGuid,          @OriginalQuoteID = tblQuotes.QuoteID,           @BillingTypeID = tblQuotes.BillingTypeID        FROM tblQuotes        WHERE tblQuotes.Controlno = @OriginalControlNo        ORDER BY tblQUotes.QuoteID DESC          SELECT TOP 1           @Comment = 'Automated Rewrite',             @NewPremium = t.PremiumAmount,           @TerrorismPremium = t.TerrorismPremium,           @DateBound = getdate(),           @UserGuid = '5be2621d-4bff-44de-b7d7-17fd01c90c85'--,           --@BillingCode = 'AGNCY'                     FROM           Ascot_AL3PolicyMasterTable_v2 t WITH (NOLOCK)        WHERE t.DnlTrId=@DnlTrId                DECLARE @TotalPremium money        SET @Comment='Automated Endorsement'          select @BillingCode = BillingCode from lstBillingTypes where BillingTypeID = @BillingTypeID      DECLARE @RewriteQuoteID int    DECLARE @RewriteQuoteGuid uniqueidentifier    DECLARE @RewriteControlNumber int    DECLARE @RewriteUnderwriterGuid uniqueidentifier    DECLARE @RewriteEffectiveDate datetime          DECLARE @EffectiveDate datetime       DECLARE @ExpirationDate datetime      DECLARE  @InsuredPolicyName VARCHAR(500) --10/04/2025      Select @EffectiveDate=PolicyEffectiveDate,@ExpirationDate=PolicyExpirationDate from Ascot_AL3PolicyMasterTable_v2        WHERE ImportLogID = @ImportLogID      SELECT @InsuredPolicyName=InsuredPolicyName FROM ASCOT_AL3ImportPolicy_Zywave_IM where ImportLogID = @ImportLogID           UPDATE tblQuotes SET          EffectiveDate=@EffectiveDate,          ExpirationDate=@ExpirationDate--,                 WHERE QuoteGuid = @RewriteQuoteGuid                 ---Select * From Ascot_AL3PolicyMasterTable_v2    -- TFS 89800 updated logic to make rewrite of accountnumber a varchar instead of int as this will be policynumber for imports whose source data does not contain    --an actual controlnumber which is unlike feeds that come from Ethos directly.  When the source data is comming from ethos, we can use this as an int as we have access to a controlnumber in IMS.    ----------------------------------------------------30/10     IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME              -- DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                                  --For rewrites the @datebound being passed to spaccoutingtransfer is the billdate                 SET @Effectivedate = CONVERT(varchar(11), CONVERT(datetime, @PolicyeffectiveDate), 101)          SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHETHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END           ------------------------------------------------------30/10       DECLARE @RewriteAccountNumber varchar (50)     ----copied from endorse    Declare @copyOptions bit    --Create the rewrite      EXEC  spCopyQuote         @QuoteGuid = @OriginalQuoteGuid,         @QuoteStatusID = 1,--submitted         @IsRenewal = 0,         @IsRewrite = 1,         @PolicyTypeID = 3,--rewrite         @copyOptions=0---------------------------testing 12/11                --Get the Rewrite Quote Guid      SELECT TOP 1 @RewriteQuoteGuid = Q.QuoteGuid,         @RewriteQuoteID = Q.QuoteID,         @RewriteControlNumber = Q.ControlNo,         @RewriteUnderwriterGuid = Q.UnderwriterUserGuid,        @RewriteEffectiveDate = Q.EffectiveDate      FROM tblQuotes Q WHERE RewriteOfQuoteGuid = @OriginalQuoteGuid               SELECT TOP 1 @RewriteAccountNumber = P.AccountNumber      FROM #PolsToEnd P      WHERE P.DnlTrId = @DnlTrId                 UPDATE tblQuotes SET PolicyNumber = @PolicyNumber,          AccountNumber = @RewriteAccountNumber,          EffectiveDate=@EffectiveDate,          ExpirationDate=@ExpirationDate     WHERE QuoteGuid = @RewriteQuoteGuid              UPDATE tblQuotes SET           InsuredPolicyName=@InsuredPolicyName     WHERE QuoteGUID = @RewriteQuoteGuid         --//TFS 87687 to call a new column in version table that will hold a proc for custom processing prior to bind,       --in this case, it's for setting “Non renewed” and “By Definition” needs to be set for every transaction       --EXEC Ascot_ImportAL3_NBS_V2_PreBindHighland @RewriteQuoteGuid, @RewriteQuoteID     ----Select * from tblQuotes     ----------------------------------------------------------16/04 Writing Compnay User Story 107144             Declare @CompanyLocationGUID_XML Varchar(250),@XMLQuoteidtest varchar(100),        @CompanyLineGUID_XML varchar(250),@InsuredNameXML varchar(250),@StateIDXML varchar(50),@InsuredZipXML varchar(50),@InsuredCityXML varchar(50), @PremiumStateXML varchar(20),        @InsuredAddressXML varchar(250), @InsuredCountryXML varchar(250), @InsuredGUID nvarchar(250)        Select @InsuredGUID=InsuredGUID from tblSubmissionGroup where SubmissionGroupGUID=(Select SubmissionGroupGUID from tblquotes where QuoteGuid = @RewriteQuoteGuid)        Select         @StateIDXML = p.InsuredState,        @InsuredZipXML=p.InsuredZip,        @InsuredCityXML=p.InsuredCity,        @InsuredAddressXML=p.InsuredAddress,        @InsuredCountryXML=p.InsuredCounty         from Ascot_AL3PolicyMasterTable_v2 p where importlogid = @importlogid                           Update  tblInsuredLocations set        Address1=@InsuredAddressXML,        City=@InsuredCityXML,        County=@InsuredCountryXML,        State=@StateIDXML,        Zipcode=@InsuredZipXML        where  InsuredGUID = @InsuredGUID                       Select         @CompanyLocationGUID_XML=cl.CompanyLocationGUID ,        @CompanyLineGUID_XML=CL.CompanyLineGUID,        @StateIDXML = p.InsuredState,        @InsuredZipXML=p.InsuredZip,        @InsuredCityXML=p.InsuredCity,        @InsuredAddressXML=p.InsuredAddress,        @InsuredNameXML=p.InsuredName,        @PremiumStateXML=p.PremiumState          --@CN=p.ControlNo        from ASCOT_AL3PolicyMasterTable_V2 p        join lstLines L on p.linecode=L.lineId        join tblcompanylocations TCL on p.companycode=TCL.companylocationCode        join tblcompanylines CL on l.lineGUID=CL.lineGUID and p.premiumState=CL.stateId and CL.CompanyLocationGUID=TCL.CompanyLocationGUID        where importLogId=@ImportLogID          UPDATE tblquotes        set         CompanyLocationGuid=@CompanyLocationGUID_XML,         CompanyLineGuid=@CompanyLineGUID_XML,         StateId = @PremiumStateXML,         InsuredZipCode=@InsuredZipXML,         InsuredCity=@InsuredCityXML,         InsuredAddress1=@InsuredAddressXML,         InsuredPolicyName=@InsuredNameXML,         InsuredState = @StateIDXML        where QuoteGuid = @RewriteQuoteGuid                          UPDATE tblQuoteDetails        SET         tblQuoteDetails.CompanyName = comp.CompanyName,        tblQuoteDetails.LocationName = compLoc.LocationName,        tblQuoteDetails.Address1 = compLoc.Address1,        tblQuoteDetails.Address2 = compLoc.Address2,        tblQuoteDetails.Region = compLoc.Region,        tblQuoteDetails.ISOCountryCode = compLoc.ISOCountryCode,        tblQuoteDetails.City = compLoc.City,        tblQuoteDetails.County = compLoc.County,        tblQuoteDetails.[State] = compLoc.[State],        tblQuoteDetails.ZipCode = compLoc.ZipCode,        tblQuoteDetails.ZipPlus = compLoc.ZipPlus,        tblQuoteDetails.Phone = compLoc.Phone,        tblQuoteDetails.Fax = compLoc.Fax,        tblQuoteDetails.ClaimPhone = compLoc.ClaimPhone,        tblQuoteDetails.ClaimFax = compLoc.ClaimFax       FROM         Ascot_AL3PolicyMasterTable_v2 p         join (select distinct dnltrid,linecode from Ascot_AL3QuoteDetailTable_v2 where importlogid = @importLogid) qdt on p.dnltrid=qdt.dnltrid        --Ascot_AL3QuoteDetailTable_v2 qdt on p.dnltrid=qdt.dnltrid and p.premiumstate=qdt.stateid        join lstLines L on p.linecode=L.lineId        join tblcompanylocations compLoc on p.companycode=compLoc.companylocationCode        JOIN dbo.tblCompanies comp ON comp.CompanyGUID = compLoc.CompanyGUID        join tblcompanylines CL on l.lineGUID=CL.lineGUID and p.premiumState=CL.stateId and compLoc.CompanyLocationGUID=cl.CompanyLocationGUID        where p.importLogId=@importLogid and tblquotedetails.QuoteGuid=@RewriteQuoteGuid             Update        tblQuoteDetails  set tblQuoteDetails.CompanyLineGuid=cl.CompanyLineGUID from ASCOT_AL3PolicyMasterTable_V2 p         join (select distinct dnltrid,linecode from Ascot_AL3QuoteDetailTable_v2 where importlogid = @importLogid) qdt on p.dnltrid=qdt.dnltrid        --join #PolsToCreateDetails qdt on p.dnltrid=qdt.dnltrid and p.premiumstate=qdt.stateid        join lstLines L on qdt.linecode=L.lineId        join tblcompanylocations TCL on p.companycode=TCL.companylocationCode        join tblcompanylines CL on l.lineGUID=CL.lineGUID and p.premiumState=CL.stateId and CL.CompanyLocationGUID=TCL.CompanyLocationGUID        where p.importLogId=@importLogid and tblquotedetails.QuoteGuid=@RewriteQuoteGuid and tblquotedetails.lineName=l.linename                             --Update     --   tblQuoteDetails  set tblQuoteDetails.CompanyLineGuid=cl.CompanyLineGUID from #PolsToEND p      --   join #PolsToENDDetails qdt on p.dnltrid=qdt.dnltrid and p.premiumstate=qdt.stateid     --   join lstLines L on qdt.linecode=L.lineId     --   join tblcompanylocations TCL on p.companycode=TCL.companylocationCode     --   join tblcompanylines CL on l.lineGUID=CL.lineGUID and p.premiumState=CL.stateId and CL.CompanyLocationGUID=TCL.CompanyLocationGUID     --   where p.importLogId=@importLogid and tblquotedetails.QuoteGuid=@RewriteQuoteGuid and tblquotedetails.lineName=l.linename       --  -------------------------------------------------------------------------         --Copy forward the quote option      INSERT INTO      tblQuoteOptions      (         QuoteOptionGUID,         OriginalQuoteOptionGUID,         QuoteGUID,         LineGUID,         CompanyLocationID,         DateCreated,         Bound,         Quote,         AdditionalComments,         CompanyInstallmentID,         AutoApplyFeeLog      )      SELECT       NEWID(),      tqo.QuoteOptionGuid,      @RewriteQuoteGuid,      tqo.LineGuid,      pd.CompanyLocationCode,      GETDATE(),      1,      0,      MAX(AdditionalComments),      MAX(CompanyInstallmentID),      MAX(AutoApplyFeeLog)     FROM        #polstoend p     JOIN       #polstoendDetails pd ON p.dnltrid = pd.dnltrid     JOIN       tblquoteoptions tqo ON pd.lineguid = tqo.lineguid      INNER JOIN        tblCompanyLines cl ON cl.CompanyLineGuid = p.CompanyLineGuid     WHERE        p.DnlTrId = @DnlTrId       AND tqo.QuoteGUID = @OriginalQuoteGuid     GROUP BY       tqo.QuoteOptionGuid,       tqo.LineGuid,      pd.CompanyLocationCode;                         ---------------------------------------------------------------------------------      --At this point, the endorsement has been created.  We now      --want to copy forward the old premium record with the new amount     INSERT INTO tblQuoteOptionPremiums           SELECT DISTINCT      NewQuoteOptions.QuoteOptionGuid,      ISNULL(ChargeCodeTable.ChargeCode, tblFin_PolicyCharges.ChargeCode) AS ChargeCode,      tblQuoteOptionPremiums.OfficeId,      CASE           WHEN NewPremiumTable.CompanyLocationCode IS NULL THEN               CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN 1 ELSE 2 END          ELSE               CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END      END AS PremiumValue1,      CASE           WHEN NewPremiumTable.CompanyLocationCode IS NULL THEN               CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN 1 ELSE 2 END          ELSE               CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END      END AS PremiumValue2,      tblQuoteOptionPremiums.Commissionable,      GETDATE() AS CreatedDate  FROM tblQuoteOptions   INNER JOIN tblQuoteOptions AS NewQuoteOptions       ON NewQuoteOptions.OriginalQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid  INNER JOIN tblQuoteOptionPremiums       ON tblQuoteOptions.QuoteOptionGuid = tblQuoteOptionPremiums.QuoteOptionGuid  INNER JOIN tblFin_PolicyCharges       ON tblQuoteOptionPremiums.ChargeCode = tblFin_PolicyCharges.ChargeCode  INNER JOIN lstLines       ON tblQuoteOptions.LineGuid = lstLines.LineGuid  OUTER APPLY (      SELECT           Premium,          Terrorism,          CompanyLocationCode,          LineCode,          StateID      FROM Ascot_AL3QuoteDetailTable_v2      WHERE DnlTrId = @DnlTrId  ) AS NewPremiumTable  OUTER APPLY (      SELECT TOP 1           SubPC.ChargeCode,          SubPC.ChargeID      FROM tblFin_PolicyCharges AS SubPC      WHERE SubPC.ChargeID = tblFin_PolicyCharges.ChargeID        AND SubPC.StateID = NewPremiumTable.StateID  ) AS ChargeCodeTable  OUTER APPLY (      SELECT           CompanyCode AS CompanyLocationCode,          LineCode      FROM Ascot_AL3PolicyMasterTable_v2      WHERE DnlTrId = @DnlTrId  ) AS PolicyLevelImportTable  WHERE tblQuoteOptions.QuoteGuid = @OriginalQuoteGuid    AND (      CASE           WHEN NewPremiumTable.LineCode IS NULL THEN               CASE WHEN lstLines.LineID = PolicyLevelImportTable.LineCode THEN 1 ELSE 0 END          ELSE               CASE WHEN lstLines.LineID = NewPremiumTable.LineCode THEN 1 ELSE 0 END      END  ) = 1  --  AND (  --    CASE   --        WHEN NewPremiumTable.CompanyLocationCode IS NULL THEN   --            CASE WHEN tblQuoteOptions.CompanyLocationID = PolicyLevelImportTable.CompanyLocationCode THEN 1 ELSE 0 END  --        ELSE   --            CASE WHEN tblQuoteOptions.CompanyLocationID = NewPremiumTable.CompanyLocationCode THEN 1 ELSE 0 END  --    END  --) = 1          DECLARE @OfficeID INT       SELECT              @OfficeID = tblClientOffices.OfficeID      FROM tblQuotes Q   INNER JOIN tblClientOffices ON Q.QuotingLocationGuid = tblClientOffices.OfficeGuid      WHERE Q.QuoteGuid = @OriginalQuoteGuid     IF EXISTS(SELECT * FROM Ascot_AL3FeesTable WHERE Ascot_AL3FeesTable.DnlTrId = @DnlTrId)   BEGIN      ----------------------------------------------------------------------------------------      --------------------------------------------------------------------------------------    INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, FlatRate, Splittable, AutoApplied)    SELECT qo.QuoteOptionGUID,      CompanyLineFeeSetupIDTable.CompanyFeeID,      Ascot_AL3FeesTable.ChargeCode,      @OfficeID,      tblCompanyLines.CompanyLineGUID,      3,      1,      Ascot_AL3FeesTable.FeeAmount,       0,      0    FROM  Ascot_AL3FeesTable    INNER JOIN lstLines FeeLine ON Ascot_AL3FeesTable.LineID = FeeLine.LineID    INNER JOIN tblCompanyLocations FeeCompanyLocation ON FeeCompanyLocation.CompanyLocationCode = Ascot_AL3FeesTable.CompanyLocationCode    INNER JOIN tblQuotes q ON q.QuoteGUID = @RewriteQuoteGuid    INNER JOIN tblQuoteOptions qo ON q.QuoteGUID = qo.QuoteGUID     AND  qo.LineGUID = FeeLine.LineGUID     AND  qo.CompanyLocationID = Ascot_AL3FeesTable.CompanyLocationCode    INNER JOIN tblCompanyLines ON tblCompanyLines.LineGUID = FeeLine.LineGUID     AND  tblCompanyLines.CompanyLocationGUID = FeeCompanyLocation.CompanyLocationGUID     AND  tblCompanyLines.StateID = Ascot_AL3FeesTable.StateID     AND  CASE WHEN FeeLine.LineGUID <> q.LineGUID        THEN CASE WHEN tblCompanyLines.ParentCompanyLineGUID IS NOT NULL THEN 1 ELSE 0 END        ELSE CASE WHEN tblCompanyLines.ParentCompanyLineGUID IS NULL THEN 1 ELSE 0 END       END = 1    CROSS APPLY (        SELECT TOP 1 tblCompanyPolicyCharges.CompanyFeeID        FROM tblCompanyPolicyCharges        WHERE tblCompanyPolicyCharges.ChargeCode = Ascot_AL3FeesTable.ChargeCode        AND ISNULL(tblCompanyPolicyCharges.CompanyLocationGuid, FeeCompanyLocation.CompanyLocationGUID) = FeeCompanyLocation.CompanyLocationGUID        --AND ISNULL(tblCompanyPolicyCharges.LineGuid, FeeLine.LineGUID) = FeeLine.LineGUID        AND ISNULL(tblCompanyPolicyCharges.StateID, Ascot_AL3FeesTable.StateID) = Ascot_AL3FeesTable.StateID        AND DATEDIFF(d, tblCompanyPolicyCharges.Effective, q.EffectiveDate) >= 0        ORDER BY tblCompanyPolicyCharges.Effective DESC,           (CASE WHEN tblCompanyPolicyCharges.CompanyLocationGuid IS NOT NULL THEN 1 ELSE 0 END +           CASE WHEN tblCompanyPolicyCharges.LineGuid IS NOT NULL THEN 1 ELSE 0 END +           CASE WHEN tblCompanyPolicyCharges.StateID IS NOT NULL THEN 1 ELSE 0 END) DESC       ) AS CompanyLineFeeSetupIDTable    WHERE Ascot_AL3FeesTable.DnlTrId = @DnlTrId     END        IF @BrokerCommissionFeeChargeCode IS NOT NULL    BEGIN       DECLARE @BrokerCommissionPercent decimal(9, 8)     DECLARE @BrokerFeeAppliesToLineGuid uniqueidentifier     DECLARE @BrokerFeeAppliesToCompanyLineGuid uniqueidentifier     DECLARE @BrokerFeeAppliesToQuoteOptionGuid uniqueidentifier     DECLARE @BrokerFeeAppliesToOfficeID int       SELECT @BrokerCommissionPercent = Ascot_AL3PolicyMasterTable_v2.BrokerCommissionPercent,       @BrokerFeeAppliesToLineGuid = lstLines.LineGUID,       @BrokerFeeAppliesToCompanyLineGuid = CL.CompanyLineGuid     FROM Ascot_AL3PolicyMasterTable_v2     INNER JOIN lstLines ON Ascot_AL3PolicyMasterTable_v2.LineCode = lstLines.LineID     Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode     Inner Join  tblCompanyLines CL on CL.LineGUID = lstLines.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and Ascot_AL3PolicyMasterTable_v2.StateOfIssuance = CL.StateID     WHERE DnlTrId = @DnlTrId       SELECT @BrokerFeeAppliesToQuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID     FROM tblQuoteOptions     WHERE tblQuoteOptions.QuoteGuid = @RewriteQuoteGuid     AND  EXISTS(SELECT *          FROM tblQuoteOptionPremiums          WHERE tblQuoteOptionPremiums.QuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID          AND tblQuoteOptionPremiums.Premium <> 0         AND tblQuoteOptionPremiums.OfficeID = @BrokerFeeAppliesToOfficeID)     AND  tblQuoteOptions.LineGUID = @BrokerFeeAppliesToLineGuid       IF @BrokerFeeAppliesToQuoteOptionGuid IS NULL     BEGIN        SELECT @BrokerFeeAppliesToQuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID      FROM tblQuoteOptions      WHERE tblQuoteOptions.QuoteGuid = @RewriteQuoteGuid      AND  EXISTS(SELECT *           FROM tblQuoteOptionPremiums           WHERE tblQuoteOptionPremiums.QuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID           AND tblQuoteOptionPremiums.Premium <> 0)          --AND tblQuoteOptionPremiums.OfficeID = @BrokerFeeAppliesToOfficeID      --AND  tblQuoteOptions.LineGUID = @BrokerFeeAppliesToLineGuid       END       DECLARE @BrokerCommissionCompanyFeeID int     SELECT @BrokerCommissionCompanyFeeID = CompanyFeeID     FROM tblCompanyPolicyCharges     WHERE tblCompanyPolicyCharges.ChargeCode = @BrokerCommissionFeeChargeCode     AND tblCompanyPolicyCharges.LineGuid = @BrokerFeeAppliesToLineGuid       IF @BrokerCommissionCompanyFeeID IS NULL     BEGIN        raiserror('No CompanyFeeID setup found for ChargeCode and Line', 15, 1) with nowait;       END         INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, PercentageRate, Splittable, AutoApplied)     SELECT @BrokerFeeAppliesToQuoteOptionGuid,       @BrokerCommissionCompanyFeeID,       @BrokerCommissionFeeChargeCode,       @BrokerFeeAppliesToOfficeID,       @BrokerFeeAppliesToCompanyLineGuid,       3,       0,       @BrokerCommissionPercent,        0,       0     FROM Ascot_AL3PolicyMasterTable_v2     WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId = @DnlTrId        END          --Update Quote Option Data      UPDATE      tblQuoteOptions      SET      Bound = 1      WHERE      QuoteGuid = @RewriteQuoteGuid        -------------------------------------------30/10        UPDATE      tblQuotes      SET      DateIssued = GETDATE(),      IssuedByUserID = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),      DateBound = GETDATE(),      BoundByUserId = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),      QuoteStatusId = 3      WHERE      QuoteGuid = @RewriteQuoteGuid      AND DateIssued IS NULL           UPDATE Ascot_AL3PolicyMasterTable_v2 SET CreatedQuoteID = @RewriteQuoteID      FROM Ascot_AL3PolicyMasterTable_v2      WHERE DnlTrID = @DnlTrID      -------------------------------------------30/10     --DECLARE @BillingCode char(5)     DECLARE @Effective datetime          SELECT  @Effective = Effectivedate,         @BillingCode = BillingCode      FROM  tblquotes q     INNER JOIN lstBillingTypes bt on bt.BillingTypeID = q.BillingTypeID     WHERE  QuoteID=@RewriteQuoteID           --If we have premium in tblQuoteOptionsPremiums or fees in tblQuoteOptionCharges that add up to something other than 0 then continue with the invoice generation and transfer to accounting     DECLARE @QuoteOptionPremium money = 0     SELECT @QuoteOptionPremium = SUM(tblQuoteOptionPremiums.Premium)     FROM tblQuotes     INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID     INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid     WHERE tblQuotes.QuoteGuid = @RewriteQuoteGuid       DECLARE @QuoteOptionCharges money = 0     SELECT @QuoteOptionCharges = SUM(tblQuoteOptionCharges.amount)     FROM tblQuotes     INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID     INNER JOIN tblQuoteOptionCharges ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionCharges.QuoteOptionGuid     WHERE tblQuotes.QuoteGuid = @RewriteQuoteGuid                                                                               IF @QuoteOptionPremium <> 0 OR @QuoteOptionCharges <> 0   BEGIN      --Send invoices to accounting (AccountingTransfer.vb)    DECLARE @InvoiceNum INT      DECLARE @NumInstallments int      -- DECLARE @ExpirationDate datetime     ---------------------------18/11       DECLARE @CompanyLineGuid uniqueidentifier       DECLARE @IMSInstallmentPlanID int    --DECLARE @NumInstallmentsForTrue int      SELECT @NumInstallments = ISNULL(P.NumInstallments, 1),         @ExpirationDate = P.PolicyExpirationDate,         @CompanyLineGuid = P.CompanyLineGUID                FROM #PolsToEnd P       WHERE P.DnlTrId = @DnlTrId          DECLARE @InstallmentPlanMappingTable TABLE    (     OptionName varchar(200),     TridentNumInstallments int    )         INSERT INTO @InstallmentPlanMappingTable VALUES('Annual Agency Bill True',1)                      INSERT INTO @InstallmentPlanMappingTable VALUES('Quarterly Agency Bill True',4)                      INSERT INTO @InstallmentPlanMappingTable VALUES('Semi Annual Agency Bill True',2)                      --INSERT INTO @InstallmentPlanMappingTable VALUES('Annual Agency Bill',1)                      --INSERT INTO @InstallmentPlanMappingTable VALUES('Quarterly Agency Bill',4)                      --INSERT INTO @InstallmentPlanMappingTable VALUES('Semi Annual Agency Bill',2)      SELECT TOP 1 @IMSInstallmentPlanID = tblCompanyLineInstallments.ID    FROM tblCompanyLineInstallments    INNER JOIN tblCompanyLines ON tblCompanyLineInstallments.CompanyLineID = tblCompanyLines.CompanyLineID    INNER JOIN @InstallmentPlanMappingTable T ON tblCompanyLineInstallments.OptionName = T.OptionName    WHERE tblCompanyLines.CompanyLineGUID = @CompanyLineGuid    AND T.TridentNumInstallments = @NumInstallments          DECLARE @FirstInvoicePercentage decimal(20, 19)    DECLARE @FirstInvoiceTerm int    DECLARE @FirstInvoiceBillingCode varchar(100)    DECLARE @FirstInvoiceFromEffectiveDate bit    DECLARE @FirstInvoiceFromBillingDate bit    DECLARE @InstallmentPercentage decimal(20, 19)    DECLARE @InstallmentTerms int--how many days/months between installments    DECLARE @InstallmentFromEffectiveDate datetime    DECLARE @InstallmentFromBillingDate datetime    DECLARE @UseMonth bit--defines if months are used for @InstallmentTerms instead of days    DECLARE @FirstInvoiceFromEffEndMonthDate bit      IF @IMSInstallmentPlanID IS NOT NULL    BEGIN       SELECT @FirstInvoicePercentage = tblCompanyLineInstallments.DownpaymentPercentage,       @FirstInvoiceTerm = tblCompanyLineInstallments.DownpaymentTerm,       @FirstInvoiceBillingCode = lstBillingTypes.BillingCode,       @FirstInvoiceFromEffectiveDate = tblCompanyLineInstallments.DownpaymentFromEffectiveDate,       @FirstInvoiceFromBillingDate = tblCompanyLineInstallments.DownpaymentFromDateBilled,       @FirstInvoiceFromEffEndMonthDate = tblCompanyLineInstallments.DownPaymentFromEffEndMonth,                  @InstallmentPercentage = ((1.0000 - tblCompanyLineInstallments.DownpaymentPercentage) / isnull(nullif(tblCompanyLineInstallments.NumPayments,0), 1)),       @InstallmentTerms = tblCompanyLineInstallments.PolicyEffectiveInstallmentTerm,       @InstallmentFromEffectiveDate = tblCompanyLineInstallments.InstallmentFromEffectiveDate,       @InstallmentFromBillingDate = tblCompanyLineInstallments.InstallmentFromDateBilled,       @UseMonth = tblCompanyLineInstallments.UseMonth       FROM tblCompanyLineInstallments     LEFT JOIN lstBillingTypes ON tblCompanyLineInstallments.DownpaymentBillingTypeID = lstBillingTypes.BillingTypeID     WHERE ID = @IMSInstallmentPlanID      END    ELSE    BEGIN       DECLARE @ProducerPaymentMeasuredFrom_Endorsement varchar(10)     DECLARE @ProducerPaymentTermDays int = 0     SELECT @ProducerPaymentMeasuredFrom_Endorsement = tblCompanyLineTermsOfPayment.ProducerPaymentMeasuredFrom_Endorsement,       @ProducerPaymentTermDays = tblCompanyLineTermsOfPayment.DefaultProducerTermsOfPayment_Endorsement     FROM tblCompanyLines     INNER JOIN tblCompanyLineTermsOfPayment ON tblCompanyLines.CompanyLineID = tblCompanyLineTermsOfPayment.CompanyLineID     WHERE tblCompanyLines.CompanyLineGUID = @CompanyLineGuid     AND DATEDIFF(d, tblCompanyLineTermsOfPayment.Effective, @Effective) >= 0     ORDER BY Effective DESC     --E=Effective     --G=GAAP     --M=End of Month (billed?)     --B=Billed       DECLARE @TransactionMonths int = DATEDIFF(m, @Effective, @ExpirationDate)       SET @FirstInvoicePercentage = 1.0000 / @NumInstallments     SET @FirstInvoiceTerm = @ProducerPaymentTermDays     SET @FirstInvoiceBillingCode = @BillingCode     SET @FirstInvoiceFromEffectiveDate = 1     SET @FirstInvoiceFromBillingDate = 0       SET @InstallmentPercentage = @FirstInvoicePercentage     SET @InstallmentTerms = @TransactionMonths / @NumInstallments     SET @InstallmentFromEffectiveDate = 1     SET @InstallmentFromBillingDate = 0     SET @UseMonth = 1       IF @ProducerPaymentMeasuredFrom_Endorsement = 'E'     BEGIN                                                   SET @FirstInvoiceFromEffectiveDate = 1      SET @FirstInvoiceFromBillingDate = 0        SET @InstallmentFromEffectiveDate = 1      SET @InstallmentFromBillingDate = 0       END             IF @ProducerPaymentMeasuredFrom_Endorsement = 'B'     BEGIN        SET @FirstInvoiceFromEffectiveDate = 0      SET @FirstInvoiceFromBillingDate = 1        SET @InstallmentFromEffectiveDate = 0      SET @InstallmentFromBillingDate = 1       END       IF @InstallmentTerms < 1     BEGIN        DECLARE @TransactionDays int = DATEDIFF(d, @Effective, @ExpirationDate)      SET @InstallmentTerms = @TransactionDays / @NumInstallments      SET @UseMonth = 0       END      END      IF EXISTS(SELECT * FROM #InvoiceInstallmentsTable)    BEGIN       DELETE FROM #InvoiceInstallmentsTable      END      WHILE (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) < @NumInstallments    BEGIN       IF (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) = 0     BEGIN        DECLARE @CalculatedDueDate datetime        IF @FirstInvoiceFromEffectiveDate = 1      BEGIN         SET @CalculatedDueDate = DATEADD(d, @FirstInvoiceTerm, @Effective)        END      ELSE IF @FirstInvoiceFromBillingDate = 1      BEGIN         SET @CalculatedDueDate = DATEADD(d, @FirstInvoiceTerm, @DateBound)        END        ELSE IF @FirstInvoiceFromEffEndMonthDate = 1      BEGIN         SET @CalculatedDueDate = DATEADD(d, @FirstInvoiceTerm, EOMONTH(@Effective))        END        --downpayment info or single invoice, use first invoice vars      INSERT INTO #InvoiceInstallmentsTable VALUES      (       @RewriteQuoteID,        @Effective,        @ExpirationDate,        @NumInstallments,        (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) + 1,        @CalculatedDueDate,       @FirstInvoiceBillingCode,       @FirstInvoicePercentage      )       END     ELSE     BEGIN        DECLARE @CurrentInstallmentNumber int = (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) + 1        IF @InstallmentFromEffectiveDate = 1      BEGIN         IF @UseMonth = 1       BEGIN                   SET @CalculatedDueDate = DATEADD(m, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @Effective)         END       ELSE       BEGIN                   SET @CalculatedDueDate = DATEADD(d, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @Effective)         END        END      ELSE IF @InstallmentFromBillingDate = 1      BEGIN         IF @UseMonth = 1       BEGIN                   SET @CalculatedDueDate = DATEADD(m, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @DateBound)         END       ELSE       BEGIN                   SET @CalculatedDueDate = DATEADD(d, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @DateBound)         END        END        ELSE IF @FirstInvoiceFromEffEndMonthDate = 1      BEGIN         IF @UseMonth = 1       BEGIN                   SET @CalculatedDueDate = DATEADD(m, @InstallmentTerms * (@CurrentInstallmentNumber - 1), EOMONTH(@Effective))         END       ELSE       BEGIN                   SET @CalculatedDueDate = CASE WHEN @CurrentInstallmentNumber > 2           THEN DATEADD(d, @InstallmentTerms + 90*(@CurrentInstallmentNumber - 2), EOMONTH(@Effective))         ELSE DATEADD(d, @InstallmentTerms * (@CurrentInstallmentNumber - 1), EOMONTH(@Effective))         END         END        END        INSERT INTO #InvoiceInstallmentsTable VALUES      (       @RewriteQuoteID,        @Effective,        @ExpirationDate,        @NumInstallments,        @CurrentInstallmentNumber,        @CalculatedDueDate,       @BillingCode,       @InstallmentPercentage      )       END      END    --  IF (SELECT SUM(ISNULL(tblQuoteOptionPremiums.Premium, 0)) FROM tblQuoteOptions INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGuid = tblQuoteOptionPremiums.QuoteOptionGuid WHERE tblQuoteO
Ascot_ImportAL3_ENS_DynamicProducer_Captive	Create PROC [dbo].[Ascot_ImportAL3_ENS_DynamicProducer_Captive]    @ImportLogID INT  AS  BEGIN   DECLARE @TransType VARCHAR(25)   DECLARE @EnteredDate DATETIME    DECLARE @WrittenPremium MONEY   DECLARE @PolicyNumber VARCHAR(50)   DECLARE @PolicyTransactionID INT -- TFS 70502  USed to prevent duplicate trasnaction from being created should the feed run multiple times on same policy   DECLARE @CompanyLocationCode INT   DECLARE @UniqueTransactionID varchar(200) -- TFS 90577 -- Used to identify duplicate transaction uploads   DECLARE @UniqueTransactionIDExists INT   DECLARE @AccounNumber VARCHAR(50)     DECLARE @ImportSource INT   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID     IF OBJECT_ID('tempdb..#PolsToEnd') IS NOT NULL BEGIN DROP TABLE #PolsToEnd END   SELECT --TOP 500      *    INTO  #PolsToEnd   FROM  [dbo].Ascot_AL3PolicyMasterTable_v2   WHERE  ImportLogID = @ImportLogID   AND   ISNULL(Error, 0) = 0      AND DateProcessed IS NULL      AND PolicyIndicator IN ('E', 'C', 'W')          --AND policynumber= 'HABX2010000001-01'--'HABP2010000001-01'   ORDER BY TransactionEffectiveDate     DECLARE @DnlTrId UNIQUEIDENTIFIER     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToEnd ORDER BY AccountNumber, PolicyTransactionID     OPEN Cur   FETCH Cur INTO @DnlTrId     DECLARE @preblocking int   SET @preblocking=1     WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 5 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:05' --5 SECONDS     END    END          IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL    BEGIN       DROP TABLE #ConfigurationsTable      END      CREATE TABLE #ConfigurationsTable    (     ID int,     StartingOnPoliciesEffective smalldatetime,     QuotingLocationGuid uniqueidentifier,     IssuingLocationGuid uniqueidentifier,     UnderwriterGuid uniqueidentifier,     IssuedByUserID int,     BoundByUserID int,     CostCenterID int,     BrokerCommissionFeeChargeCode int,     UnderwritingAssistantGuid uniqueidentifier,     AutoApplyFees bit,     CompanyLocationCode INT,     UseUWCloseDate BIT    )      WHILE @@Fetch_status=0     BEGIN      BEGIN TRY         BEGIN TRAN          SELECT @TransType = PolicyIndicator,           @EnteredDate = DateIssued,          @WrittenPremium = ISNULL(PremiumAmount, 0),           @PolicyNumber = Ascot_AL3PolicyMasterTable_v2.PolicyNumber,          @PolicyTransactionID = Ascot_AL3PolicyMasterTable_v2.PolicyTransactionID,  --TFS 70502           @CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode,          @UniqueTransactionID = Ascot_AL3PolicyMasterTable_v2.UniqueTransactionID, -- TFS 91066 added logic to use UniqueTransactionID          @AccounNumber = Ascot_AL3PolicyMasterTable_v2.AccountNumber        FROM Ascot_AL3PolicyMasterTable_v2         WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId=@DnlTrId                INSERT INTO #ConfigurationsTable        SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,           Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,           Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,           Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,           Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,           Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,           Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,           Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,           Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,           Ascot_tblAL3ProgramConfigurations_v2.UnderwritingAssistantGuid,           Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,                             ASCOT_tblAL3ProgramConfigurations_V2.CompanyLocationCode,           ASCOT_tblAL3ProgramConfigurations_V2.UseUWCloseDate          FROM  Ascot_tblAL3ProgramConfigurations_v2        INNER JOIN Ascot_AL3PolicyMasterTable_v2 P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)         AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID         AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode         AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0         AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource        WHERE  P.DnlTrId = @DnlTrId          DECLARE @ConfigurationID int          SELECT TOP 1 @ConfigurationID = C.ID        FROM #ConfigurationsTable C        WHERE C.CompanyLocationCode = @CompanyLocationCode              ORDER BY C.StartingOnPoliciesEffective DESC          DECLARE @QuotingLocationGuid uniqueidentifier        DECLARE @IssuingLocationGuid uniqueidentifier        DECLARE @UnderwriterGuid uniqueidentifier        DECLARE @IssuedByUserID int        DECLARE @BoundByUserID int        DECLARE @CostCenterID int        DECLARE @BrokerCommissionFeeChargeCode int        DECLARE @UnderwritingAssistantGuid uniqueidentifier        DECLARE @AutoApplyFees bit        DECLARE @UseUWCloseDate BIT = 0 -- TFS 92747          SELECT @QuotingLocationGuid = QuotingLocationGuid,          @IssuingLocationGuid = IssuingLocationGuid,          @UnderwriterGuid = UnderwriterGuid,          @IssuedByUserID = IssuedByUserID,          @BoundByUserID = BoundByUserID,          @CostCenterID = CostCenterID,          @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,          @UnderwritingAssistantGuid = UnderwritingAssistantGuid,          @AutoApplyFees = AutoApplyFees,          @UseUWCloseDate = UseUWCloseDate        FROM #ConfigurationsTable        WHERE ID = @ConfigurationID          IF @ConfigurationID IS NULL        BEGIN         raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;        END                        /*TFS 90900          add logic to determine if the transaction was already imported             */         SET @UniqueTransactionIDExists = 0           SELECT @UniqueTransactionIDExists = 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = @AccounNumber          AND SubT.UniqueTransactionID = @UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> @DnlTrId          and l.ImportSource = @ImportSource          and @UniqueTransactionID IS NOT NULL -- Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.          IF @UniqueTransactionIDExists = 1          BEGIN         raiserror('Policy Transaction previously imported', 15, 1) with nowait;        END                  --TFS 87326        DECLARE @MaxCtrlNum  int        DECLARE @MaxCtrlNumEffective smalldatetime        DECLARE @QuoteGuid uniqueidentifier        DECLARE @CurrentQuoteStatusID int          --TFS 88331  This quoting location clause is neccessary as BOLT policies (Excess Casualty) because they need to identify the  specific transaction         --as the source and destimation polcies are both in Ascot database but under different quoting office.        --SELECT    top 1  @MaxCtrlNum = controlno , @MaxCtrlNumEffective = EffectiveDate, @QuoteGuid = QuoteGUID, @CurrentQuoteStatusID = QuoteStatusID from tblQuotes         SELECT    top 1  @MaxCtrlNum = controlno , @MaxCtrlNumEffective = EffectiveDate, @CurrentQuoteStatusID = QuoteStatusID from tblQuotes         where PolicyNumber = @PolicyNumber          and QuotingLocationGuid = @QuotingLocationGuid                               order by ControlNo desc, QuoteID desc                --make sure no prev errors        DECLARE @PrevErrors int        SELECT @PrevErrors=COUNT(*)         FROM  Ascot_AL3PolicyMasterTable_v2         WHERE  Error=1            AND DateProcessed IS NULL                     AND PolicyNumber = @PolicyNumber           AND ErrorMessage NOT IN ('Ignore 0 Premium Endorsement')           -- TFS 70502            AND PolicyTransactionID < @PolicyTransactionID -- TFS 70502 Thsi will check the previous transaction id           and Note = @MaxCtrlNum           AND  DATEDIFF(d, PolicyEffectiveDate, @MaxCtrlNumEffective) <= 0                                 -- TFS 87326  The purpose is for the  error to only check errors on the latest control number. This will occur for rewrites and in come cases renewals.           -- 1:  Get the latest control number for the policy being processed that also has the  same policy  effective date           -- 2:  Add the control number here in where clause to limit the prcessing to the  latest ctrl           ---3:  compare the control number from step 2 to the note of teh master table for the polciy being processed and make sure he master note is equal controlnumber            IF @PrevErrors > 0         BEGIN          raiserror('Previous transactions had errors.', 15, 1) with nowait;         END                         DECLARE @QuoteID int        DECLARE @TransEffDate datetime        DECLARE @EndorsementComment varchar(50)              DECLARE @EndorsementCalcType char(1)        DECLARE @NewPremium money        DECLARE @TerrorismPremium money        DECLARE @QuoteStatusID int              DECLARE @DateBound datetime        DECLARE @UserGuid uniqueidentifier        DECLARE @BillingCode char(5)              DECLARE @ControlNo int        DECLARE @ExpirationDate datetime        DECLARE @BillingTypeID INT        DECLARE @producerComm DECIMAL(13,10) = NULL        DECLARE @companyComm DECIMAL(13,10) = NULL                                SELECT TOP 1           @ControlNo = q.ControlNo,            @QuoteID = q.QuoteID,              @QuoteGuid = q.QuoteGUID, --TFS 90900           @TransEffDate = t.TransactionEffectiveDate,           @EndorsementComment = t.EndorsementComment,                     @EndorsementCalcType = 'F',                    @NewPremium = ISNULL(PremiumAmount, 0),           @TerrorismPremium = ISNULL(TerrorismPremium, 0),           @QuoteStatusID = 9,                                 @DateBound = GETDATE(),           @UserGuid = '5be2621d-4bff-44de-b7d7-17fd01c90c85',                    @BillingTypeID = q.BillingTypeID, -- TFS 87790  getting this dynamically           @ExpirationDate = t.PolicyExpirationDate,           @producerComm = t.producerComm,           @companyComm = t.companyComm        FROM           Ascot_AL3PolicyMasterTable_v2 t WITH (NOLOCK)                    INNER JOIN tblQuotes q ON q.AccountNumber = t.AccountNumber--on endorsements use account number/control number as the policy number can change           INNER JOIN tblMaxQuoteIDs mb ON mb.MaxBoundQuoteID=q.QuoteID           INNER JOIN tblCompanyLocations ON q.CompanyLocationGuid = tblCompanyLocations.CompanyLocationGUID        WHERE t.DnlTrId=@DnlTrId        AND  tblCompanyLocations.CompanyLocationCode = @CompanyLocationCode                        /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                DECLARE @datebilled datetime                        --For endts, cancels, etc, the @datebound being passed to spaccoutingtransfer is the billdate and the policy effective date is @TransEffDate which what is being pased in to spcopyquote for polciy effective date         SET @datebilled = @DateBound         SET @Effectivedate = @TransEffDate          SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHTHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END                  select top 1 @BillingCode = BillingCode from lstBillingTypes where BillingTypeID = @BillingTypeID          DECLARE @TotalPremium money        DECLARE @CopyOptions bit = 0                         IF @TransType='E'         BEGIN                  exec dbo.Ascot_EndorsePolicy_Captive @QuoteGuid, @TransEffDate, @EndorsementComment, @EndorsementCalcType, @NewPremium, @QuoteStatusID, 20, @DateBound, @UserGuid, @BillingCode, @AutoApplyFees, @DnlTrId, @BrokerCommissionFeeChargeCode, @ExpirationDate, @TerrorismPremium, @CopyOptions                 END                 DECLARE @PremiumChange money                IF @TransType='C'         BEGIN                          IF @CurrentQuoteStatusID=12          raiserror('Policy is already cancelled.', 15, 1) with nowait;                 exec dbo.Ascot_CancelPolicy_Captive @QuoteGuid, @TransEffDate, @EndorsementComment, @EndorsementCalcType, @WrittenPremium, 99, @DateBound, @UserGuid, @BillingCode, @AutoApplyFees, @DnlTrId, @BrokerCommissionFeeChargeCode, @TerrorismPremium, @CopyOptions                   END                 IF @TransType='W'         BEGIN           IF @CurrentQuoteStatusID<>12           raiserror('Cannot reinstate non-cancelled policy.', 15, 1) with nowait;                     exec dbo.Ascot_ReinstatePolicy_Captive @QuoteGuid, @TransEffDate, @EndorsementComment, @EndorsementCalcType, @WrittenPremium, 100, @DateBound, @UserGuid, @BillingCode, @AutoApplyFees, @DnlTrId, @BrokerCommissionFeeChargeCode, @TerrorismPremium, @CopyOptions                   END               --update sucess        UPDATE      Ascot_AL3PolicyMasterTable_v2        SET         Error=0,           ErrorMessage=NULL,           ErrorTime=NULL,           DateProcessed=getdate(),           ProcessedBy='MGA',           Note=@ControlNo        WHERE  DnlTrId=@DnlTrId         -- TFS 70502 Record the committed controls in this table to be used for custom client processing         DECLARE @tmpContext VARCHAR(200)       SET @tmpContext = 'Ascot Policy Import V2 for importLogID:' + convert(varchar(10),@ImportLogID)         EXEC dbo.LogAction        @userid = 1,       @action = 'Policy transaction was imported into IMS via Ascot Policy Import',       @identifierID = @ImportLogID,       @identifierguid = @QuoteGuid,       @context = @tmpContext              COMMIT TRAN              if @@trancount<>0 COMMIT TRAN      END TRY      BEGIN CATCH       ROLLBACK TRAN       if @@trancount<>0 ROLLBACK TRAN              UPDATE      Ascot_AL3PolicyMasterTable_v2       SET         Error=1,          ErrorMessage = ERROR_MESSAGE(),          ErrorTime=getdate()       WHERE  DnlTrId=@DnlTrId      END CATCH            FETCH Cur INTO @DnlTrId            IF @@Fetch_status=0       BEGIN         raiserror('Wait 5 seconds', 0, 1) with nowait;        WAITFOR DELAY '00:00:05' --5 seconds                DECLARE @postblocking int        SET @postblocking=1          WHILE @postblocking > 0         BEGIN          SELECT @postblocking=COUNT(*)           FROM master.sys.dm_exec_requests          WHERE blocking_session_id <> 0                    IF @postblocking > 0           BEGIN           raiserror('Something is post-blocking wait 5 seconds', 0, 1) with nowait;           WAITFOR DELAY '00:00:05' --20 SECONDS          END         END        END     END     CLOSE Cur    DEALLOCATE Cur     DROP TABLE #ConfigurationsTable  END
Ascot_EndorsePolicy_Captive	Create PROCEDURE [dbo].[Ascot_EndorsePolicy_Captive]  (        @QuoteGuid UNIQUEIDENTIFIER,        @TransEffDate DATETIME,        @Comment VARCHAR(50),        @EndorsementCalcType CHAR(1),        @NewPremium MONEY,        @QuoteStatusID INT,        @QuoteStatusReasonID INT,        @DateBound DATETIME,        @UserGuid UNIQUEIDENTIFIER,        @BillingCode CHAR(5),        @AutoApplyFees bit,     @DnlTrID uniqueidentifier,     @BrokerCommissionFeeChargeCode int,     @ExpirationDate datetime,     @TerrorismPremium money,     @CopyOptions BIT  )  AS  BEGIN   SET NOCOUNT ON        DECLARE @ControlNumber INT   DECLARE @EndorsementQuoteID INT      DECLARE @EndorsementQuoteGuid UNIQUEIDENTIFIER      DECLARE @OfficeID INT   DECLARE @CompanyLineGuid uniqueidentifier   DECLARE @PolicyEffectiveDate datetime   DECLARE @CurrentQuoteStatusID int        SELECT @ControlNumber = Q.ControlNo,              @OfficeID = tblClientOffices.OfficeID,     @CompanyLineGuid = Q.CompanyLineGuid,     @PolicyEffectiveDate = Q.EffectiveDate,     @CurrentQuoteStatusID = Q.QuoteStatusID      FROM tblQuotes Q   INNER JOIN tblClientOffices ON Q.QuotingLocationGuid = tblClientOffices.OfficeGuid      WHERE Q.QuoteGuid = @QuoteGuid     --****************************************************   BEGIN TRANSACTION   --****************************************************     IF OBJECT_ID('tempdb..#InvoiceInstallmentsTable') IS NOT NULL   BEGIN      DROP TABLE #InvoiceInstallmentsTable     END     CREATE TABLE #InvoiceInstallmentsTable   (    QuoteID int,    EffectiveDate datetime,    ExpirationDate datetime,    NumInstallments int,    Installment int,    InstallmentDueDate datetime,    BillingCode varchar(100),    InstallmentMod decimal(20, 19)   )     DECLARE @CatchNewQuoteGuid TABLE   (    NewQuoteGuid uniqueidentifier   )        --Create the endorsement record   INSERT INTO @CatchNewQuoteGuid   EXEC  spCopyQuote     @QuoteGuid = @QuoteGuid,     @TransactionTypeID = 'E',     @QuoteStatusID = @QuoteStatusID,     @QuoteStatusReasonID = @QuoteStatusReasonID,     @EndorsementEffective = @TransEffDate,     @EndtRequestDate = @DateBound,     @EndorsementComment = @Comment,     @EndorsementCalculationType = @EndorsementCalcType,     @copyOptions = @CopyOptions              --Get the Endorsement Quote Guid      SELECT TOP 1 @EndorsementQuoteGuid = Q.QuoteGuid, @EndorsementQuoteID = Q.QuoteID FROM tblQuotes Q WHERE ControlNo = @ControlNumber ORDER BY QuoteId DESC        --TFS 87687  CAll Ascot custom spcopyquote.   EXEC  GreyHawk_spCopyQuote     @newQuoteGuid = @EndorsementQuoteGuid,     @OldQuoteGuid = @QuoteGuid          -- Update Insured information that was passed in from source data ie excel psreadsheet   --TFS 86643      DECLARE @InsuredPolicyNameSource VARCHAR (300)   DECLARE @InsuredDBAName VARCHAR (300)   DECLARE @InsuredFirstNameSource VARCHAR (300)   DECLARE @InsuredLastNameSource VARCHAR (300)   DECLARE @InsuredAddress2Source VARCHAR (300)   DECLARE @InsuredAddressSource VARCHAR (300)    DECLARE @InsuredCitySource VARCHAR (300)   DECLARE @InsuredStateSource VARCHAR (300)   DECLARE @InsuredZipSource VARCHAR (300)   DECLARE @InsuredCountySource VARCHAR (300)    DECLARE @InsuredGuid UNIQUEIDENTIFIER         SELECT     @InsuredPolicyNameSource =  InsuredName,   @InsuredDBAName = DBAName,   @InsuredFirstNameSource = InsuredFirstName,   @InsuredLastNameSource = InsuredLastName,    @InsuredAddressSource = InsuredAddress,   @InsuredAddress2Source = InsuredAddress2,   @InsuredCitySource = InsuredCity,   @InsuredStateSource = InsuredState,   @InsuredZipSource = InsuredZip,   @InsuredCountySource = InsuredCounty      FROM ASCOT_AL3PolicyMasterTable_V2 where DnlTrId = @DnlTrID     SELECT @insuredGuid = S.insuredGuid from tblSubmissionGroup S join tblQuotes q on q.SubmissionGroupGuid = S.SubmissionGroupGUID   WHERE q.QuoteGUID = @EndorsementQuoteGuid             --Update insured information at quote level   UPDATE TBLQUOTES     SET InsuredPolicyName = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredPolicyNameSource)), ''), InsuredPolicyName) ,       InsuredAddress1 = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredAddressSource)), ''), InsuredAddress1)  ,    InsuredAddress2 = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredAddress2Source)), ''), InsuredAddress2)  ,    InsuredCity = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredCitySource)), ''), InsuredCity)  ,    InsuredState = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredStateSource)), ''), InsuredState)  ,    InsuredZipCode = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredZipSource)), ''), InsuredZipCode)  ,    InsuredCounty = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredCountySource)), ''), InsuredCounty)     WHERE QuoteGUID = @EndorsementQuoteGuid       UPDATE TBLQUOTES     SET InsuredCorporationName = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredPolicyNameSource)), ''), InsuredCorporationName)     WHERE QuoteGUID = @EndorsementQuoteGuid and InsuredBusinessTypeID = 13 --corporation     UPDATE TBLQUOTES       SET InsuredFirstName = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredFirstNameSource)), ''), InsuredFirstName)  ,    InsuredLastName = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredLastNameSource)), ''), InsuredLastName)      WHERE QuoteGUID = @EndorsementQuoteGuid and InsuredBusinessTypeID = 4 --individual       --update at Inured level      UPDATE tblInsureds      SET PolicyName = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredPolicyNameSource)), ''), PolicyName)    WHERE InsuredGUID = @InsuredGuid     --Check to see if it's an individual or corporation   UPDATE tblInsureds      SET CorporationName = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredPolicyNameSource)), ''), CorporationName)    WHERE InsuredGUID = @InsuredGuid and BusinessTypeID = 13 --corporation     UPDATE tblInsureds      SET FirstName = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredFirstNameSource)), ''), FirstName) ,     LastName = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredLastNameSource)), ''), LastName)    WHERE InsuredGUID = @InsuredGuid and BusinessTypeID = 4 --inidvidual      --updated address at Insuredloc level     --select top 1 * from tblInsuredLocations   UPDATE tblInsuredLocations    SET [Name] = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredPolicyNameSource)), ''), [Name])  ,      Address1 = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredAddressSource)), ''), Address1)  ,    Address2 = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredAddress2Source)), ''), Address2)  ,    City = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredCitySource)), ''), City)  ,    County = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredCountySource)), ''), County) ,     [State] = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredStateSource)), ''), [State]) ,    ZipCode = ISNULL(NULLIF(LTRIM(RTRIM(@InsuredZipSource)), ''), ZipCode)         WHERE InsuredGUID = @InsuredGuid and LocationTypeID = 1--inidvidual        --Copy forward the quote option      INSERT INTO tblQuoteOptions      (              QuoteOptionGUID,              OriginalQuoteOptionGUID,              QuoteGUID,              LineGUID,              CompanyLocationID,              DateCreated,              Bound,              Quote,              AdditionalComments,              CompanyInstallmentID,              AutoApplyFeeLog      )      SELECT NEWID(),              QuoteOptionGUID,              @EndorsementQuoteGuid,              LineGUID,              CompanyLocationID,              GETDATE(),              1,              0,              AdditionalComments,              CompanyInstallmentID,              AutoApplyFeeLog      FROM tblQuoteOptions      WHERE QuoteGuid = @QuoteGuid       --select 'tblQuoteOptions' as tablename, * from tblQuoteOptions  WHERE QuoteGuid = @EndorsementQuoteGuid             DECLARE @PremiumCursorQuoteOptionGuid uniqueidentifier   DECLARE @PremiumCursorChargeCode int   DECLARE @PremiumCursorOfficeID int   DECLARE @PremiumCursorPremium money   DECLARE @PremiumCursorCommissionable bit   DECLARE @PremiumCursorAddedDate datetime     DECLARE EndorsePremiumCursor Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT NewQuoteOptions.QuoteOptionGuid,                                    ISNULL(ChargeCodeTable.ChargeCode, OptionPremiumTable.ChargeCode) AS ChargeCode,                                    OptionPremiumTable.OfficeId,                                    CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL                                           THEN CASE WHEN OptionPremiumTable.ChargeID = 'TERR' THEN @TerrorismPremium ELSE @NewPremium END                                           ELSE CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END                                    END,                                    OptionPremiumTable.Commissionable,                                    GETDATE()                FROM          tblQuotes                INNER JOIN    tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID                INNER JOIN    tblQuoteOptions NewQuoteOptions ON NewQuoteOptions.OriginalQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid                INNER JOIN    tblQuotes NewQuoteOptionsQuote ON NewQuoteOptions.QuoteGUID = NewQuoteOptionsQuote.QuoteGUID                       AND           NewQuoteOptionsQuote.ControlNo = tblQuotes.ControlNo                CROSS APPLY (                                           SELECT TOP 1 SubQ.QuoteID                                           FROM tblQuotes SubQ                                           INNER JOIN tblQuoteOptions SubQO ON SubQ.QuoteGUID = SubQO.QuoteGUID                                           INNER JOIN tblQuoteOptionPremiums ON SubQO.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid                                           WHERE SubQ.ControlNo = tblQuotes.ControlNo                                           AND SubQ.QuoteID <= tblQuotes.QuoteID                                           AND SubQO.LineGuid = tblQuoteOptions.LineGUID                                    ) As TopQuoteIDWithPremiumTable                CROSS APPLY (                                           SELECT DISTINCT SubPC.ChargeID                                           FROM tblQuotes SubQ                                           INNER JOIN tblQuoteOptions SubQO ON SubQ.QuoteGUID = SubQO.QuoteGUID                                           INNER JOIN tblQuoteOptionPremiums ON SubQO.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid                                           INNER JOIN tblFin_PolicyCharges SubPC ON tblQuoteOptionPremiums.ChargeCode = SubPC.ChargeCode                                           WHERE SubQ.QuoteID = TopQuoteIDWithPremiumTable.QuoteID                                    ) AS DistinctChargeIDsTable                CROSS APPLY (                                           SELECT TOP 1 tblQuoteOptionPremiums.OfficeID,                                           tblQuoteOptionPremiums.Commissionable,                                           tblFin_PolicyCharges.ChargeCode,                                           tblFin_PolicyCharges.ChargeID,                                           tblFin_PolicyCharges.StateID                                           FROM tblQuotes SubQ                                           INNER JOIN tblQuoteOptions SubQO ON SubQ.QuoteGUID = SubQO.QuoteGUID                                           INNER JOIN tblQuoteOptionPremiums ON SubQO.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid                                           INNER JOIN tblFin_PolicyCharges ON tblQuoteOptionPremiums.ChargeCode = tblFin_PolicyCharges.ChargeCode                                           WHERE SubQ.QuoteID = TopQuoteIDWithPremiumTable.QuoteID                                           AND SubQO.LineGUID = tblQuoteOptions.LineGUID                                           AND tblFin_PolicyCharges.ChargeID = DistinctChargeIDsTable.ChargeID                                    ) AS OptionPremiumTable                INNER JOIN lstLines ON tblQuoteOptions.LineGuid = lstLines.LineGuid                OUTER APPLY (                                           SELECT Ascot_AL3QuoteDetailTable_V2.Premium,                                           Ascot_AL3QuoteDetailTable_V2.Terrorism,                                           Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,                                           Ascot_AL3QuoteDetailTable_V2.LineCode,                                           Ascot_AL3QuoteDetailTable_V2.StateID                                           FROM   Ascot_AL3QuoteDetailTable_V2                                           WHERE  Ascot_AL3QuoteDetailTable_V2.DnlTrId = @DnlTrID                                    ) AS NewPremiumTable                OUTER APPLY (                                           SELECT TOP 1 SubPC.ChargeCode,                                           SubPC.ChargeID                                           FROM tblFin_PolicyCharges SubPC                                           WHERE SubPC.ChargeID = OptionPremiumTable.ChargeID                                           AND SubPC.StateID = NewPremiumTable.StateID                                    ) AS ChargeCodeTable                OUTER APPLY (                                           SELECT Ascot_AL3PolicyMasterTable_V2.CompanyCode AS CompanyLocationCode,                                           Ascot_AL3PolicyMasterTable_V2.LineCode,                                           Ascot_AL3PolicyMasterTable_V2.PremiumState                                           FROM Ascot_AL3PolicyMasterTable_V2                                           WHERE Ascot_AL3PolicyMasterTable_V2.DnlTrId = @DnlTrId                                    ) AS PolicyLevelImportTable                WHERE  tblQuotes.QuoteGuid = @QuoteGuid                AND           CASE WHEN NewPremiumTable.LineCode IS NULL                                    THEN CASE WHEN lstLines.LineID = PolicyLevelImportTable.LineCode THEN 1 ELSE 0 END                                    ELSE CASE WHEN lstLines.LineID = NewPremiumTable.LineCode THEN 1 ELSE 0 END                             END = 1                AND           CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL                                    THEN CASE WHEN tblQuoteOptions.CompanyLocationID = PolicyLevelImportTable.CompanyLocationCode THEN 1 ELSE 0 END                                    ELSE CASE WHEN tblQuoteOptions.CompanyLocationID = NewPremiumTable.CompanyLocationCode THEN 1 ELSE 0 END                             END = 1     OPEN EndorsePremiumCursor   FETCH EndorsePremiumCursor INTO @PremiumCursorQuoteOptionGuid, @PremiumCursorChargeCode, @PremiumCursorOfficeID, @PremiumCursorPremium, @PremiumCursorCommissionable, @PremiumCursorAddedDate     WHILE @@Fetch_status=0   BEGIN              INSERT INTO tblQuoteOptionPremiums    (     QuoteOptionGuid,     ChargeCode,     OfficeID,     Premium,     AnnualPremium,     Commissionable,     Added    )    VALUES    (     @PremiumCursorQuoteOptionGuid,     @PremiumCursorChargeCode,     @PremiumCursorOfficeID,     @PremiumCursorPremium,     @PremiumCursorPremium,     @PremiumCursorCommissionable,     @PremiumCursorAddedDate    )      FETCH EndorsePremiumCursor INTO @PremiumCursorQuoteOptionGuid, @PremiumCursorChargeCode, @PremiumCursorOfficeID, @PremiumCursorPremium, @PremiumCursorCommissionable, @PremiumCursorAddedDate   END--WHILE @@Fetch_status=0     CLOSE EndorsePremiumCursor    DEALLOCATE EndorsePremiumCursor     --for imports wherre fee amounts are given by the import source   IF EXISTS(SELECT * FROM Ascot_AL3FeesTable WHERE Ascot_AL3FeesTable.DnlTrId = @DnlTrId)   BEGIN      INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, FlatRate, Splittable, AutoApplied)    SELECT qo.QuoteOptionGUID,      CompanyLineFeeSetupIDTable.CompanyFeeID,      Ascot_AL3FeesTable.ChargeCode,      @OfficeID,      tblCompanyLines.CompanyLineGUID,      3,      --(4/2/24) updated to dynamically set payable bit      CompanyLineFeeSetupIDTable.Payable, --payable      Ascot_AL3FeesTable.FeeAmount,       0,      0    FROM  Ascot_AL3FeesTable    INNER JOIN lstLines FeeLine ON Ascot_AL3FeesTable.LineID = FeeLine.LineID    INNER JOIN tblCompanyLocations FeeCompanyLocation ON FeeCompanyLocation.CompanyLocationCode = Ascot_AL3FeesTable.CompanyLocationCode    INNER JOIN tblQuotes q ON q.QuoteGUID = @EndorsementQuoteGuid    INNER JOIN tblQuoteOptions qo ON q.QuoteGUID = qo.QuoteGUID     AND  qo.LineGUID = FeeLine.LineGUID     AND  qo.CompanyLocationID = Ascot_AL3FeesTable.CompanyLocationCode    INNER JOIN tblCompanyLines ON tblCompanyLines.LineGUID = FeeLine.LineGUID     AND  tblCompanyLines.CompanyLocationGUID = FeeCompanyLocation.CompanyLocationGUID     AND  tblCompanyLines.StateID = Ascot_AL3FeesTable.StateID     AND  CASE WHEN FeeLine.LineGUID <> q.LineGUID        THEN CASE WHEN tblCompanyLines.ParentCompanyLineGUID IS NOT NULL THEN 1 ELSE 0 END        ELSE CASE WHEN tblCompanyLines.ParentCompanyLineGUID IS NULL THEN 1 ELSE 0 END       END = 1    CROSS APPLY (        SELECT TOP 1 tblCompanyPolicyCharges.CompanyFeeID,            tblCompanyPolicyCharges.Payable        FROM tblCompanyPolicyCharges        WHERE tblCompanyPolicyCharges.ChargeCode = Ascot_AL3FeesTable.ChargeCode        AND ISNULL(tblCompanyPolicyCharges.CompanyLocationGuid, FeeCompanyLocation.CompanyLocationGUID) = FeeCompanyLocation.CompanyLocationGUID        AND ISNULL(tblCompanyPolicyCharges.LineGuid, FeeLine.LineGUID) = FeeLine.LineGUID        AND ISNULL(tblCompanyPolicyCharges.StateID, Ascot_AL3FeesTable.StateID) = Ascot_AL3FeesTable.StateID        AND DATEDIFF(d, tblCompanyPolicyCharges.Effective, q.EffectiveDate) >= 0        ORDER BY tblCompanyPolicyCharges.Effective DESC,           (CASE WHEN tblCompanyPolicyCharges.CompanyLocationGuid IS NOT NULL THEN 1 ELSE 0 END +           CASE WHEN tblCompanyPolicyCharges.LineGuid IS NOT NULL THEN 1 ELSE 0 END +           CASE WHEN tblCompanyPolicyCharges.StateID IS NOT NULL THEN 1 ELSE 0 END) DESC       ) AS CompanyLineFeeSetupIDTable    WHERE Ascot_AL3FeesTable.DnlTrId = @DnlTrId     END     --TFS 89800  SQL Ascot added spautoapplyfees   IF @AutoApplyFees=1   BEGIN        DECLARE @FeeCursorQuoteOptionGuid uniqueidentifier      DECLARE EndorseFeeCursor Cursor FAST_FORWARD FORWARD_ONLY    FOR SELECT tblQuoteOptions.QuoteOptionGuid     FROM tblQuotes     INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID     WHERE tblQuotes.QuoteGuid = @EndorsementQuoteGuid      OPEN EndorseFeeCursor    FETCH EndorseFeeCursor INTO @FeeCursorQuoteOptionGuid      WHILE @@Fetch_status=0    BEGIN       exec spAutoApplyFees @PremiumCursorQuoteOptionGuid       FETCH EndorseFeeCursor INTO @FeeCursorQuoteOptionGuid    END--WHILE @@Fetch_status=0      CLOSE EndorseFeeCursor     DEALLOCATE EndorseFeeCursor       END     IF @BrokerCommissionFeeChargeCode IS NOT NULL   BEGIN      DECLARE @BrokerCommissionPercent decimal(9, 8)    DECLARE @BrokerFeeAppliesToLineGuid uniqueidentifier    DECLARE @BrokerFeeAppliesToCompanyLineGuid uniqueidentifier      SELECT @BrokerCommissionPercent = Ascot_AL3PolicyMasterTable_v2.BrokerCommissionPercent,      @BrokerFeeAppliesToLineGuid = lstLines.LineGUID,      @BrokerFeeAppliesToCompanyLineGuid = CL.CompanyLineGuid    FROM Ascot_AL3PolicyMasterTable_v2    INNER JOIN lstLines ON Ascot_AL3PolicyMasterTable_v2.LineCode = lstLines.LineID    Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode    Inner Join  tblCompanyLines CL on CL.LineGUID = lstLines.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and Ascot_AL3PolicyMasterTable_v2.StateOfIssuance = CL.StateID    WHERE DnlTrId = @DnlTrId      DECLARE @BrokerCommissionCompanyFeeID int    SELECT @BrokerCommissionCompanyFeeID = CompanyFeeID    FROM tblCompanyPolicyCharges    WHERE tblCompanyPolicyCharges.ChargeCode = @BrokerCommissionFeeChargeCode    AND tblCompanyPolicyCharges.LineGuid = @BrokerFeeAppliesToLineGuid      IF @BrokerCommissionCompanyFeeID IS NULL    BEGIN       raiserror('No CompanyFeeID setup found for ChargeCode and Line', 15, 1) with nowait;      END      INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, PercentageRate, Splittable, AutoApplied)    SELECT tblQuoteOptions.QuoteOptionGuid,      @BrokerCommissionCompanyFeeID,      @BrokerCommissionFeeChargeCode,      @OfficeID,      @BrokerFeeAppliesToCompanyLineGuid,      3,      0,      @BrokerCommissionPercent,       0,      0    FROM tblQuoteOptions    WHERE tblQuoteOptions.QuoteGuid = @EndorsementQuoteGuid       END          --Update Quote Option Data      UPDATE tblQuoteOptions SET Bound = 1 WHERE QuoteGuid = @EndorsementQuoteGuid     --If we have premium in tblQuoteOptionsPremiums or fees in tblQuoteOptionCharges that add up to something other than 0 then continue with the invoice generation and transfer to accounting   DECLARE @QuoteOptionPremium money = 0   SELECT @QuoteOptionPremium = SUM(tblQuoteOptionPremiums.Premium)   FROM tblQuotes   INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID   INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid   WHERE tblQuotes.QuoteGuid = @EndorsementQuoteGuid     DECLARE @QuoteOptionCharges money = 0   SELECT @QuoteOptionCharges = SUM(tblQuoteOptionCharges.amount)   FROM tblQuotes   INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID   INNER JOIN tblQuoteOptionCharges ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionCharges.QuoteOptionGuid   WHERE tblQuotes.QuoteGuid = @EndorsementQuoteGuid     IF @QuoteOptionPremium <> 0 OR @QuoteOptionCharges <> 0   BEGIN      --Send invoices to accounting (AccountingTransfer.vb)    DECLARE @InvoiceNum INT      DECLARE @NumInstallments int    DECLARE @IMSInstallmentPlanID int = NULL      SELECT @NumInstallments = ISNULL(P.NumInstallments, 1)    FROM Ascot_AL3PolicyMasterTable_v2 P    WHERE P.DnlTrId = @DnlTrId      DECLARE @InstallmentPlanMappingTable TABLE    (     OptionName varchar(200),     SafeHarborNumInstallments int    )      INSERT INTO @InstallmentPlanMappingTable VALUES('Quarterly', 4)    INSERT INTO @InstallmentPlanMappingTable VALUES('Semi-Annual', 2)      SELECT TOP 1 @IMSInstallmentPlanID = tblCompanyLineInstallments.ID    FROM tblCompanyLineInstallments    INNER JOIN tblCompanyLines ON tblCompanyLineInstallments.CompanyLineID = tblCompanyLines.CompanyLineID    INNER JOIN @InstallmentPlanMappingTable T ON tblCompanyLineInstallments.OptionName = T.OptionName    WHERE tblCompanyLines.CompanyLineGUID = @CompanyLineGuid    AND T.SafeHarborNumInstallments = @NumInstallments          DECLARE @FirstInvoicePercentage decimal(20, 19)    DECLARE @FirstInvoiceTerm int    DECLARE @FirstInvoiceBillingCode varchar(100)    DECLARE @FirstInvoiceFromEffectiveDate bit    DECLARE @FirstInvoiceFromBillingDate bit    DECLARE @InstallmentPercentage decimal(20, 19)    DECLARE @InstallmentTerms int--how many days/months between installments    DECLARE @InstallmentFromEffectiveDate datetime    DECLARE @InstallmentFromBillingDate datetime    DECLARE @UseMonth bit--defines if months are used for @InstallmentTerms instead of days      IF @IMSInstallmentPlanID IS NOT NULL    BEGIN       SELECT @FirstInvoicePercentage = tblCompanyLineInstallments.DownpaymentPercentage,       @FirstInvoiceTerm = tblCompanyLineInstallments.DownpaymentTerm,       @FirstInvoiceBillingCode = lstBillingTypes.BillingCode,       @FirstInvoiceFromEffectiveDate = tblCompanyLineInstallments.DownpaymentFromEffectiveDate,       @FirstInvoiceFromBillingDate = tblCompanyLineInstallments.DownpaymentFromDateBilled,                  @InstallmentPercentage = ((1.0000 - tblCompanyLineInstallments.DownpaymentPercentage) / tblCompanyLineInstallments.NumPayments),       @InstallmentTerms = tblCompanyLineInstallments.InstallmentTerms,       @InstallmentFromEffectiveDate = tblCompanyLineInstallments.InstallmentFromEffectiveDate,       @InstallmentFromBillingDate = tblCompanyLineInstallments.InstallmentFromDateBilled,       @UseMonth = tblCompanyLineInstallments.UseMonth       FROM tblCompanyLineInstallments     LEFT JOIN lstBillingTypes ON tblCompanyLineInstallments.DownpaymentBillingTypeID = lstBillingTypes.BillingTypeID     WHERE ID = @IMSInstallmentPlanID      END    ELSE    BEGIN       DECLARE @ProducerPaymentMeasuredFrom_Endorsement varchar(10)     DECLARE @ProducerPaymentTermDays int = 0     SELECT @ProducerPaymentMeasuredFrom_Endorsement = tblCompanyLineTermsOfPayment.ProducerPaymentMeasuredFrom_Endorsement,       @ProducerPaymentTermDays = tblCompanyLineTermsOfPayment.DefaultProducerTermsOfPayment_Endorsement     FROM tblCompanyLines     INNER JOIN tblCompanyLineTermsOfPayment ON tblCompanyLines.CompanyLineID = tblCompanyLineTermsOfPayment.CompanyLineID     WHERE tblCompanyLines.CompanyLineGUID = @CompanyLineGuid     AND DATEDIFF(d, tblCompanyLineTermsOfPayment.Effective, @PolicyEffectiveDate) >= 0     ORDER BY Effective DESC     --E=Effective     --G=GAAP     --M=End of Month (billed?)     --B=Billed       DECLARE @TransactionMonths int = DATEDIFF(m, @TransEffDate, @ExpirationDate)       SET @FirstInvoicePercentage = 1.0000 / @NumInstallments     SET @FirstInvoiceTerm = @ProducerPaymentTermDays     SET @FirstInvoiceBillingCode = @BillingCode     SET @FirstInvoiceFromEffectiveDate = 1     SET @FirstInvoiceFromBillingDate = 0       SET @InstallmentPercentage = @FirstInvoicePercentage     SET @InstallmentTerms = @TransactionMonths / @NumInstallments     SET @InstallmentFromEffectiveDate = 1     SET @InstallmentFromBillingDate = 0     SET @UseMonth = 1       IF @ProducerPaymentMeasuredFrom_Endorsement = 'E'     BEGIN        SET @FirstInvoiceFromEffectiveDate = 1      SET @FirstInvoiceFromBillingDate = 0        SET @InstallmentFromEffectiveDate = 1      SET @InstallmentFromBillingDate = 0       END             IF @ProducerPaymentMeasuredFrom_Endorsement = 'B'     BEGIN        SET @FirstInvoiceFromEffectiveDate = 0      SET @FirstInvoiceFromBillingDate = 1        SET @InstallmentFromEffectiveDate = 0      SET @InstallmentFromBillingDate = 1       END       IF @InstallmentTerms < 1     BEGIN        DECLARE @TransactionDays int = DATEDIFF(d, @TransEffDate, @ExpirationDate)      SET @InstallmentTerms = @TransactionDays / @NumInstallments      SET @UseMonth = 0       END      END      IF EXISTS(SELECT * FROM #InvoiceInstallmentsTable)    BEGIN       DELETE FROM #InvoiceInstallmentsTable      END      WHILE (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) < @NumInstallments    BEGIN       IF (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) = 0     BEGIN        DECLARE @CalculatedDueDate datetime        IF @FirstInvoiceFromEffectiveDate = 1      BEGIN         SET @CalculatedDueDate = DATEADD(d, @FirstInvoiceTerm, @TransEffDate)        END      ELSE IF @FirstInvoiceFromBillingDate = 1      BEGIN         SET @CalculatedDueDate = DATEADD(d, @FirstInvoiceTerm, @DateBound)        END        --downpayment info or single invoice, use first invoice vars      INSERT INTO #InvoiceInstallmentsTable VALUES      (       @EndorsementQuoteID,        @TransEffDate,        @ExpirationDate,        @NumInstallments,        (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) + 1,        @CalculatedDueDate,       @FirstInvoiceBillingCode,       @FirstInvoicePercentage      )       END     ELSE     BEGIN        DECLARE @CurrentInstallmentNumber int = (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) + 1        IF @InstallmentFromEffectiveDate = 1      BEGIN         IF @UseMonth = 1       BEGIN                   SET @CalculatedDueDate = DATEADD(m, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @TransEffDate)         END       ELSE       BEGIN                   SET @CalculatedDueDate = DATEADD(d, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @TransEffDate)         END        END      ELSE IF @InstallmentFromBillingDate = 1      BEGIN         IF @UseMonth = 1       BEGIN                   SET @CalculatedDueDate = DATEADD(m, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @DateBound)         END       ELSE       BEGIN                   SET @CalculatedDueDate = DATEADD(d, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @DateBound)         END        END        INSERT INTO #InvoiceInstallmentsTable VALUES      (       @EndorsementQuoteID,        @TransEffDate,        @ExpirationDate,        @NumInstallments,        @CurrentInstallmentNumber,        @CalculatedDueDate,       @BillingCode,       @InstallmentPercentage      )       END      END    --  IF (SELECT SUM(ISNULL(tblQuoteOptionPremiums.Premium, 0)) FROM tblQuoteOptions INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGuid = tblQuoteOptionPremiums.QuoteOptionGuid WHERE tblQuoteOptions.QuoteGuid = @EndorsementQuoteGuid) <> 0  --  BEGIN      --need to loop here for installments    DECLARE @ProcessedInvoiceCount int = 0    WHILE @ProcessedInvoiceCount < @NumInstallments    BEGIN       DECLARE @InvoiceProcessInstallmentMod decimal(20, 19) = 1.0     DECLARE @InvoiceProcessInstallmentDueDate datetime = NULL     DECLARE @InvoiceProcessInstallmentBillingCode varchar(100) = NULL       SELECT @InvoiceProcessInstallmentMod = I.InstallmentMod,       @InvoiceProcessInstallmentDueDate = I.InstallmentDueDate,       @InvoiceProcessInstallmentBillingCode = I.BillingCode       FROM #InvoiceInstallmentsTable I     WHERE (I.Installment - 1) = @ProcessedInvoiceCount                     EXECUTE spAccountingTransfer     0, --@Debug     @EndorsementQuoteGuid, --@QuoteGuid     @UserGuid, --@UserGuid     @OfficeID, --@OfficeID     1, --@IsEndorsement     @InvoiceProcessInstallmentMod, --@InstallmentBillingPremiumModFactor     @InvoiceProcessInstallmentDueDate, --@DueDate     @DateBound, --@DateBilled     NULL, --@Amount     @InvoiceProcessInstallmentBillingCode, --@BillingCode     '', --@InvoiceComments     NULL, --@ModifiesInvoiceNum     NULL, --@BillToAdditionalInterestID     @InvoiceNum OUTPUT         --Loop through all the fees on the policy     DECLARE @QuoteOptionChargeAmount MONEY     DECLARE @QuoteOptionFeeID INT       DECLARE db_cursor CURSOR FOR        SELECT DISTINCT tblQuoteOptionCharges.Amount, tblQuoteOptionCharges.OptionFeeID      FROM tblQuotes      INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID      INNER JOIN tblQuoteOptionCharges ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionCharges.QuoteOptionGuid      INNER JOIN tblQuoteDetails ON tblQuotes.QuoteGUID = tblQuoteDetails.QuoteGUID      INNER JOIN tblCompanyLines ON tblQuoteDetails.CompanyLineGUID = tblCompanyLines.CompanyLineGUID AND tblQuoteOptions.LineGUID = tblCompanyLines.LineGUID      WHERE (tblQuotes.QuoteGUID = @EndorsementQuoteGuid)      AND (tblQuoteOptions.Bound = 1)      AND (tblQuoteOptionCharges.WaivedByUserGuid IS NULL)       OPEN db_cursor        FETCH NEXT FROM db_cursor INTO @QuoteOptionChargeAmount, @QuoteOptionFeeID       WHILE @@FETCH_STATUS = 0        BEGIN            EXEC spAccountingTransfer_Fees       0, --@Debug       @QuoteOptionFeeID, --@OptionFeeID       @InvoiceNum, --@InvoiceNum       @QuoteOptionChargeAmount, --@Amount       @InvoiceProcessInstallmentBillingCode --@BillingCode       FETCH NEXT FROM db_cursor INTO @QuoteOptionChargeAmount, @QuoteOptionFeeID     END          CLOSE db_cursor        DEALLOCATE db_cursor       --Post to Journal     EXEC spFin_PostInvoice @InvoiceNum       exec GreyHawk_AfterPostInvoice @invoicenum--Posts reinsurance data       SET @ProcessedInvoiceCount = @ProcessedInvoiceCount + 1      END--WHILE @ProcessedInvoiceCount < @NumInstallments      --Verify Premiums    EXEC spAccountingTransfer_VerifyPremiumsTransferred       @EndorsementQuoteGuid, --@quoteGuid       0, --@debug       0 --@reVerify      --Verify Fees    EXEC spAccountingTransfer_VerifyFeesTransferred @EndorsementQuoteGuid --@quoteGuid      --Verify Invoices were created    DECLARE @InvoiceCount INT    SELECT @InvoiceCount = COUNT(*) FROM tblFin_Invoices WHERE QuoteID = (SELECT QuoteID FROM tblQuotes WHERE QuoteGuid = @EndorsementQuoteGuid) AND Failed = 0      IF (@InvoiceCount <> @NumInstallments)    BEGIN     ROLLBACK TRANSACTION     RETURN --Raise error here    END     END--IF @QuoteOptionPremium <> 0 OR @QuoteOptionCharges <> 0     DECLARE @OptionPremiumCheck money   DECLARE @BilledPremiumCheck money     SELECT @OptionPremiumCheck = SUM(tblQuoteOptionPremiums.Premium)   FROM tblQuotes   INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGuid = tblQuoteOptions.QuoteGuid   INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid   WHERE tblQuotes.QuoteID = @EndorsementQuoteID     SELECT @BilledPremiumCheck = SUM(tblFIn_InvoiceDetails.AmtBilled)   FROM tblFin_Invoices   INNER JOIN tblFin_InvoiceDetails ON tblFin_Invoices.InvoiceNum = tblFin_InvoiceDetails.InvoiceNum   WHERE tblFin_Invoices.Failed = 0   AND tblFin_InvoiceDetails.ChargeType = 'P'   AND tblFin_Invoices.QuoteID = @EndorsementQuoteID     DECLARE @BadPremiumErrorMessage varchar(200)   SET @BadPremiumErrorMessage = 'Invoice premium is too different from option premium.' +           ' InvoicePremium: ' + dbo.FormatNumber(@BilledPremiumCheck, 2) +            '; OptionPremium ' + dbo.FormatNumber(@OptionPremiumCheck, 2) +           '; InstallmentMod: ' + dbo.FormatNumber(@InvoiceProcessInstallmentMod, 10)     IF ABS(@OptionPremiumCheck - @BilledPremiumCheck) > 3   BEGIN      RAISERROR(@BadPremiumErrorMessage,15,1)     END    -- END--IF ISNULL(@NewPremium, 0) <> 0     --Update Quote Data   UPDATE tblQuotes SET DateIssued = GETDATE(),        IssuedByUserID = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),        DateBound = GETDATE(),        BoundByUserId = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),        QuoteStatusId = CASE WHEN @CurrentQuoteStatusID = 12 THEN 12 ELSE 3 END,        ExpirationDate = @ExpirationDate   WHERE QuoteGuid = @EndorsementQuoteGuid   AND DateIssued IS NULL        UPDATE Ascot_AL3PolicyMasterTable_v2 SET CreatedQuoteID = @EndorsementQuoteID   FROM Ascot_AL3PolicyMasterTable_v2   WHERE DnlTrID = @DnlTrID        COMMIT TRANSACTION     DROP TABLE #InvoiceInstallmentsTable    END
Ascot_CancelPolicy_Captive	  Create PROCEDURE [dbo].[Ascot_CancelPolicy_Captive]  (        @QuoteGuid UNIQUEIDENTIFIER,        @TransEffDate DATETIME,        @Comment VARCHAR(50),        @EndorsementCalcType CHAR(1),        @NewPremium MONEY,        @QuoteStatusReasonID INT,        @DateBound DATETIME,        @UserGuid UNIQUEIDENTIFIER,        @BillingCode CHAR(5),        @AutoApplyFees bit,     @DnlTrId uniqueidentifier,     @BrokerCommissionFeeChargeCode int,     @TerrorismPremium money,     @CopyOptions BIT    )  AS  BEGIN          SET NOCOUNT ON          DECLARE @ControlNumber INT     DECLARE @EndorsementQuoteID INT     DECLARE @EndorsementQuoteGuid UNIQUEIDENTIFIER        DECLARE @OfficeID INT     DECLARE @CompanyLineGuid uniqueidentifier     DECLARE @PolicyEffectiveDate datetime          SELECT              @ControlNumber = Q.ControlNo,              @OfficeID = tblClientOffices.OfficeID,     @CompanyLineGuid = Q.CompanyLineGuid,     @PolicyEffectiveDate = Q.EffectiveDate    FROM tblQuotes Q    INNER JOIN tblClientOffices ON Q.QuotingLocationGuid = tblClientOffices.OfficeGuid    WHERE Q.QuoteGuid = @QuoteGuid       --Check for data errors and throw exception     IF (NOT EXISTS(SELECT * FROM lstQuoteStatusReasons where QuoteStatusID = 7 AND ID = @QuoteStatusReasonID))    RAISERROR('Invalid Quote Status Reason Id',15,1)          BEGIN TRANSACTION      IF OBJECT_ID('tempdb..#InvoiceInstallmentsTable') IS NOT NULL    BEGIN       DROP TABLE #InvoiceInstallmentsTable      END      CREATE TABLE #InvoiceInstallmentsTable    (     QuoteID int,     EffectiveDate datetime,     ExpirationDate datetime,     NumInstallments int,     Installment int,     InstallmentDueDate datetime,     BillingCode varchar(100),     InstallmentMod decimal(20, 19)    )          DECLARE @CatchNewQuoteGuid TABLE   (    NewQuoteGuid uniqueidentifier   )        --Create the endorsement record   INSERT INTO @CatchNewQuoteGuid        EXEC  spCopyQuote                    @QuoteGuid = @QuoteGuid,                    @TransactionTypeID = 'C',                    @QuoteStatusID = 7,                    @QuoteStatusReasonID = @QuoteStatusReasonID,                    @EndorsementEffective = @TransEffDate,                    @EndtRequestDate = @DateBound,                    @EndorsementComment = @Comment,                    @EndorsementCalculationType = @EndorsementCalcType,        @copyOptions = @copyOptions             --Get the Endorsement Quote Guid        SELECT TOP 1 @EndorsementQuoteGuid = Q.QuoteGuid, @EndorsementQuoteID = Q.QuoteID FROM tblQuotes Q WHERE ControlNo = @ControlNumber ORDER BY QuoteId DESC      --TFS 87687  Call Ascot custom spcopyquote.    EXEC  GreyHawk_spCopyQuote     @newQuoteGuid = @EndorsementQuoteGuid,     @OldQuoteGuid = @QuoteGuid              --Copy forward the quote option   INSERT INTO      tblQuoteOptions      (              QuoteOptionGUID,              OriginalQuoteOptionGUID,              QuoteGUID,              LineGUID,              CompanyLocationID,              DateCreated,              Bound,              Quote,              AdditionalComments,              CompanyInstallmentID,              AutoApplyFeeLog      )      SELECT              NEWID(),              QuoteOptionGUID,              @EndorsementQuoteGuid,              LineGUID,              CompanyLocationID,              GETDATE(),              1,              0,              AdditionalComments,              CompanyInstallmentID,              AutoApplyFeeLog      FROM              tblQuoteOptions      WHERE              QuoteGUID = @QuoteGuid       DECLARE @PremiumCursorQuoteOptionGuid uniqueidentifier   DECLARE @PremiumCursorChargeCode int   DECLARE @PremiumCursorOfficeID int   DECLARE @PremiumCursorPremium money   DECLARE @PremiumCursorCommissionable bit   DECLARE @PremiumCursorAddedDate datetime       DECLARE EndorsePremiumCursor Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT NewQuoteOptions.QuoteOptionGuid,      ISNULL(ChargeCodeTable.ChargeCode, OptionPremiumTable.ChargeCode) AS ChargeCode,      OptionPremiumTable.OfficeId,      CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL       THEN CASE WHEN OptionPremiumTable.ChargeID = 'TERR' THEN @TerrorismPremium ELSE @NewPremium END       ELSE CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END      END,      OptionPremiumTable.Commissionable,      GETDATE()    FROM tblQuotes    INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID    INNER JOIN tblQuoteOptions NewQuoteOptions ON NewQuoteOptions.OriginalQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid    INNER JOIN tblQUotes NewQuoteOptionsQuote ON NewQuoteOptions.QuoteGuid = NewQuoteOptionsQuote.QuoteGuid -- TFS 89958  Added additional check to make sure quoteoptions are comming from the right control number.  We were getting    -- duplicate quoteoptions prem error on some polciies prior to thsi additional check in BOLT policies.    CROSS APPLY (        SELECT TOP 1 SubQ.QuoteID        FROM tblQuotes SubQ        INNER JOIN tblQuoteOptions SubQO ON SubQ.QuoteGUID = SubQO.QuoteGUID        INNER JOIN tblQuoteOptionPremiums ON SubQO.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid        WHERE SubQ.ControlNo = tblQuotes.ControlNo        AND SubQ.QuoteID <= tblQuotes.QuoteID        AND SubQO.LineGuid = tblQuoteOptions.LineGUID       ) As TopQuoteIDWithPremiumTable    CROSS APPLY (        SELECT DISTINCT SubPC.ChargeID        FROM tblQuotes SubQ        INNER JOIN tblQuoteOptions SubQO ON SubQ.QuoteGUID = SubQO.QuoteGUID        INNER JOIN tblQuoteOptionPremiums ON SubQO.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid        INNER JOIN tblFin_PolicyCharges SubPC ON tblQuoteOptionPremiums.ChargeCode = SubPC.ChargeCode        WHERE SubQ.QuoteID = TopQuoteIDWithPremiumTable.QuoteID       ) AS DistinctChargeIDsTable    CROSS APPLY (        SELECT TOP 1 tblQuoteOptionPremiums.OfficeID,           tblQuoteOptionPremiums.Commissionable,           tblFin_PolicyCharges.ChargeCode,           tblFin_PolicyCharges.ChargeID,           tblFin_PolicyCharges.StateID        FROM tblQuotes SubQ        INNER JOIN tblQuoteOptions SubQO ON SubQ.QuoteGUID = SubQO.QuoteGUID        INNER JOIN tblQuoteOptionPremiums ON SubQO.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid        INNER JOIN tblFin_PolicyCharges ON tblQuoteOptionPremiums.ChargeCode = tblFin_PolicyCharges.ChargeCode        WHERE SubQ.QuoteID = TopQuoteIDWithPremiumTable.QuoteID        AND SubQO.LineGUID = tblQuoteOptions.LineGUID        AND tblFin_PolicyCharges.ChargeID = DistinctChargeIDsTable.ChargeID       ) AS OptionPremiumTable    INNER JOIN lstLines ON tblQuoteOptions.LineGuid = lstLines.LineGuid    OUTER APPLY (        SELECT Ascot_AL3QuoteDetailTable_V2.Premium,          Ascot_AL3QuoteDetailTable_V2.Terrorism,          Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,          Ascot_AL3QuoteDetailTable_V2.LineCode,          Ascot_AL3QuoteDetailTable_V2.StateID        FROM Ascot_AL3QuoteDetailTable_V2        WHERE Ascot_AL3QuoteDetailTable_V2.DnlTrId = @DnlTrID       ) AS NewPremiumTable    OUTER APPLY (        SELECT TOP 1 SubPC.ChargeCode,           SubPC.ChargeID        FROM tblFin_PolicyCharges SubPC        WHERE SubPC.ChargeID = OptionPremiumTable.ChargeID        AND SubPC.StateID = NewPremiumTable.StateID       ) AS ChargeCodeTable    OUTER APPLY (        SELECT ASCOT_AL3PolicyMasterTable_V2.CompanyCode AS CompanyLocationCode,          ASCOT_AL3PolicyMasterTable_V2.LineCode,          ASCOT_AL3PolicyMasterTable_V2.PremiumState        FROM ASCOT_AL3PolicyMasterTable_V2        WHERE ASCOT_AL3PolicyMasterTable_V2.DnlTrId = @DnlTrId       ) AS PolicyLevelImportTable    WHERE tblQuotes.QuoteGuid = @QuoteGuid    AND  CASE WHEN NewPremiumTable.LineCode IS NULL       THEN CASE WHEN lstLines.LineID = PolicyLevelImportTable.LineCode THEN 1 ELSE 0 END       ELSE CASE WHEN lstLines.LineID = NewPremiumTable.LineCode THEN 1 ELSE 0 END      END = 1    AND  CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL       THEN CASE WHEN tblQuoteOptions.CompanyLocationID = PolicyLevelImportTable.CompanyLocationCode THEN 1 ELSE 0 END       ELSE CASE WHEN tblQuoteOptions.CompanyLocationID = NewPremiumTable.CompanyLocationCode THEN 1 ELSE 0 END      END = 1    AND  CASE WHEN NewPremiumTable.StateID IS NULL       THEN CASE WHEN OptionPremiumTable.StateID = PolicyLevelImportTable.PremiumState THEN 1 ELSE 0 END       ELSE CASE WHEN OptionPremiumTable.StateID = NewPremiumTable.StateID THEN 1 ELSE 0 END      END = 1    AND  NewQuoteOptionsQuote.ControlNo = tblQuotes.ControlNo -- TFS 89958  Added additional check to make sure quoteoptions are comming from the right control number.  We were getting    -- duplicate quoteoptions prem error on some polciies prior to thsi additional check in BOLT policies.     /*    SELECT NewQuoteOptions.QuoteOptionGuid,      ISNULL(ChargeCodeTable.ChargeCode, tblFin_PolicyCharges.ChargeCode) AS ChargeCode,      tblQuoteOptionPremiums.OfficeId,      CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL       THEN CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN @TerrorismPremium ELSE @NewPremium END       ELSE CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END      END,      tblQuoteOptionPremiums.Commissionable,      GETDATE()    FROM tblQuoteOptions     INNER JOIN tblQuoteOptions NewQuoteOptions ON NewQuoteOptions.OriginalQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid    INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGuid = tblQuoteOptionPremiums.QuoteOptionGuid    INNER JOIN tblFin_PolicyCharges ON tblQuoteOptionPremiums.ChargeCode = tblFin_PolicyCharges.ChargeCode    INNER JOIN lstLines ON tblQuoteOptions.LineGuid = lstLines.LineGuid    OUTER APPLY (        SELECT ISNULL(Ascot_AL3QuoteDetailTable_v2.Premium, 0) AS Premium,          ISNULL(Ascot_AL3QuoteDetailTable_v2.Terrorism, 0) AS Terrorism,          Ascot_AL3QuoteDetailTable_v2.CompanyLocationCode,          Ascot_AL3QuoteDetailTable_v2.LineCode,          Ascot_AL3QuoteDetailTable_v2.StateID        FROM Ascot_AL3QuoteDetailTable_v2        WHERE Ascot_AL3QuoteDetailTable_v2.DnlTrId = @DnlTrID       ) AS NewPremiumTable    OUTER APPLY (        SELECT TOP 1 SubPC.ChargeCode,           SubPC.ChargeID        FROM tblFin_PolicyCharges SubPC        WHERE SubPC.ChargeID = tblFin_PolicyCharges.ChargeID        AND SubPC.StateID = NewPremiumTable.StateID       ) AS ChargeCodeTable    OUTER APPLY (        SELECT Ascot_AL3PolicyMasterTable_v2.CompanyCode AS CompanyLocationCode,          Ascot_AL3PolicyMasterTable_v2.LineCode        FROM Ascot_AL3PolicyMasterTable_v2        WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId = @DnlTrId       ) AS PolicyLevelImportTable    WHERE tblQuoteOptions.QuoteGuid = @QuoteGuid    AND  CASE WHEN NewPremiumTable.LineCode IS NULL       THEN CASE WHEN lstLines.LineID = PolicyLevelImportTable.LineCode THEN 1 ELSE 0 END       ELSE CASE WHEN lstLines.LineID = NewPremiumTable.LineCode THEN 1 ELSE 0 END      END = 1    AND  CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL       THEN CASE WHEN tblQuoteOptions.CompanyLocationID = PolicyLevelImportTable.CompanyLocationCode THEN 1 ELSE 0 END       ELSE CASE WHEN tblQuoteOptions.CompanyLocationID = NewPremiumTable.CompanyLocationCode THEN 1 ELSE 0 END      END = 1   */           OPEN EndorsePremiumCursor   FETCH EndorsePremiumCursor INTO @PremiumCursorQuoteOptionGuid, @PremiumCursorChargeCode, @PremiumCursorOfficeID, @PremiumCursorPremium, @PremiumCursorCommissionable, @PremiumCursorAddedDate     WHILE @@Fetch_status=0   BEGIN      INSERT INTO tblQuoteOptionPremiums    (     QuoteOptionGuid,     ChargeCode,     OfficeID,     Premium,     AnnualPremium,     Commissionable,     Added    )    VALUES    (     @PremiumCursorQuoteOptionGuid,     @PremiumCursorChargeCode,     @PremiumCursorOfficeID,     @PremiumCursorPremium,     @PremiumCursorPremium,     @PremiumCursorCommissionable,     @PremiumCursorAddedDate    )      FETCH EndorsePremiumCursor INTO @PremiumCursorQuoteOptionGuid, @PremiumCursorChargeCode, @PremiumCursorOfficeID, @PremiumCursorPremium, @PremiumCursorCommissionable, @PremiumCursorAddedDate   END--WHILE @@Fetch_status=0     CLOSE EndorsePremiumCursor    DEALLOCATE EndorsePremiumCursor       --for imports wherre fee amounts are given by the import source   IF EXISTS(SELECT * FROM Ascot_AL3FeesTable WHERE Ascot_AL3FeesTable.DnlTrId = @DnlTrId)   BEGIN      INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, FlatRate, Splittable, AutoApplied)    SELECT qo.QuoteOptionGUID,      CompanyLineFeeSetupIDTable.CompanyFeeID,      Ascot_AL3FeesTable.ChargeCode,      @OfficeID,      tblCompanyLines.CompanyLineGUID,      3,      --(4/2/24) updated to dynamically set payable bit      CompanyLineFeeSetupIDTable.Payable, --payable      Ascot_AL3FeesTable.FeeAmount,       0,      0    FROM  Ascot_AL3FeesTable    INNER JOIN lstLines FeeLine ON Ascot_AL3FeesTable.LineID = FeeLine.LineID    INNER JOIN tblCompanyLocations FeeCompanyLocation ON FeeCompanyLocation.CompanyLocationCode = Ascot_AL3FeesTable.CompanyLocationCode    INNER JOIN tblQuotes q ON q.QuoteGUID = @EndorsementQuoteGuid    INNER JOIN tblQuoteOptions qo ON q.QuoteGUID = qo.QuoteGUID     AND  qo.LineGUID = FeeLine.LineGUID     AND  qo.CompanyLocationID = Ascot_AL3FeesTable.CompanyLocationCode    INNER JOIN tblCompanyLines ON tblCompanyLines.LineGUID = FeeLine.LineGUID     AND  tblCompanyLines.CompanyLocationGUID = FeeCompanyLocation.CompanyLocationGUID     AND  tblCompanyLines.StateID = Ascot_AL3FeesTable.StateID     AND  CASE WHEN FeeLine.LineGUID <> q.LineGUID        THEN CASE WHEN tblCompanyLines.ParentCompanyLineGUID IS NOT NULL THEN 1 ELSE 0 END        ELSE CASE WHEN tblCompanyLines.ParentCompanyLineGUID IS NULL THEN 1 ELSE 0 END       END = 1    CROSS APPLY (        SELECT TOP 1 tblCompanyPolicyCharges.CompanyFeeID,            tblCompanyPolicyCharges.Payable        FROM tblCompanyPolicyCharges        WHERE tblCompanyPolicyCharges.ChargeCode = Ascot_AL3FeesTable.ChargeCode        AND ISNULL(tblCompanyPolicyCharges.CompanyLocationGuid, FeeCompanyLocation.CompanyLocationGUID) = FeeCompanyLocation.CompanyLocationGUID        AND ISNULL(tblCompanyPolicyCharges.LineGuid, FeeLine.LineGUID) = FeeLine.LineGUID        AND ISNULL(tblCompanyPolicyCharges.StateID, Ascot_AL3FeesTable.StateID) = Ascot_AL3FeesTable.StateID        AND DATEDIFF(d, tblCompanyPolicyCharges.Effective, q.EffectiveDate) >= 0        ORDER BY tblCompanyPolicyCharges.Effective DESC,           (CASE WHEN tblCompanyPolicyCharges.CompanyLocationGuid IS NOT NULL THEN 1 ELSE 0 END +           CASE WHEN tblCompanyPolicyCharges.LineGuid IS NOT NULL THEN 1 ELSE 0 END +           CASE WHEN tblCompanyPolicyCharges.StateID IS NOT NULL THEN 1 ELSE 0 END) DESC       ) AS CompanyLineFeeSetupIDTable    WHERE Ascot_AL3FeesTable.DnlTrId = @DnlTrId     END     --TFS 89800  SQL Ascot added spautoapplyfees   --it can be controlled via @SkipTaxesAndFees    IF @AutoApplyFees=1   BEGIN        DECLARE @FeeCursorQuoteOptionGuid uniqueidentifier      DECLARE EndorseFeeCursor Cursor FAST_FORWARD FORWARD_ONLY    FOR SELECT tblQuoteOptions.QuoteOptionGuid     FROM tblQuotes     INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID     WHERE tblQuotes.QuoteGuid = @EndorsementQuoteGuid      OPEN EndorseFeeCursor    FETCH EndorseFeeCursor INTO @FeeCursorQuoteOptionGuid      WHILE @@Fetch_status=0    BEGIN       exec spAutoApplyFees @PremiumCursorQuoteOptionGuid       FETCH EndorseFeeCursor INTO @FeeCursorQuoteOptionGuid    END--WHILE @@Fetch_status=0      CLOSE EndorseFeeCursor     DEALLOCATE EndorseFeeCursor       END      IF @BrokerCommissionFeeChargeCode IS NOT NULL   BEGIN      DECLARE @BrokerCommissionPercent decimal(9, 8)    DECLARE @BrokerFeeAppliesToLineGuid uniqueidentifier    DECLARE @BrokerFeeAppliesToCompanyLineGuid uniqueidentifier      SELECT @BrokerCommissionPercent = Ascot_AL3PolicyMasterTable_v2.BrokerCommissionPercent,      @BrokerFeeAppliesToLineGuid = lstLines.LineGUID,      @BrokerFeeAppliesToCompanyLineGuid = CL.CompanyLineGuid    FROM Ascot_AL3PolicyMasterTable_v2    INNER JOIN lstLines ON Ascot_AL3PolicyMasterTable_v2.LineCode = lstLines.LineID    Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode    Inner Join  tblCompanyLines CL on CL.LineGUID = lstLines.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and Ascot_AL3PolicyMasterTable_v2.StateOfIssuance = CL.StateID    WHERE DnlTrId = @DnlTrId      DECLARE @BrokerCommissionCompanyFeeID int    SELECT @BrokerCommissionCompanyFeeID = CompanyFeeID    FROM tblCompanyPolicyCharges    WHERE tblCompanyPolicyCharges.ChargeCode = @BrokerCommissionFeeChargeCode    AND tblCompanyPolicyCharges.LineGuid = @BrokerFeeAppliesToLineGuid      IF @BrokerCommissionCompanyFeeID IS NULL    BEGIN       raiserror('No CompanyFeeID setup found for ChargeCode and Line', 15, 1) with nowait;      END      INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, PercentageRate, Splittable, AutoApplied)    SELECT tblQuoteOptions.QuoteOptionGuid,      @BrokerCommissionCompanyFeeID,      @BrokerCommissionFeeChargeCode,      @OfficeID,      @BrokerFeeAppliesToCompanyLineGuid,      3,      0,      @BrokerCommissionPercent,       0,      0    FROM tblQuoteOptions    WHERE tblQuoteOptions.QuoteGuid = @EndorsementQuoteGuid     END     --Update Quote Option Data   UPDATE tblQuoteOptions SET Bound = 1 WHERE QuoteGuid = @EndorsementQuoteGuid     --If we have premium in tblQuoteOptionsPremiums or fees in tblQuoteOptionCharges that add up to something other than 0 then continue with the invoice generation and transfer to accounting   DECLARE @QuoteOptionPremium money = 0   SELECT @QuoteOptionPremium = SUM(tblQuoteOptionPremiums.Premium)   FROM tblQuotes   INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID   INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid   WHERE tblQuotes.QuoteGuid = @EndorsementQuoteGuid     DECLARE @QuoteOptionCharges money = 0   SELECT @QuoteOptionCharges = SUM(tblQuoteOptionCharges.amount)   FROM tblQuotes   INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID   INNER JOIN tblQuoteOptionCharges ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionCharges.QuoteOptionGuid   WHERE tblQuotes.QuoteGuid = @EndorsementQuoteGuid     IF @QuoteOptionPremium <> 0 OR @QuoteOptionCharges <> 0   BEGIN      --Send invoices to accounting (AccountingTransfer.vb)    DECLARE @InvoiceNum INT        DECLARE @NumInstallments int    DECLARE @ExpirationDate datetime    DECLARE @IMSInstallmentPlanID int = NULL      SELECT @NumInstallments = ISNULL(P.NumInstallments, 1),      @ExpirationDate = P.PolicyExpirationDate    FROM Ascot_AL3PolicyMasterTable_v2 P    WHERE P.DnlTrId = @DnlTrId      DECLARE @InstallmentPlanMappingTable TABLE    (     OptionName varchar(200),     SafeHarborNumInstallments int    )      INSERT INTO @InstallmentPlanMappingTable VALUES('Quarterly', 4)    INSERT INTO @InstallmentPlanMappingTable VALUES('Semi-Annual', 2)      SELECT TOP 1 @IMSInstallmentPlanID = tblCompanyLineInstallments.ID    FROM tblCompanyLineInstallments    INNER JOIN tblCompanyLines ON tblCompanyLineInstallments.CompanyLineID = tblCompanyLines.CompanyLineID    INNER JOIN @InstallmentPlanMappingTable T ON tblCompanyLineInstallments.OptionName = T.OptionName    WHERE tblCompanyLines.CompanyLineGUID = @CompanyLineGuid    AND T.SafeHarborNumInstallments = @NumInstallments          DECLARE @FirstInvoicePercentage decimal(20, 19)    DECLARE @FirstInvoiceTerm int    DECLARE @FirstInvoiceBillingCode varchar(100)    DECLARE @FirstInvoiceFromEffectiveDate bit    DECLARE @FirstInvoiceFromBillingDate bit    DECLARE @InstallmentPercentage decimal(20, 19)    DECLARE @InstallmentTerms int--how many days/months between installments    DECLARE @InstallmentFromEffectiveDate datetime    DECLARE @InstallmentFromBillingDate datetime    DECLARE @UseMonth bit--defines if months are used for @InstallmentTerms instead of days      IF @IMSInstallmentPlanID IS NOT NULL    BEGIN       SELECT @FirstInvoicePercentage = tblCompanyLineInstallments.DownpaymentPercentage,       @FirstInvoiceTerm = tblCompanyLineInstallments.DownpaymentTerm,       @FirstInvoiceBillingCode = lstBillingTypes.BillingCode,       @FirstInvoiceFromEffectiveDate = tblCompanyLineInstallments.DownpaymentFromEffectiveDate,       @FirstInvoiceFromBillingDate = tblCompanyLineInstallments.DownpaymentFromDateBilled,                  @InstallmentPercentage = ((1.0000 - tblCompanyLineInstallments.DownpaymentPercentage) / tblCompanyLineInstallments.NumPayments),       @InstallmentTerms = tblCompanyLineInstallments.InstallmentTerms,       @InstallmentFromEffectiveDate = tblCompanyLineInstallments.InstallmentFromEffectiveDate,       @InstallmentFromBillingDate = tblCompanyLineInstallments.InstallmentFromDateBilled,       @UseMonth = tblCompanyLineInstallments.UseMonth       FROM tblCompanyLineInstallments     LEFT JOIN lstBillingTypes ON tblCompanyLineInstallments.DownpaymentBillingTypeID = lstBillingTypes.BillingTypeID     WHERE ID = @IMSInstallmentPlanID      END    ELSE    BEGIN       DECLARE @ProducerPaymentMeasuredFrom_Endorsement varchar(10)     DECLARE @ProducerPaymentTermDays int = 0     SELECT @ProducerPaymentMeasuredFrom_Endorsement = tblCompanyLineTermsOfPayment.ProducerPaymentMeasuredFrom_Endorsement,       @ProducerPaymentTermDays = tblCompanyLineTermsOfPayment.DefaultProducerTermsOfPayment_Endorsement     FROM tblCompanyLines     INNER JOIN tblCompanyLineTermsOfPayment ON tblCompanyLines.CompanyLineID = tblCompanyLineTermsOfPayment.CompanyLineID     WHERE tblCompanyLines.CompanyLineGUID = @CompanyLineGuid     AND DATEDIFF(d, tblCompanyLineTermsOfPayment.Effective, @PolicyEffectiveDate) >= 0     ORDER BY Effective DESC     --E=Effective     --G=GAAP     --M=End of Month (billed?)     --B=Billed       DECLARE @TransactionMonths int = DATEDIFF(m, @TransEffDate, @ExpirationDate)       SET @FirstInvoicePercentage = 1.0000 / @NumInstallments     SET @FirstInvoiceTerm = @ProducerPaymentTermDays     SET @FirstInvoiceBillingCode = @BillingCode     SET @FirstInvoiceFromEffectiveDate = 1     SET @FirstInvoiceFromBillingDate = 0       SET @InstallmentPercentage = @FirstInvoicePercentage     SET @InstallmentTerms = @TransactionMonths / @NumInstallments     SET @InstallmentFromEffectiveDate = 1     SET @InstallmentFromBillingDate = 0     SET @UseMonth = 1       IF @ProducerPaymentMeasuredFrom_Endorsement = 'E'     BEGIN        SET @FirstInvoiceFromEffectiveDate = 1      SET @FirstInvoiceFromBillingDate = 0        SET @InstallmentFromEffectiveDate = 1      SET @InstallmentFromBillingDate = 0       END             IF @ProducerPaymentMeasuredFrom_Endorsement = 'B'     BEGIN        SET @FirstInvoiceFromEffectiveDate = 0      SET @FirstInvoiceFromBillingDate = 1        SET @InstallmentFromEffectiveDate = 0      SET @InstallmentFromBillingDate = 1       END       IF @InstallmentTerms < 1     BEGIN        DECLARE @TransactionDays int = DATEDIFF(d, @TransEffDate, @ExpirationDate)      SET @InstallmentTerms = @TransactionDays / @NumInstallments      SET @UseMonth = 0       END      END      IF EXISTS(SELECT * FROM #InvoiceInstallmentsTable)    BEGIN       DELETE FROM #InvoiceInstallmentsTable      END      WHILE (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) < @NumInstallments    BEGIN       IF (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) = 0     BEGIN        DECLARE @CalculatedDueDate datetime        IF @FirstInvoiceFromEffectiveDate = 1      BEGIN         SET @CalculatedDueDate = DATEADD(d, @FirstInvoiceTerm, @TransEffDate)        END      ELSE IF @FirstInvoiceFromBillingDate = 1      BEGIN         SET @CalculatedDueDate = DATEADD(d, @FirstInvoiceTerm, @DateBound)        END        --downpayment info or single invoice, use first invoice vars      INSERT INTO #InvoiceInstallmentsTable VALUES      (       @EndorsementQuoteID,        @TransEffDate,        @ExpirationDate,        @NumInstallments,        (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) + 1,        @CalculatedDueDate,       @FirstInvoiceBillingCode,       @FirstInvoicePercentage      )       END     ELSE     BEGIN        DECLARE @CurrentInstallmentNumber int = (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) + 1        IF @InstallmentFromEffectiveDate = 1      BEGIN         IF @UseMonth = 1       BEGIN                   SET @CalculatedDueDate = DATEADD(m, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @TransEffDate)         END       ELSE       BEGIN                   SET @CalculatedDueDate = DATEADD(d, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @TransEffDate)         END        END      ELSE IF @InstallmentFromBillingDate = 1      BEGIN         IF @UseMonth = 1       BEGIN                   SET @CalculatedDueDate = DATEADD(m, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @DateBound)         END       ELSE       BEGIN                   SET @CalculatedDueDate = DATEADD(d, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @DateBound)         END        END        INSERT INTO #InvoiceInstallmentsTable VALUES      (       @EndorsementQuoteID,        @TransEffDate,        @ExpirationDate,        @NumInstallments,        @CurrentInstallmentNumber,        @CalculatedDueDate,       @BillingCode,       @InstallmentPercentage      )       END      END        DECLARE @ProcessedInvoiceCount int = 0    WHILE @ProcessedInvoiceCount < @NumInstallments    BEGIN       DECLARE @InvoiceProcessInstallmentMod decimal(20, 19) = 1.0     DECLARE @InvoiceProcessInstallmentDueDate datetime = NULL     DECLARE @InvoiceProcessInstallmentBillingCode varchar(100) = NULL       SELECT @InvoiceProcessInstallmentMod = I.InstallmentMod,       @InvoiceProcessInstallmentDueDate = I.InstallmentDueDate,       @InvoiceProcessInstallmentBillingCode = I.BillingCode       FROM #InvoiceInstallmentsTable I     WHERE (I.Installment - 1) = @ProcessedInvoiceCount              EXECUTE spAccountingTransfer     0, --@Debug     @EndorsementQuoteGuid, --@QuoteGuid     @UserGuid, --@UserGuid     @OfficeID, --@OfficeID     1, --@IsEndorsement     @InvoiceProcessInstallmentMod, --@InstallmentBillingPremiumModFactor     @InvoiceProcessInstallmentDueDate, --@DueDate     @DateBound, --@DateBilled     NULL, --@Amount     @InvoiceProcessInstallmentBillingCode, --@BillingCode     '', --@InvoiceComments     NULL, --@ModifiesInvoiceNum     NULL, --@BillToAdditionalInterestID     --NULL, --@AccountCurrent     @InvoiceNum OUTPUT          --Loop through all the fees on the policy     DECLARE @QuoteOptionChargeAmount MONEY     DECLARE @QuoteOptionFeeID INT       DECLARE db_cursor CURSOR FOR        SELECT DISTINCT tblQuoteOptionCharges.Amount, tblQuoteOptionCharges.OptionFeeID      FROM tblQuotes      INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID      INNER JOIN tblQuoteOptionCharges ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionCharges.QuoteOptionGuid      INNER JOIN tblQuoteDetails ON tblQuotes.QuoteGUID = tblQuoteDetails.QuoteGUID      INNER JOIN tblCompanyLines ON tblQuoteDetails.CompanyLineGUID = tblCompanyLines.CompanyLineGUID AND tblQuoteOptions.LineGUID = tblCompanyLines.LineGUID      WHERE (tblQuotes.QuoteGUID = @EndorsementQuoteGuid)      AND (tblQuoteOptions.Bound = 1)      AND (tblQuoteOptionCharges.WaivedByUserGuid IS NULL)       OPEN db_cursor        FETCH NEXT FROM db_cursor INTO @QuoteOptionChargeAmount, @QuoteOptionFeeID       WHILE @@FETCH_STATUS = 0        BEGIN            EXEC spAccountingTransfer_Fees       0, --@Debug       @QuoteOptionFeeID, --@OptionFeeID       @InvoiceNum, --@InvoiceNum       @QuoteOptionChargeAmount, --@Amount       @InvoiceProcessInstallmentBillingCode --@BillingCode       FETCH NEXT FROM db_cursor INTO @QuoteOptionChargeAmount, @QuoteOptionFeeID     END          CLOSE db_cursor        DEALLOCATE db_cursor         --Post to Journal     EXEC spFin_PostInvoice @InvoiceNum          exec GreyHawk_AfterPostInvoice @invoicenum--Posts reinsurance data       SET @ProcessedInvoiceCount = @ProcessedInvoiceCount + 1      END--WHILE @ProcessedInvoiceCount < @NumInstallments     --Verify Premiums    EXEC spAccountingTransfer_VerifyPremiumsTransferred      @EndorsementQuoteGuid, --@quoteGuid      0, --@debug      0 --@reVerify      --Verify Fees    EXEC spAccountingTransfer_VerifyFeesTransferred @EndorsementQuoteGuid --@quoteGuid     --Verify Invoices were created     DECLARE @InvoiceCount INT     SELECT @InvoiceCount = COUNT(*) FROM tblFin_Invoices WHERE QuoteID = (SELECT QuoteID FROM tblQuotes WHERE QuoteGuid = @EndorsementQuoteGuid) AND Failed = 0       IF (@InvoiceCount <> @NumInstallments)     BEGIN    ROLLBACK TRANSACTION    RAISERROR('Invoice Count Incorrect.',15,1)    RETURN     END     END--IF @QuoteOptionPremium <> 0 OR @QuoteOptionCharges <> 0      DECLARE @OptionPremiumCheck money    DECLARE @BilledPremiumCheck money      SELECT @OptionPremiumCheck = SUM(tblQuoteOptionPremiums.Premium)    FROM tblQuotes    INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGuid = tblQuoteOptions.QuoteGuid    INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid    WHERE tblQuotes.QuoteID = @EndorsementQuoteID      SELECT @BilledPremiumCheck = SUM(tblFIn_InvoiceDetails.AmtBilled)    FROM tblFin_Invoices    INNER JOIN tblFin_InvoiceDetails ON tblFin_Invoices.InvoiceNum = tblFin_InvoiceDetails.InvoiceNum    WHERE tblFin_Invoices.Failed = 0    AND tblFin_InvoiceDetails.ChargeType = 'P'    AND tblFin_Invoices.QuoteID = @EndorsementQuoteID      DECLARE @BadPremiumErrorMessage varchar(200)    SET @BadPremiumErrorMessage = 'Invoice premium is too different from option premium.' +            ' InvoicePremium: ' + dbo.FormatNumber(@BilledPremiumCheck, 2) +             '; OptionPremium ' + dbo.FormatNumber(@OptionPremiumCheck, 2) +            '; InstallmentMod: ' + dbo.FormatNumber(@InvoiceProcessInstallmentMod, 10)      IF ABS(@OptionPremiumCheck - @BilledPremiumCheck) > 3    BEGIN       RAISERROR(@BadPremiumErrorMessage,15,1)      END       --Update Quote Data     UPDATE     tblQuotes     SET     DateIssued = GETDATE(),     IssuedByUserID = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),     DateBound = GETDATE(),     BoundByUserId = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),     QuoteStatusId = 12     WHERE     QuoteGuid = @EndorsementQuoteGuid     AND DateIssued IS NULL         UPDATE Ascot_AL3PolicyMasterTable_v2 SET CreatedQuoteID = @EndorsementQuoteID     FROM Ascot_AL3PolicyMasterTable_v2     WHERE DnlTrID = @DnlTrID       --update the expiration date     DECLARE @QuoteID int     SELECT @QuoteID=QuoteID FROM tblQuotes WHERE QuoteGuid=@EndorsementQuoteGuid     UPDATE tblQuotes2 SET OriginalExpirationDate=(SELECT ExpirationDate FROM tblQuotes WHERE QuoteID=@QuoteID) WHERE QuoteID=@QuoteID      UPDATE tblQuotes SET ExpirationDate=@TransEffDate WHERE QuoteID=@QuoteID       DROP TABLE #InvoiceInstallmentsTable          COMMIT TRANSACTION    END  
ASCOT_AL3ImportData_Zywave	  Create  PROCEDURE [dbo].[ASCOT_AL3ImportData_Zywave]    @ImportLogID int,    @ImportXML xml  AS  BEGIN  --Declare @ImportXML xml  DECLARE @StateTaxIDs TABLE (State NVARCHAR(50), StateTaxID INT,ZywaveID nvarchar(255));  DECLARE @RiskStateID TABLE (State NVARCHAR(50), RiskStateId INT,ZywaveID nvarchar(255));  DECLARE @ProgramID INT  DECLARE @PolicyType VARCHAR(50)    declare @CaptiveGLPrimaryPremOpsClaimsMade decimal(18,2)   ,@CaptiveGLPrimaryPremOpsOccurrence decimal(18,2)   ,@CaptiveGLPrimaryProductsClaimsMade decimal(18,2)   ,@CaptiveGLPrimaryProductsOccurrence decimal(18,2)   ,@CaptiveGLPrimaryTRIAClaimsMade decimal(18,2)   ,@CaptiveGLPrimaryTRIAOccurrence decimal(18,2)   ,@CaptiveGLPrimaryOtherClaimsMade decimal(18,2)   ,@CaptiveGLPrimaryOtherOccurrence decimal(18,2)   ,@CaptiveGLPrimaryLiquorClaimsMade decimal(18,2)   ,@CaptiveGLPrimaryLiquorOccurrence decimal(18,2),   --------------------------------------------------------------------------------------------------    @CaptiveGLXOLPremOpsClaimsMade decimal(18,2),    @CaptiveGLXOLTRIAClaimsMade decimal(18,2),    @CaptiveGLXOLProductsOccurrence decimal(18,2),    @CaptiveGLXOLLiquorClaimsMade decimal(18,2),    @CaptiveGLXOLOtherOccurrence decimal(18,2),    @CaptiveGLXOLPremOpsOccurrence decimal(18,2),    @CaptiveGLXOLTRIAOccurrence  decimal(18,2),    @CaptiveGLXOLLiquorOccurrence decimal(18,2),    @CaptiveGLXOLOtherClaimsMade decimal(18,2),    @CaptiveGLXOLProductsClaimsMade decimal(18,2)      --;WITH XMLNAMESPACES (  --    'http://www.w3.org/2003/05/soap-envelope' AS soap12,  --    DEFAULT 'http://tempuri.org/IMSWebServices/DataAccess'  --)    --SELECT  --    @ImportXML = @xml.value('(soap12:Envelope/soap12:Body/ExecuteCommand/parameters/string[2]/text())[1]', 'varchar(max)')    INSERT INTO ASCOT_AL3ZywaveImportHeader(    ImportLogID,     RecordType,     ClientID,      ImportVersion,     ImportSource,     SubmissionDate,       SourceRunDateFrom,     SourceRunDateTo)   SELECT     --ImportLogID int,     @ImportLogID,      --RecordType varchar(100),     t.o.value('(./RecordType)[1]', 'varchar(100)'),      --ClientID int,     t.o.value('(./ClientID)[1]', 'int'),      --ImportVersion int,     t.o.value('(./ImportVersion)[1]', 'int'),         --ImportSource int,     t.o.value('(./ImportSource)[1]', 'int'),         --SubmissionDate varchar(100),     t.o.value('(./SubmissionDate)[1]', 'varchar(100)'),      --SourceRunDateFrom datetime     t.o.value('(./RunDateFrom)[1]', 'datetime'),      --SourceRunDateTO datetime     t.o.value('(./RunDateTo)[1]', 'datetime')     FROM @ImportXML.nodes('/Feed') as t(o)    INSERT INTO ASCOT_AL3ImportPolicy_Zywave(     ImportLogID,        ZywaveRiskID,        ZywaveID,        InsuredName,        InsuredAddress1,        InsuredAddress2,        InsuredState,        InsuredCity,        InsuredZip,        InsuredType,        ProducerLocationName,        ProducerLocationGUID,        ProducerContactName,        ProducerContactGUID,        ProducerCommission,        Line,        Company,        PolicyNo,        PolicyType,        CaptiveType,        CaptiveName,        ProgramID,        TotalPremium,        TotalTaxes,        PolicyEffDate,        PolicyExpDate,        TransactionNumber,        TransType,        TransactionEffectiveDate,        DateCreated,        BoundDate,        DisplayStatus,        BillingType,        Underwriter        )       SELECT   @ImportLogID as ImportLogID ,    Policy.value('(ZywaveRiskID)[1]', 'NVARCHAR(50)'),    Policy.value('(ZywaveID)[1]', 'NVARCHAR(50)'),   --'Testing & Value',    NULLIF(Policy.value('(InsuredName)[1]', 'NVARCHAR(255)'), ''),    NULLIF(Policy.value('(InsuredAddress1)[1]', 'NVARCHAR(255)'), ''),    NULLIF(Policy.value('(InsuredAddress2)[1]', 'NVARCHAR(255)'), ''),    NULLIF(Policy.value('(InsuredState)[1]', 'NVARCHAR(2)'), ''),    NULLIF(Policy.value('(InsuredCity)[1]', 'NVARCHAR(255)'), ''),    NULLIF(Policy.value('(InsuredZip)[1]', 'NVARCHAR(50)'), ''),    NULLIF(Policy.value('(InsuredType)[1]', 'NVARCHAR(50)'), ''),    NULLIF(Policy.value('(ProducerLocationName)[1]', 'NVARCHAR(255)'), ''),    NULLIF(Policy.value('(ProducerLocationGUID)[1]', 'NVARCHAR(50)'), ''),    NULLIF(Policy.value('(ProducerContactName)[1]', 'NVARCHAR(255)'), ''),    NULLIF(Policy.value('(ProducerContactGUID)[1]', 'NVARCHAR(50)'), ''),    NULLIF(ISNULL(CASE when  Policy.value('(ProducerCommission)[1]', 'nvarchar(20)')='' then 0        ELSE Policy.value('(ProducerCommission)[1]', 'DECIMAL(18, 2)') END, ''), 0.0) ,    NULLIF(Policy.value('(Line)[1]', 'NVARCHAR(50)'), ''),    NULLIF(Policy.value('(Company)[1]', 'NVARCHAR(255)'), ''),    NULLIF(Policy.value('(PolicyNo)[1]', 'NVARCHAR(50)'), ''),    NULLIF(Policy.value('(PolicyType)[1]', 'NVARCHAR(50)'), ''),    NULLIF(Policy.value('(CaptiveType)[1]', 'NVARCHAR(50)'), ''),    NULLIF(Policy.value('(CaptiveName)[1]', 'NVARCHAR(50)'), ''),    NULLIF(Policy.value('(ProgramID)[1]', 'INT'),''),    NULLIF(ISNULL(CASE when  Policy.value('(TotalPremium)[1]', 'nvarchar(20)')='' then 0        ELSE Policy.value('(TotalPremium)[1]', 'DECIMAL(18, 2)') END, ''), 0.0) ,    NULLIF(ISNULL(CASE when  Policy.value('(TotalTaxes)[1]', 'nvarchar(20)')='' then 0        ELSE Policy.value('(TotalTaxes)[1]', 'DECIMAL(18, 2)') END, ''), 0.0) ,    TRY_CONVERT(DATE, NULLIF(COALESCE(Policy.value('(PolicyEffDate)[1]', 'NVARCHAR(50)'), ''), ''), 23),    TRY_CONVERT(DATE, NULLIF(COALESCE(Policy.value('(PolicyExpDate)[1]', 'NVARCHAR(50)'), ''), ''), 23),     NULLIF(Policy.value('(TransactionNumber)[1]', 'int'),0),    NULLIF(Policy.value('(TransType)[1]', 'NVARCHAR(50)'),''),   TRY_CONVERT(DATE, NULLIF(COALESCE(Policy.value('(TransactionEffectiveDate)[1]', 'NVARCHAR(50)'), ''), ''), 23),      TRY_CONVERT(DATE, NULLIF(COALESCE(Policy.value('(DateCreated)[1]', 'NVARCHAR(50)'), ''), ''), 23),      TRY_CONVERT(DATE, NULLIF(COALESCE(Policy.value('(BoundDate)[1]', 'NVARCHAR(50)'), ''), ''), 23),   --Policy.value('(DateCreated)[1]', 'date'),   --Policy.value('(BoundDate)[1]', 'date'),    NULLIF(Policy.value('(DisplayStatus)[1]', 'NVARCHAR(50)'),''),    NULLIF(Policy.value('(BillingType)[1]', 'NVARCHAR(50)'),''),    NULLIF(Policy.value('(Underwriter)[1]', 'NVARCHAR(255)'),'')    FROM @ImportXML.nodes('/Feed/Policy') AS P(Policy)    --------------------------------------------------------------------------------------------------  Select     NULLIF(Policy.value('(InsuredName)[1]', 'NVARCHAR(255)'), '')   FROM @ImportXML.nodes('/Feed/Policy') AS P(Policy)    IF EXISTS (SELECT 1     FROM @ImportXML.nodes('/Feed/Policy/Premium/State') AS S (State)    )    BEGIN     SELECT @ProgramID =  Policy.value('(ProgramID)[1]', 'INT'),   @PolicyType = Policy.value('(PolicyType)[1]', 'NVARCHAR(50)')   FROM @ImportXML.nodes('/Feed/Policy') AS P(Policy)   --Select  @ProgramID As ProgramID     --CaptiveGLXOLPremOpsOccurrence   select @CaptiveGLXOLPremOpsOccurrence = case when  @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryPremOpsOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryPremOpsOccurrence'     --CaptiveGLXOLPremOpsClaimsMade   select @CaptiveGLXOLPremOpsClaimsMade = case when  @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryPremOpsClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryPremOpsClaimsMade'     --CaptiveGLXOLProductsOccurrence   select @CaptiveGLXOLProductsOccurrence = case when @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryProductsOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryProductsOccurrence'     --CaptiveGLXOLProductsClaimsMade   select @CaptiveGLXOLProductsClaimsMade = case when @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryProductsClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryProductsClaimsMade'     --CaptiveGLXOLTRIAOccurrence   select @CaptiveGLXOLTRIAOccurrence = case when @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryTRIAOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryTRIAOccurrence'     --CaptiveGLXOLTRIAClaimsMade   select @CaptiveGLXOLTRIAClaimsMade = case when @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryTRIAClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryTRIAClaimsMade'     --CaptiveGLXOLOtherOccurrence   select @CaptiveGLXOLOtherOccurrence = case when @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryOtherOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryOtherOccurrence'     --CaptiveGLXOLOtherClaimsMade   select @CaptiveGLXOLOtherClaimsMade = case when @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryOtherClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryOtherClaimsMade'     --CaptiveGLXOLLiquorOccurrence   select @CaptiveGLXOLLiquorOccurrence = case when @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryLiquorOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryLiquorOccurrence'     --CaptiveGLXOLLiquorClaimsMade   select @CaptiveGLXOLLiquorClaimsMade = case when @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryLiquorClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')*s.splitpct END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryLiquorClaimsMade'        -----------------------------------------Start XOL Calculation-----------------------------------------------------------------------------------------   --CaptiveGLPrimaryPremOpsOccurrence   select @CaptiveGLPrimaryPremOpsOccurrence = case when  @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryPremOpsOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')- @CaptiveGLXOLPremOpsOccurrence END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryPremOpsOccurrence'     --CaptiveGLPrimaryPremOpsClaimsMade   select @CaptiveGLPrimaryPremOpsClaimsMade = case when  @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryPremOpsClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')- @CaptiveGLXOLPremOpsClaimsMade END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryPremOpsClaimsMade'     --CaptiveGLPrimaryProductsOccurrence   select  @CaptiveGLPrimaryProductsOccurrence = case when @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryProductsOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')-@CaptiveGLXOLProductsOccurrence END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryProductsOccurrence'     --CaptiveGLPrimaryProductsClaimsMade   select @CaptiveGLPrimaryProductsClaimsMade = case when @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryProductsClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')- @CaptiveGLXOLProductsClaimsMade END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryProductsClaimsMade'     --CaptiveGLPrimaryTRIAOccurrence   select @CaptiveGLPrimaryTRIAOccurrence = case when @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryTRIAOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')- @CaptiveGLXOLTRIAOccurrence END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryTRIAOccurrence'     --CaptiveGLPrimaryTRIAClaimsMade   select  @CaptiveGLPrimaryTRIAClaimsMade= case when @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryTRIAClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')- @CaptiveGLXOLTRIAClaimsMade END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryTRIAClaimsMade'     --CaptiveGLPrimaryOtherOccurrence   select  @CaptiveGLPrimaryOtherOccurrence= case when @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryOtherOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')- @CaptiveGLXOLOtherOccurrence END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryOtherOccurrence'     --CaptiveGLPrimaryOtherClaimsMade   select @CaptiveGLPrimaryOtherClaimsMade = case when @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryOtherClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')- @CaptiveGLXOLOtherClaimsMade END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryOtherClaimsMade'     --CaptiveGLPrimaryLiquorOccurrence   select @CaptiveGLPrimaryLiquorOccurrence = case when @PolicyType ='Occurrence' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryLiquorOccurrence'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')- @CaptiveGLXOLLiquorOccurrence END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryLiquorOccurrence'     --CaptiveGLPrimaryLiquorClaimsMade   select @CaptiveGLPrimaryLiquorClaimsMade = case when @PolicyType ='Claims Made' AND StateNodes.value('local-name(.)', 'VARCHAR(MAX)') = 'CaptiveGLPrimaryLiquorClaimsMade'      then StateNodes.value('(text())[1]', 'DECIMAL(18, 2)')- @CaptiveGLXOLLiquorClaimsMade END   FROM Ascot_tblCaptivePremiumSplits s    JOIN Ascot_ParentCaptiveProgamsCodes a ON a.ParentID = s.ParentID    LEFT JOIN lstlines l ON l.lineguid = s.lineguidfrom    LEFT JOIN lstlines l2 ON l2.lineguid = s.lineguidto    JOIN @ImportXML.nodes('/Feed/Policy') AS P(Policy) ON 1 = 1 -- Adjust this join condition based on your XML structure    JOIN @ImportXML.nodes('/Feed/Policy/Premium/State') AS State(State) on 1=1    OUTER APPLY P.Policy.nodes('Premium/State/*') AS StateNodes(StateNodes)    WHERE a.ProgramID =@ProgramID   AND  REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = StateNodes.value('local-name(.)', 'VARCHAR(MAX)')   AND REPLACE(REPLACE(l.linename, '-', ''), ' ', '') = 'CaptiveGLPrimaryLiquorClaimsMade'     -----------------------------------------END XOL Calculation-----------------------------------------------------------------------------------------     --------------------------------------------------------------------------------------------------------------------------------------------------------     INSERT INTO Ascot_AL3ImportPremiumState_Zywave      (        ImportLogID,        ZywaveID,        PolicyNo,        PolicyType,        RiskAddress1,        RiskAddress2,        RiskCity,        RiskState,        RiskZip,        CaptiveGLPrimaryPremOpsClaimsMade,        CaptiveGLPrimaryPremOpsOccurrence,        CaptiveGLPrimaryProductsClaimsMade,        CaptiveGLPrimaryProductsOccurrence,        CaptiveGLPrimaryTRIAClaimsMade,        CaptiveGLPrimaryTRIAOccurrence,        CaptiveGLPrimaryOtherClaimsMade,        CaptiveGLPrimaryOtherOccurrence,        CaptiveGLPrimaryLiquorClaimsMade,        CaptiveGLPrimaryLiquorOccurrence,          CaptiveGLXOLPremOpsClaimsMade,        CaptiveGLXOLPremOpsOccurrence,        CaptiveGLXOLProductsClaimsMade,        CaptiveGLXOLProductsOccurrence,        CaptiveGLXOLTRIAClaimsMade,        CaptiveGLXOLTRIAOccurrence,        CaptiveGLXOLOtherClaimsMade,        CaptiveGLXOLOtherOccurrence,        CaptiveGLXOLLiquorClaimsMade,        CaptiveGLXOLLiquorOccurrence      )        OUTPUT INSERTED.RiskState, INSERTED.RiskStateID,INSERTED.ZywaveID INTO @RiskStateID     select       @ImportLogID,     NULLIF(Policy.value('(ZywaveID)[1]', 'NVARCHAR(50)'), ''),     NULLIF(Policy.value('(PolicyNo)[1]', 'NVARCHAR(50)'), ''),     NULLIF(Policy.value('(PolicyType)[1]', 'NVARCHAR(50)'), ''),     NULLIF(State.value('(RiskAddress1)[1]', 'NVARCHAR(255)'), ''),     NULLIF(State.value('(RiskAddress2)[1]', 'NVARCHAR(255)'), ''),     NULLIF(State.value('(RiskCity)[1]', 'NVARCHAR(50)'), ''),     NULLIF(State.value('(RiskState)[1]', 'NVARCHAR(2)'), ''),     NULLIF(State.value('(RiskZip)[1]', 'NVARCHAR(50)'), ''),     isnull(@CaptiveGLPrimaryPremOpsClaimsMade, 0),     isnull(@CaptiveGLPrimaryPremOpsOccurrence, 0),     isnull(@CaptiveGLPrimaryProductsClaimsMade, 0),     isnull(@CaptiveGLPrimaryProductsOccurrence, 0),     isnull(@CaptiveGLPrimaryTRIAClaimsMade, 0),     isnull(@CaptiveGLPrimaryTRIAOccurrence, 0),     isnull(@CaptiveGLPrimaryOtherClaimsMade, 0),     isnull(@CaptiveGLPrimaryOtherOccurrence, 0),     isnull(@CaptiveGLPrimaryLiquorClaimsMade, 0),     isnull(@CaptiveGLPrimaryLiquorOccurrence,0),  ---------------------------------------------------------------------------------------------------     isnull(@CaptiveGLXOLPremOpsClaimsMade, 0),     isnull(@CaptiveGLXOLPremOpsOccurrence, 0),     isnull(@CaptiveGLXOLProductsClaimsMade, 0),     isnull(@CaptiveGLXOLProductsOccurrence, 0),     isnull(@CaptiveGLXOLTRIAClaimsMade, 0),     isnull(@CaptiveGLXOLTRIAOccurrence, 0),     isnull(@CaptiveGLXOLOtherClaimsMade, 0),     isnull(@CaptiveGLXOLOtherOccurrence, 0),     isnull(@CaptiveGLXOLLiquorClaimsMade, 0),     isnull(@CaptiveGLXOLLiquorOccurrence,0)      FROM  @ImportXML.nodes('/Feed/Policy') AS P (Policy)   CROSS APPLY @ImportXML.nodes('/Feed/Policy/Premium/State') AS S (State)      END    -------------------------------------------------------------------------------------------------     IF EXISTS (SELECT 1 FROM @ImportXML.nodes('/Feed/Policy/StateTaxTotal/StateTax') AS T(StateTax) )   BEGIN    INSERT INTO Ascot_AL3ImportStatetaxinfo_Zywave    (      ImportLogID,      ZywaveID,      PolicyNo,      PolicyType,      RiskStateId,      Taxstate,   TaxAmount,      TaxName,      TaxCode,      TaxRate    )   OUTPUT INSERTED.Taxstate, INSERTED.StateTaxID ,INSERTED.ZywaveID INTO @StateTaxIDs        select       @ImportLogID as ImportLogID,       NULLIF(Policy.value('(ZywaveID)[1]', 'NVARCHAR(50)'),''),       NULLIF(Policy.value('(PolicyNo)[1]', 'NVARCHAR(50)'),''),       NULLIF(Policy.value('(PolicyType)[1]', 'NVARCHAR(50)'),''),       --StateTax.value('(State)[1]', 'NVARCHAR(50)'),     RSID.RiskStateId,     NULLIF(StateTax.value('(TaxState)[1]', 'NVARCHAR(50)'),''),       NULLIF( CASE when           --T.StateTax.value('(TaxRate)[1]', 'DECIMAL(18, 2)') * P.Policy.value('(TotalPremium)[1]', 'DECIMAL(18, 2)')='' then 0  StateTax.value('(TaxAmount)[1]', 'nvarchar(20)')='' then 0     ELSE StateTax.value('(TaxAmount)[1]', 'DECIMAL(18, 2)')     END,0.0),       NULLIF(StateTax.value('(TaxName)[1]', 'NVARCHAR(255)'),''),       NULLIF(StateTax.value('(TaxCode)[1]', 'NVARCHAR(50)'),''),      NULLIF( CASE when   Policy.value('(TotalPremium)[1]', 'nvarchar(20)')='' then 0     ELSE StateTax.value('(TaxRate)[1]', 'DECIMAL(18, 2)')     END,0.0)    FROM @ImportXML.nodes('/Feed/Policy/StateTaxTotal/StateTax') AS T(StateTax)      CROSS APPLY @ImportXML.nodes('/Feed/Policy') AS P(Policy)   INNER JOIN @RiskStateID RSID ON RSID.State =StateTax.value('(TaxState)[1]', 'NVARCHAR(50)')                    and RSID.ZywaveID =  P.Policy.value('(ZywaveID)[1]', 'NVARCHAR(50)')    END        --------------------------------------------------------------------------------------------------    --IF EXISTS (SELECT 1 FROM @ImportXML.nodes('/Feed/Policy/StateTaxTotal/StateTax/PassportTaxes') AS T(PassportTaxes)  --  )  --  BEGIN  --  INSERT INTO Ascot_AL3ImportPassporttaxes_Zywave  --  (  --    ImportLogID,  --    ZywaveID,  --    PolicyNo,  --    PolicyType,  --    StateTaxId,  --    KYTerritoryName,  --    KYTaxPerc,  --    KYTaxAmount,  --    KYTaxCode  --  )  --  select  --  @ImportLogID,  --  Policy.value('(ZywaveID)[1]', 'NVARCHAR(50)'),  --  Policy.value('(PolicyNo)[1]', 'NVARCHAR(50)'),  --  Policy.value('(PolicyType)[1]', 'NVARCHAR(50)'),  --  STID.StateTaxID,  --  PassportTaxes.value('(KYTerritoryName)[1]', 'NVARCHAR(255)'),  --  PassportTaxes.value('(KYTaxPerc)[1]', 'DECIMAL(18, 2)'),  --  PassportTaxes.value('(KYTaxAmount)[1]', 'DECIMAL(18, 2)'),  --  PassportTaxes.value('(KYTaxCode)[1]', 'NVARCHAR(50)')  --  FROM @ImportXML.nodes('/Feed/Policy/StateTaxTotal/StateTax/PassportTaxes') AS T(PassportTaxes)  --  CROSS APPLY @ImportXML.nodes('/Feed/Policy') AS P(Policy)  --  CROSS APPLY @ImportXML.nodes('/Feed/Policy/StateTaxTotal/StateTax') AS S(StateTax)  --  INNER JOIN @StateTaxIDs STID ON STID.State =StateTax.value('(State)[1]', 'NVARCHAR(50)')  --                  and STID.ZywaveID =  P.Policy.value('(ZywaveID)[1]', 'NVARCHAR(50)')    --  END      EXEC Ascot_AL3TransferData_Zywave  @ImportLogID  END    
Ascot_ReinstatePolicy_Captive	  Create PROCEDURE [dbo].[Ascot_ReinstatePolicy_Captive]  (        @QuoteGuid UNIQUEIDENTIFIER,        @TransEffDate DATETIME,        @Comment VARCHAR(50),        @EndorsementCalcType CHAR(1),        @NewPremium MONEY,        @QuoteStatusReasonID INT,        @DateBound DATETIME,        @UserGuid UNIQUEIDENTIFIER,        @BillingCode CHAR(5),        @AutoApplyFees bit,     @DnlTrID uniqueidentifier,     @BrokerCommissionFeeChargeCode int,     @TerrorismPremium money,     @CopyOptions BIT  )  AS  BEGIN   SET NOCOUNT ON     DECLARE @ControlNumber INT   DECLARE @EndorsementQuoteID INT   DECLARE @EndorsementQuoteGuid UNIQUEIDENTIFIER   DECLARE @OfficeID INT   DECLARE @CompanyLineGuid uniqueidentifier   DECLARE @PolicyEffectiveDate datetime        SELECT              @ControlNumber = Q.ControlNo,              @OfficeID = tblClientOffices.OfficeID,     @CompanyLineGuid = Q.CompanyLineGuid,     @PolicyEffectiveDate = Q.EffectiveDate    FROM tblQuotes Q    INNER JOIN tblClientOffices ON Q.QuotingLocationGuid = tblClientOffices.OfficeGuid    WHERE Q.QuoteGuid = @QuoteGuid     --Check for data errors and throw exception   IF (EXISTS(SELECT * FROM tblQuotes WHERE QuoteGuid = @QuoteGuid AND DateBound IS NULL))   BEGIN    RAISERROR('Quote Must Be In A Bound Status.',15,1)   END     IF (NOT EXISTS(SELECT * FROM lstQuoteStatusReasons where QuoteStatusID = 8 AND ID = @QuoteStatusReasonID))   BEGIN    RAISERROR('Invalid Quote Status Reason Id',15,1)   END     BEGIN TRANSACTION     IF OBJECT_ID('tempdb..#InvoiceInstallmentsTable') IS NOT NULL   BEGIN      DROP TABLE #InvoiceInstallmentsTable     END     CREATE TABLE #InvoiceInstallmentsTable   (    QuoteID int,    EffectiveDate datetime,    ExpirationDate datetime,    NumInstallments int,    Installment int,    InstallmentDueDate datetime,    BillingCode varchar(100),    InstallmentMod decimal(20, 19)     )          DECLARE @CatchNewQuoteGuid TABLE   (    NewQuoteGuid uniqueidentifier   )        --Create the endorsement record   INSERT INTO @CatchNewQuoteGuid   EXEC  spCopyQuote @QuoteGuid = @QuoteGuid,        @TransactionTypeID = 'R',        @QuoteStatusID = 8,        @QuoteStatusReasonID = @QuoteStatusReasonID,        @EndorsementEffective = @TransEffDate,        @EndtRequestDate = @DateBound,        @EndorsementComment = @Comment,        @EndorsementCalculationType = @EndorsementCalcType,        @copyOptions = @CopyOptions              --Get the Endorsement Quote Guid      SELECT TOP 1 @EndorsementQuoteGuid = Q.QuoteGuid, @EndorsementQuoteID = Q.QuoteID FROM tblQuotes Q WHERE ControlNo = @ControlNumber ORDER BY QuoteId DESC        --TFS 87687  CAll Ascot custom spcopyquote.   EXEC  GreyHawk_spCopyQuote     @newQuoteGuid = @EndorsementQuoteGuid,     @OldQuoteGuid = @QuoteGuid                 --Copy forward the quote option      INSERT INTO      tblQuoteOptions      (              QuoteOptionGUID,              OriginalQuoteOptionGUID,              QuoteGUID,              LineGUID,              CompanyLocationID,              DateCreated,              Bound,              Quote,              AdditionalComments,              CompanyInstallmentID,              AutoApplyFeeLog      )      SELECT              NEWID(),              QuoteOptionGUID,              @EndorsementQuoteGuid,              LineGUID,              CompanyLocationID,              GETDATE(),              1,              0,              AdditionalComments,              CompanyInstallmentID,              AutoApplyFeeLog      FROM              tblQuoteOptions      WHERE              QuoteGUID = @QuoteGuid     ----Update the expiration date of the original quote   --UPDATE   -- tblQuotes   --SET   -- ExpirationDate = (SELECT TOP 1 ExpirationDate FROM tblQuotes WITH (NOLOCK)   --       WHERE ControlNo=@ControlNumber ORDER BY QuoteID ASC)   --WHERE   -- QuoteGuid = @QuoteGuid        --At this point, the endorsement has been created.  We now      --want to copy forward the old premium record with the new amount      DECLARE @PremiumCursorQuoteOptionGuid uniqueidentifier   DECLARE @PremiumCursorChargeCode int   DECLARE @PremiumCursorOfficeID int   DECLARE @PremiumCursorPremium money   DECLARE @PremiumCursorCommissionable bit   DECLARE @PremiumCursorAddedDate datetime       DECLARE EndorsePremiumCursor Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT NewQuoteOptions.QuoteOptionGuid,      ISNULL(ChargeCodeTable.ChargeCode, tblFin_PolicyCharges.ChargeCode) AS ChargeCode,      tblQuoteOptionPremiums.OfficeId,      CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL       THEN CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN @TerrorismPremium ELSE @NewPremium END       ELSE CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END      END,      tblQuoteOptionPremiums.Commissionable,      GETDATE()    FROM tblQuoteOptions     INNER JOIN tblQuoteOptions NewQuoteOptions ON NewQuoteOptions.OriginalQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid    INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGuid = tblQuoteOptionPremiums.QuoteOptionGuid    INNER JOIN tblFin_PolicyCharges ON tblQuoteOptionPremiums.ChargeCode = tblFin_PolicyCharges.ChargeCode    INNER JOIN lstLines ON tblQuoteOptions.LineGuid = lstLines.LineGuid    OUTER APPLY (        SELECT ISNULL(Ascot_AL3QuoteDetailTable_v2.Premium, 0) AS Premium,          ISNULL(Ascot_AL3QuoteDetailTable_v2.Terrorism, 0) AS Terrorism,          Ascot_AL3QuoteDetailTable_v2.CompanyLocationCode,          Ascot_AL3QuoteDetailTable_v2.LineCode,          Ascot_AL3QuoteDetailTable_v2.StateID        FROM Ascot_AL3QuoteDetailTable_v2        WHERE Ascot_AL3QuoteDetailTable_v2.DnlTrId = @DnlTrID       ) AS NewPremiumTable    OUTER APPLY (        SELECT TOP 1 SubPC.ChargeCode,           SubPC.ChargeID        FROM tblFin_PolicyCharges SubPC        WHERE SubPC.ChargeID = tblFin_PolicyCharges.ChargeID        AND SubPC.StateID = NewPremiumTable.StateID       ) AS ChargeCodeTable    OUTER APPLY (        SELECT Ascot_AL3PolicyMasterTable_v2.CompanyCode AS CompanyLocationCode,          Ascot_AL3PolicyMasterTable_v2.LineCode        FROM Ascot_AL3PolicyMasterTable_v2        WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId = @DnlTrId       ) AS PolicyLevelImportTable    WHERE tblQuoteOptions.QuoteGuid = @QuoteGuid    AND  CASE WHEN NewPremiumTable.LineCode IS NULL       THEN CASE WHEN lstLines.LineID = PolicyLevelImportTable.LineCode THEN 1 ELSE 0 END       ELSE CASE WHEN lstLines.LineID = NewPremiumTable.LineCode THEN 1 ELSE 0 END      END = 1    AND  CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL       THEN CASE WHEN tblQuoteOptions.CompanyLocationID = PolicyLevelImportTable.CompanyLocationCode THEN 1 ELSE 0 END       ELSE CASE WHEN tblQuoteOptions.CompanyLocationID = NewPremiumTable.CompanyLocationCode THEN 1 ELSE 0 END      END = 1     OPEN EndorsePremiumCursor   FETCH EndorsePremiumCursor INTO @PremiumCursorQuoteOptionGuid, @PremiumCursorChargeCode, @PremiumCursorOfficeID, @PremiumCursorPremium, @PremiumCursorCommissionable, @PremiumCursorAddedDate     WHILE @@Fetch_status=0   BEGIN      INSERT INTO tblQuoteOptionPremiums    (     QuoteOptionGuid,     ChargeCode,     OfficeID,     Premium,     AnnualPremium,     Commissionable,     Added    )    VALUES    (     @PremiumCursorQuoteOptionGuid,     @PremiumCursorChargeCode,     @PremiumCursorOfficeID,     @PremiumCursorPremium,     @PremiumCursorPremium,     @PremiumCursorCommissionable,     @PremiumCursorAddedDate    )      FETCH EndorsePremiumCursor INTO @PremiumCursorQuoteOptionGuid, @PremiumCursorChargeCode, @PremiumCursorOfficeID, @PremiumCursorPremium, @PremiumCursorCommissionable, @PremiumCursorAddedDate   END--WHILE @@Fetch_status=0     CLOSE EndorsePremiumCursor    DEALLOCATE EndorsePremiumCursor      --for imports wherre fee amounts are given by the import source   IF EXISTS(SELECT * FROM Ascot_AL3FeesTable WHERE Ascot_AL3FeesTable.DnlTrId = @DnlTrId)   BEGIN      INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, FlatRate, Splittable, AutoApplied)    SELECT qo.QuoteOptionGUID,      CompanyLineFeeSetupIDTable.CompanyFeeID,      Ascot_AL3FeesTable.ChargeCode,      @OfficeID,      tblCompanyLines.CompanyLineGUID,      3,      --(4/2/24) updated to dynamically set payable bit      CompanyLineFeeSetupIDTable.Payable, --payable      Ascot_AL3FeesTable.FeeAmount,       0,      0    FROM  Ascot_AL3FeesTable    INNER JOIN lstLines FeeLine ON Ascot_AL3FeesTable.LineID = FeeLine.LineID    INNER JOIN tblCompanyLocations FeeCompanyLocation ON FeeCompanyLocation.CompanyLocationCode = Ascot_AL3FeesTable.CompanyLocationCode    INNER JOIN tblQuotes q ON q.QuoteGUID = @EndorsementQuoteGuid    INNER JOIN tblQuoteOptions qo ON q.QuoteGUID = qo.QuoteGUID     AND  qo.LineGUID = FeeLine.LineGUID     AND  qo.CompanyLocationID = Ascot_AL3FeesTable.CompanyLocationCode    INNER JOIN tblCompanyLines ON tblCompanyLines.LineGUID = FeeLine.LineGUID     AND  tblCompanyLines.CompanyLocationGUID = FeeCompanyLocation.CompanyLocationGUID     AND  tblCompanyLines.StateID = Ascot_AL3FeesTable.StateID     AND  CASE WHEN FeeLine.LineGUID <> q.LineGUID        THEN CASE WHEN tblCompanyLines.ParentCompanyLineGUID IS NOT NULL THEN 1 ELSE 0 END        ELSE CASE WHEN tblCompanyLines.ParentCompanyLineGUID IS NULL THEN 1 ELSE 0 END       END = 1    CROSS APPLY (        SELECT TOP 1 tblCompanyPolicyCharges.CompanyFeeID,            tblCompanyPolicyCharges.Payable        FROM tblCompanyPolicyCharges        WHERE tblCompanyPolicyCharges.ChargeCode = Ascot_AL3FeesTable.ChargeCode        AND ISNULL(tblCompanyPolicyCharges.CompanyLocationGuid, FeeCompanyLocation.CompanyLocationGUID) = FeeCompanyLocation.CompanyLocationGUID        AND ISNULL(tblCompanyPolicyCharges.LineGuid, FeeLine.LineGUID) = FeeLine.LineGUID        AND ISNULL(tblCompanyPolicyCharges.StateID, Ascot_AL3FeesTable.StateID) = Ascot_AL3FeesTable.StateID        AND DATEDIFF(d, tblCompanyPolicyCharges.Effective, q.EffectiveDate) >= 0        ORDER BY tblCompanyPolicyCharges.Effective DESC,           (CASE WHEN tblCompanyPolicyCharges.CompanyLocationGuid IS NOT NULL THEN 1 ELSE 0 END +           CASE WHEN tblCompanyPolicyCharges.LineGuid IS NOT NULL THEN 1 ELSE 0 END +           CASE WHEN tblCompanyPolicyCharges.StateID IS NOT NULL THEN 1 ELSE 0 END) DESC       ) AS CompanyLineFeeSetupIDTable    WHERE Ascot_AL3FeesTable.DnlTrId = @DnlTrId     END           --TFS 89800  SQL Ascot added spautoapplyfees   --it can be controlled via @SkipTaxesAndFees    IF @AutoApplyFees=1   BEGIN        DECLARE @FeeCursorQuoteOptionGuid uniqueidentifier      DECLARE EndorseFeeCursor Cursor FAST_FORWARD FORWARD_ONLY    FOR SELECT tblQuoteOptions.QuoteOptionGuid     FROM tblQuotes     INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID     WHERE tblQuotes.QuoteGuid = @EndorsementQuoteGuid      OPEN EndorseFeeCursor    FETCH EndorseFeeCursor INTO @FeeCursorQuoteOptionGuid      WHILE @@Fetch_status=0    BEGIN       exec spAutoApplyFees @PremiumCursorQuoteOptionGuid       FETCH EndorseFeeCursor INTO @FeeCursorQuoteOptionGuid    END--WHILE @@Fetch_status=0      CLOSE EndorseFeeCursor     DEALLOCATE EndorseFeeCursor       END     IF @BrokerCommissionFeeChargeCode IS NOT NULL   BEGIN      DECLARE @BrokerCommissionPercent decimal(9, 8)    DECLARE @BrokerFeeAppliesToLineGuid uniqueidentifier    DECLARE @BrokerFeeAppliesToCompanyLineGuid uniqueidentifier      SELECT @BrokerCommissionPercent = Ascot_AL3PolicyMasterTable_v2.BrokerCommissionPercent,      @BrokerFeeAppliesToLineGuid = lstLines.LineGUID,      @BrokerFeeAppliesToCompanyLineGuid = CL.CompanyLineGuid    FROM Ascot_AL3PolicyMasterTable_v2    INNER JOIN lstLines ON Ascot_AL3PolicyMasterTable_v2.LineCode = lstLines.LineID    Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode    Inner Join  tblCompanyLines CL on CL.LineGUID = lstLines.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and Ascot_AL3PolicyMasterTable_v2.StateOfIssuance = CL.StateID    WHERE DnlTrId = @DnlTrId      DECLARE @BrokerCommissionCompanyFeeID int    SELECT @BrokerCommissionCompanyFeeID = CompanyFeeID    FROM tblCompanyPolicyCharges    WHERE tblCompanyPolicyCharges.ChargeCode = @BrokerCommissionFeeChargeCode    AND tblCompanyPolicyCharges.LineGuid = @BrokerFeeAppliesToLineGuid      IF @BrokerCommissionCompanyFeeID IS NULL    BEGIN       raiserror('No CompanyFeeID setup found for ChargeCode and Line', 15, 1) with nowait;      END      INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, PercentageRate, Splittable, AutoApplied)    SELECT tblQuoteOptions.QuoteOptionGuid,      @BrokerCommissionCompanyFeeID,      @BrokerCommissionFeeChargeCode,      @OfficeID,      @BrokerFeeAppliesToCompanyLineGuid,      3,      0,      @BrokerCommissionPercent,       0,      0    FROM tblQuoteOptions    WHERE tblQuoteOptions.QuoteGuid = @EndorsementQuoteGuid     END        --Update Quote Option Data      UPDATE tblQuoteOptions SET Bound = 1 WHERE QuoteGuid = @EndorsementQuoteGuid     --If we have premium in tblQuoteOptionsPremiums or fees in tblQuoteOptionCharges that add up to something other than 0 then continue with the invoice generation and transfer to accounting   DECLARE @QuoteOptionPremium money = 0   SELECT @QuoteOptionPremium = SUM(tblQuoteOptionPremiums.Premium)   FROM tblQuotes   INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID   INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid   WHERE tblQuotes.QuoteGuid = @EndorsementQuoteGuid     DECLARE @QuoteOptionCharges money = 0   SELECT @QuoteOptionCharges = SUM(tblQuoteOptionCharges.amount)   FROM tblQuotes   INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID   INNER JOIN tblQuoteOptionCharges ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionCharges.QuoteOptionGuid   WHERE tblQuotes.QuoteGuid = @EndorsementQuoteGuid     IF @QuoteOptionPremium <> 0 OR @QuoteOptionCharges <> 0   BEGIN      --Send invoices to accounting (AccountingTransfer.vb)    DECLARE @InvoiceNum INT      DECLARE @NumInstallments int    DECLARE @ExpirationDate datetime    DECLARE @IMSInstallmentPlanID int = NULL      SELECT @NumInstallments = ISNULL(P.NumInstallments, 1),      @ExpirationDate = P.PolicyExpirationDate    FROM Ascot_AL3PolicyMasterTable_v2 P    WHERE P.DnlTrId = @DnlTrId      DECLARE @InstallmentPlanMappingTable TABLE    (     OptionName varchar(200),     SafeHarborNumInstallments int    )      INSERT INTO @InstallmentPlanMappingTable VALUES('Quarterly', 4)    INSERT INTO @InstallmentPlanMappingTable VALUES('Semi-Annual', 2)      SELECT TOP 1 @IMSInstallmentPlanID = tblCompanyLineInstallments.ID    FROM tblCompanyLineInstallments    INNER JOIN tblCompanyLines ON tblCompanyLineInstallments.CompanyLineID = tblCompanyLines.CompanyLineID    INNER JOIN @InstallmentPlanMappingTable T ON tblCompanyLineInstallments.OptionName = T.OptionName    WHERE tblCompanyLines.CompanyLineGUID = @CompanyLineGuid    AND T.SafeHarborNumInstallments = @NumInstallments          DECLARE @FirstInvoicePercentage decimal(20, 19)    DECLARE @FirstInvoiceTerm int    DECLARE @FirstInvoiceBillingCode varchar(100)    DECLARE @FirstInvoiceFromEffectiveDate bit    DECLARE @FirstInvoiceFromBillingDate bit    DECLARE @InstallmentPercentage decimal(20, 19)    DECLARE @InstallmentTerms int--how many days/months between installments    DECLARE @InstallmentFromEffectiveDate datetime    DECLARE @InstallmentFromBillingDate datetime    DECLARE @UseMonth bit--defines if months are used for @InstallmentTerms instead of days      IF @IMSInstallmentPlanID IS NOT NULL    BEGIN       SELECT @FirstInvoicePercentage = tblCompanyLineInstallments.DownpaymentPercentage,       @FirstInvoiceTerm = tblCompanyLineInstallments.DownpaymentTerm,       @FirstInvoiceBillingCode = lstBillingTypes.BillingCode,       @FirstInvoiceFromEffectiveDate = tblCompanyLineInstallments.DownpaymentFromEffectiveDate,       @FirstInvoiceFromBillingDate = tblCompanyLineInstallments.DownpaymentFromDateBilled,                  @InstallmentPercentage = ((1.0000 - tblCompanyLineInstallments.DownpaymentPercentage) / tblCompanyLineInstallments.NumPayments),       @InstallmentTerms = tblCompanyLineInstallments.InstallmentTerms,       @InstallmentFromEffectiveDate = tblCompanyLineInstallments.InstallmentFromEffectiveDate,       @InstallmentFromBillingDate = tblCompanyLineInstallments.InstallmentFromDateBilled,       @UseMonth = tblCompanyLineInstallments.UseMonth       FROM tblCompanyLineInstallments     LEFT JOIN lstBillingTypes ON tblCompanyLineInstallments.DownpaymentBillingTypeID = lstBillingTypes.BillingTypeID     WHERE ID = @IMSInstallmentPlanID      END    ELSE    BEGIN       DECLARE @ProducerPaymentMeasuredFrom_Endorsement varchar(10)     DECLARE @ProducerPaymentTermDays int = 0     SELECT @ProducerPaymentMeasuredFrom_Endorsement = tblCompanyLineTermsOfPayment.ProducerPaymentMeasuredFrom_Endorsement,       @ProducerPaymentTermDays = tblCompanyLineTermsOfPayment.DefaultProducerTermsOfPayment_Endorsement     FROM tblCompanyLines     INNER JOIN tblCompanyLineTermsOfPayment ON tblCompanyLines.CompanyLineID = tblCompanyLineTermsOfPayment.CompanyLineID     WHERE tblCompanyLines.CompanyLineGUID = @CompanyLineGuid     AND DATEDIFF(d, tblCompanyLineTermsOfPayment.Effective, @PolicyEffectiveDate) >= 0     ORDER BY Effective DESC     --E=Effective     --G=GAAP     --M=End of Month (billed?)     --B=Billed       DECLARE @TransactionMonths int = DATEDIFF(m, @TransEffDate, @ExpirationDate)       SET @FirstInvoicePercentage = 1.0000 / @NumInstallments     SET @FirstInvoiceTerm = @ProducerPaymentTermDays     SET @FirstInvoiceBillingCode = @BillingCode     SET @FirstInvoiceFromEffectiveDate = 1     SET @FirstInvoiceFromBillingDate = 0       SET @InstallmentPercentage = @FirstInvoicePercentage     SET @InstallmentTerms = @TransactionMonths / @NumInstallments     SET @InstallmentFromEffectiveDate = 1     SET @InstallmentFromBillingDate = 0     SET @UseMonth = 1       IF @ProducerPaymentMeasuredFrom_Endorsement = 'E'     BEGIN        SET @FirstInvoiceFromEffectiveDate = 1      SET @FirstInvoiceFromBillingDate = 0        SET @InstallmentFromEffectiveDate = 1      SET @InstallmentFromBillingDate = 0       END             IF @ProducerPaymentMeasuredFrom_Endorsement = 'B'     BEGIN        SET @FirstInvoiceFromEffectiveDate = 0      SET @FirstInvoiceFromBillingDate = 1        SET @InstallmentFromEffectiveDate = 0      SET @InstallmentFromBillingDate = 1       END       IF @InstallmentTerms < 1     BEGIN        DECLARE @TransactionDays int = DATEDIFF(d, @TransEffDate, @ExpirationDate)      SET @InstallmentTerms = @TransactionDays / @NumInstallments      SET @UseMonth = 0       END      END      IF EXISTS(SELECT * FROM #InvoiceInstallmentsTable)    BEGIN       DELETE FROM #InvoiceInstallmentsTable      END      WHILE (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) < @NumInstallments    BEGIN       IF (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) = 0     BEGIN        DECLARE @CalculatedDueDate datetime        IF @FirstInvoiceFromEffectiveDate = 1      BEGIN         SET @CalculatedDueDate = DATEADD(d, @FirstInvoiceTerm, @TransEffDate)        END      ELSE IF @FirstInvoiceFromBillingDate = 1      BEGIN         SET @CalculatedDueDate = DATEADD(d, @FirstInvoiceTerm, @DateBound)        END        --downpayment info or single invoice, use first invoice vars      INSERT INTO #InvoiceInstallmentsTable VALUES      (       @EndorsementQuoteID,        @TransEffDate,        @ExpirationDate,        @NumInstallments,        (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) + 1,        @CalculatedDueDate,       @FirstInvoiceBillingCode,       @FirstInvoicePercentage      )       END     ELSE     BEGIN        DECLARE @CurrentInstallmentNumber int = (SELECT COUNT(*) FROM #InvoiceInstallmentsTable) + 1        IF @InstallmentFromEffectiveDate = 1      BEGIN         IF @UseMonth = 1       BEGIN                   SET @CalculatedDueDate = DATEADD(m, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @TransEffDate)         END       ELSE       BEGIN                   SET @CalculatedDueDate = DATEADD(d, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @TransEffDate)         END        END      ELSE IF @InstallmentFromBillingDate = 1      BEGIN         IF @UseMonth = 1       BEGIN                   SET @CalculatedDueDate = DATEADD(m, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @DateBound)         END       ELSE       BEGIN                   SET @CalculatedDueDate = DATEADD(d, @InstallmentTerms * (@CurrentInstallmentNumber - 1), @DateBound)         END        END        INSERT INTO #InvoiceInstallmentsTable VALUES      (       @EndorsementQuoteID,        @TransEffDate,        @ExpirationDate,        @NumInstallments,        @CurrentInstallmentNumber,        @CalculatedDueDate,       @BillingCode,       @InstallmentPercentage      )       END      END        --need to loop here for installments    DECLARE @ProcessedInvoiceCount int = 0    WHILE @ProcessedInvoiceCount < @NumInstallments    BEGIN       DECLARE @InvoiceProcessInstallmentMod decimal(20, 19) = 1.0     DECLARE @InvoiceProcessInstallmentDueDate datetime = NULL     DECLARE @InvoiceProcessInstallmentBillingCode varchar(100) = NULL       SELECT @InvoiceProcessInstallmentMod = I.InstallmentMod,       @InvoiceProcessInstallmentDueDate = I.InstallmentDueDate,       @InvoiceProcessInstallmentBillingCode = I.BillingCode       FROM #InvoiceInstallmentsTable I     WHERE (I.Installment - 1) = @ProcessedInvoiceCount         EXECUTE spAccountingTransfer      0, --@Debug      @EndorsementQuoteGuid, --@QuoteGuid      @UserGuid, --@UserGuid      @OfficeID, --@OfficeID      1, --@IsEndorsement      @InvoiceProcessInstallmentMod, --@InstallmentBillingPremiumModFactor      @InvoiceProcessInstallmentDueDate, --@DueDate      @DateBound, --@DateBilled      NULL, --@Amount      @InvoiceProcessInstallmentBillingCode, --@BillingCode      '', --@InvoiceComments      NULL, --@ModifiesInvoiceNum      NULL, --@BillToAdditionalInterestID      --NULL, --@AccountCurrent      @InvoiceNum OUTPUT          --Loop through all the fees on the policy     DECLARE @QuoteOptionChargeAmount MONEY     DECLARE @QuoteOptionFeeID INT       DECLARE db_cursor CURSOR FOR       SELECT DISTINCT tblQuoteOptionCharges.Amount, tblQuoteOptionCharges.OptionFeeID     FROM tblQuotes     INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID     INNER JOIN tblQuoteOptionCharges ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionCharges.QuoteOptionGuid     INNER JOIN tblQuoteDetails ON tblQuotes.QuoteGUID = tblQuoteDetails.QuoteGUID     INNER JOIN tblCompanyLines ON tblQuoteDetails.CompanyLineGUID = tblCompanyLines.CompanyLineGUID AND tblQuoteOptions.LineGUID = tblCompanyLines.LineGUID     WHERE (tblQuotes.QuoteGUID = @EndorsementQuoteGuid)     AND (tblQuoteOptions.Bound = 1)     AND (tblQuoteOptionCharges.WaivedByUserGuid IS NULL)       OPEN db_cursor        FETCH NEXT FROM db_cursor INTO @QuoteOptionChargeAmount, @QuoteOptionFeeID       WHILE @@FETCH_STATUS = 0        BEGIN           EXEC spAccountingTransfer_Fees       0, --@Debug       @QuoteOptionFeeID, --@OptionFeeID       @InvoiceNum, --@InvoiceNum       @QuoteOptionChargeAmount, --@Amount       @InvoiceProcessInstallmentBillingCode --@BillingCode        FETCH NEXT FROM db_cursor INTO @QuoteOptionChargeAmount, @QuoteOptionFeeID     END          CLOSE db_cursor        DEALLOCATE db_cursor         --Post to Journal     EXEC spFin_PostInvoice @InvoiceNum          exec GreyHawk_AfterPostInvoice @invoicenum--Posts reinsurance data       SET @ProcessedInvoiceCount = @ProcessedInvoiceCount + 1      END--WHILE @ProcessedInvoiceCount < @NumInstallments        --Verify Premiums    EXEC spAccountingTransfer_VerifyPremiumsTransferred       @EndorsementQuoteGuid, --@quoteGuid       0, --@debug       0 --@reVerify      --Verify Fees    EXEC spAccountingTransfer_VerifyFeesTransferred @EndorsementQuoteGuid --@quoteGuid      --Verify Invoices were created    DECLARE @InvoiceCount INT    SELECT @InvoiceCount = COUNT(*) FROM tblFin_Invoices WHERE QuoteID = (SELECT QuoteID FROM tblQuotes WHERE QuoteGuid = @EndorsementQuoteGuid) AND Failed = 0      IF (@InvoiceCount <> @NumInstallments)    BEGIN     ROLLBACK TRANSACTION     RAISERROR('Invoice Count Incorrect.',15,1)     RETURN    END     END--IF @QuoteOptionPremium <> 0 OR @QuoteOptionCharges <> 0     DECLARE @OptionPremiumCheck money   DECLARE @BilledPremiumCheck money     SELECT @OptionPremiumCheck = SUM(tblQuoteOptionPremiums.Premium)   FROM tblQuotes   INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGuid = tblQuoteOptions.QuoteGuid   INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGUID = tblQuoteOptionPremiums.QuoteOptionGuid   WHERE tblQuotes.QuoteID = @EndorsementQuoteID     SELECT @BilledPremiumCheck = SUM(tblFIn_InvoiceDetails.AmtBilled)   FROM tblFin_Invoices   INNER JOIN tblFin_InvoiceDetails ON tblFin_Invoices.InvoiceNum = tblFin_InvoiceDetails.InvoiceNum   WHERE tblFin_Invoices.Failed = 0   AND tblFin_InvoiceDetails.ChargeType = 'P'   AND tblFin_Invoices.QuoteID = @EndorsementQuoteID     DECLARE @BadPremiumErrorMessage varchar(200)   SET @BadPremiumErrorMessage = 'Invoice premium is too different from option premium.' +           ' InvoicePremium: ' + dbo.FormatNumber(@BilledPremiumCheck, 2) +            '; OptionPremium ' + dbo.FormatNumber(@OptionPremiumCheck, 2) +           '; InstallmentMod: ' + dbo.FormatNumber(@InvoiceProcessInstallmentMod, 10)     IF ABS(@OptionPremiumCheck - @BilledPremiumCheck) > 3   BEGIN      RAISERROR(@BadPremiumErrorMessage,15,1)     END     --Update Quote Data   UPDATE    tblQuotes   SET    DateIssued = GETDATE(),    IssuedByUserID = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),    DateBound = GETDATE(),    BoundByUserId = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),    QuoteStatusId = 3   WHERE    QuoteGuid = @EndorsementQuoteGuid    AND DateIssued IS NULL        UPDATE Ascot_AL3PolicyMasterTable_v2 SET CreatedQuoteID = @EndorsementQuoteID   FROM Ascot_AL3PolicyMasterTable_v2   WHERE DnlTrID = @DnlTrID      -- --we need to reset the expiration date    -- --get the current quoteid, controlno, and expiration date    -- DECLARE @ControlNo int    -- DECLARE @CurrentExpirationDate datetime    -- DECLARE @QuoteID int    -- SELECT @ControlNo=ControlNo, @CurrentExpirationDate=dbo.DateOnly(ExpirationDate), @QuoteID=QuoteID FROM tblQuotes WHERE QuoteGuid=@EndorsementQuoteGuid       -- --find the first original expiration date if set on previous transactions    -- DECLARE @oQuoteID int    -- SELECT @oQuoteID=MAX(q2.QuoteID) FROM tblQuotes q INNER JOIN tblQuotes2 q2 ON q.QuoteID=q2.QuoteID WHERE ControlNo=@ControlNo AND q2.QuoteID<@QuoteID AND dbo.DateOnly(q2.OriginalExpirationDate)<>dbo.DateOnly(@CurrentExpirationDate) AND q2.OriginalExpirationDate IS NOT NULL         -- --if that value is not set use the expiration date from the original bind    -- DECLARE @OriginalExpDate datetime    -- IF @oQuoteID IS NULL    --SELECT @OriginalExpDate=dbo.DateOnly(ExpirationDate) FROM tblQuotes WHERE ControlNo=@ControlNo AND OriginalQuoteGuid IS NULL    -- ELSE    --SELECT @OriginalExpDate=dbo.DateOnly(OriginalExpirationDate) FROM tblQuotes2 WHERE QuoteID=@oQuoteID      -- IF @OriginalExpDate IS NOT NULL     --UPDATE tblQuotes SET ExpirationDate=@OriginalExpDate WHERE QuoteGuid=@EndorsementQuoteGuid     DROP TABLE #InvoiceInstallmentsTable      COMMIT TRANSACTION    END  
Ascot_AL3TransferData_Zywave	CREATE PROCEDURE [dbo].[Ascot_AL3TransferData_Zywave]   @ImportLogID int  AS  BEGIN      DECLARE @CaptiveLineGuid uniqueidentifier   --SELECT @SuretyLineGuid = LineGuid FROM lstLines WHERE LineName = 'Captive - General Liability'     DECLARE    @ProducerLocationID INT,  @LineID INT,  @CompanyLocationCode INT,  @StartingOnPoliciesEffective smalldatetime,   @QuotingLocationGuid UNIQUEIDENTIFIER,  @IssuingLocationGuid UNIQUEIDENTIFIER,   @UnderwriterGuid UNIQUEIDENTIFIER,   @IssuedByUserID INT,  @BoundByUserID INT,  @CostCenterID INT,   @BrokerCommissionFeeChargeCode INT,   @ProgramID INT,   @UnderwritingAssistantGuid UNIQUEIDENTIFIER,   @AutoApplyFees INT,   @CopYNotesandDocs BIT,   @ProducerContactID INT,   @SourceID INT,  @BillingTypeID INT,  @CaptiveGLPrimaryPremOpsClaimsMade INT,  @CaptiveGLPrimaryPremOpsOccurrence INT,  @CaptiveGLPrimaryProductsClaimsMade INT,  @CaptiveGLPrimaryProductsOccurrence INT,  @CaptiveGLPrimaryTRIAClaimsMade INT,  @CaptiveGLPrimaryTRIAOccurrence INT,  @CaptiveGLPrimaryOtherClaimsMade INT,  @CaptiveGLPrimaryOtherOccurrence INT,   @CaptiveGLPrimaryLiquorClaimsMade INT,  @CaptiveGLPrimaryLiquorOccurrence INT,    @CaptiveGLXOLPremOpsClaimsMade INT,  @CaptiveGLXOLPremOpsOccurrence INT,  @CaptiveGLXOLProductsClaimsMade INT,  @CaptiveGLXOLProductsOccurrence INT,  @CaptiveGLXOLTRIAClaimsMade INT,  @CaptiveGLXOLTRIAOccurrence INT,  @CaptiveGLXOLOtherClaimsMade INT,  @CaptiveGLXOLOtherOccurrence INT,   @CaptiveGLXOLLiquorClaimsMade INT,  @CaptiveGLXOLLiquorOccurrence INT        SELECT @ProducerLocationID  =  ProducerLocationID,  @LineID  =   v.LineID ,  @CompanyLocationCode  = CompanyLocationCode,   @StartingOnPoliciesEffective  = StartingOnPoliciesEffective,  @QuotingLocationGuid =  QuotingLocationGuid,  @IssuingLocationGuid =  IssuingLocationGuid,  @UnderwriterGuid =  UnderwriterGuid,  @IssuedByUserID = IssuedByUserID,  @BoundByUserID  = BoundByUserID,  @CostCenterID =  CostCenterID,  @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,  @ProgramID = ProgramID,  @UnderwritingAssistantGuid = UnderwritingAssistantGuid,  @AutoApplyFees = AutoApplyFees,  @CopYNotesandDocs = CopYNotesandDocs,  @ProducerContactID  =  ProducerContactID,  @SourceID =  SourceID,  @BillingTypeID  = BillingTypeID,  @CaptiveLineGuid = LineGuid    from ASCOT_tblAL3ProgramConfigurations_V2  v join lstlines l on l.LineID = V.LineID  where l.LineName like '%Captive - General Liability%'      SELECT @IssuingLocationGuid= CompanyLocationGuid from tblCompanyLocations  where LocationName in(Select SUBSTRING(Company, 1, CHARINDEX('(', Company) - 2) from ASCOT_AL3ImportPolicy_Zywave where importlogid=@importlogId)      select @CaptiveGLPrimaryPremOpsOccurrence=Lineid from lstlines where linename ='Captive GL Primary PremOps - Occurrence'  select @CaptiveGLPrimaryOtherOccurrence=Lineid from lstlines where linename ='Captive GL Primary Other - Occurrence'  select @CaptiveGLPrimaryPremOpsClaimsMade=Lineid from lstlines where linename ='Captive GL Primary PremOps - Claims Made'  select @CaptiveGLPrimaryLiquorClaimsMade=Lineid from lstlines where linename ='Captive GL Primary Liquor - Claims Made'  select @CaptiveGLPrimaryProductsClaimsMade=Lineid from lstlines where linename ='Captive GL Primary Products - Claims Made'  select @CaptiveGLPrimaryOtherClaimsMade=Lineid from lstlines where linename ='Captive GL Primary Other - Claims Made'  select @CaptiveGLPrimaryTRIAOccurrence=Lineid from lstlines where linename ='Captive GL Primary TRIA - Occurrence'  select @CaptiveGLPrimaryProductsOccurrence=Lineid from lstlines where linename ='Captive GL Primary Products - Occurrence'  select @CaptiveGLPrimaryTRIAClaimsMade=Lineid from lstlines where linename ='Captive GL Primary TRIA - Claims Made'  select @CaptiveGLPrimaryLiquorOccurrence=Lineid from lstlines where linename ='Captive GL Primary Liquor - Occurrence'      select @CaptiveGLXOLPremOpsOccurrence=Lineid from lstlines where linename ='Captive GL XOL PremOps - Occurrence'  select @CaptiveGLXOLOtherOccurrence=Lineid from lstlines where linename ='Captive GL XOL Other - Occurrence'  select @CaptiveGLXOLPremOpsClaimsMade=Lineid from lstlines where linename ='Captive GL XOL PremOps - Claims Made'  select @CaptiveGLXOLLiquorClaimsMade=Lineid from lstlines where linename ='Captive GL XOL Liquor - Claims Made'  select @CaptiveGLXOLProductsClaimsMade=Lineid from lstlines where linename ='Captive GL XOL Products - Claims Made'  select @CaptiveGLXOLOtherClaimsMade=Lineid from lstlines where linename ='Captive GL XOL Other - Claims Made'  select @CaptiveGLXOLTRIAOccurrence=Lineid from lstlines where linename ='Captive GL XOL TRIA - Occurrence'  select @CaptiveGLXOLProductsOccurrence=Lineid from lstlines where linename ='Captive GL XOL Products - Occurrence'  select @CaptiveGLXOLTRIAClaimsMade=Lineid from lstlines where linename ='Captive GL XOL TRIA - Claims Made'  select @CaptiveGLXOLLiquorOccurrence=Lineid from lstlines where linename ='Captive GL XOL Liquor - Occurrence'         INSERT INTO ASCOT_AL3PolicyMasterTable_V2   (   [ProgramID],   [GroupNumber],   [PolicyNumber],   [PolicyEffectiveDate],   [PolicyExpirationDate],   [PolicyIndicator],   [TransactionEffectiveDate] ,   [ExpringPolicyNumber],   [ClaimsMadePolicyIndicator],   [PriorActions],   [RetroactiveDate],   [DiscoveryDate],   [InsuredName],   [DBAName] ,   [InsuredAddress],   [InsuredCity] ,   [InsuredState],   [InsuredZip],   [InsuredCounty],   [RiskLocationIndicator],   [SICCode],   [TypeOfPolicy],   [SystemDate],   [AccountingDate],   [SubmissionDate],   [PremiumAmount],   [PremiumState],   [CompanyCode],   [CompanyContactCode],   [ProducerCode],   [ProducerContactCode],   [QuotingOfficeLocationCode],   [IssuingOfficeLocationCode],   [PolicyTransactionID],   [LineCode],   [StateOfIssuance],   [AccountNumber],   [RewriteOfAccountNumber],   [RenewalOfAccountNumber],   [InsuredID] ,   [DateIssued],   [Error],   [ErrorTime] ,   [DateProcessed],   [ErrorMessage],   [ProcessedBy] ,   [Note],   [DnlTrId],   [DocumentImage],   [DocumentStoreGuid],   [DocStoreFileAssociation],   [DocStoreFileName],   [DocStoreCompressed],   [DocStoreAssociatedEntityType],   [DocStoreAssociatedEntityName],   [DocStoreAssociatedEntityFormName],   [DocStoreContext],   [DocStoreOriginalFileSize],   [CreatedQuoteID],   [BrokerCommissionPercent],   [TerrorismPremium],   [NumInstallments],   [QuoteStatusReasonID],   [EndorsementComment],   [ImportLogID],   [BillDate],   [EndorsementType],   [BusinessTypeID] ,   [InsuredFirstName],   [InsuredLastName],   [InsuredAddress2] ,   [producerComm],   [companyComm],   UniqueTransactionID   )       SELECT    --ProgramID      0,--@ProgramID,--ASCOT_AL3ImportPolicy_Zywave.ProgramID,      --GroupNumber      NULL,      --PolicyNumber      ASCOT_AL3ImportPolicy_Zywave.PolicyNo,      --PolicyEffectiveDate    --MHW -- Do a case here for endts to pick up the right dates      --CONVERT(varchar(11), CONVERT(datetime, RISKINCEPTIONDATE), 101),      --case when isdate(ASCOT_AL3ImportPolicy_AmFed.RISKINCEPTIONDATE) = 1 then convert(datetime, ASCOT_AL3ImportPolicy_AmFed.RISKINCEPTIONDATE) else NULL end,      --case when isdate(ASCOT_AL3ImportPolicy_Highland_Part2.RISKINCEPTIONDATE) = 1 then convert(varchar(11), convert(datetime, ASCOT_AL3ImportPolicy_Highland_Part2.RISKINCEPTIONDATE), 101) else NULL end,      --case when isdate(ASCOT_AL3ImportPolicy_AmFed.effectivedate) = 1 then convert(varchar(11), convert(datetime, ASCOT_AL3ImportPolicy_AmFed.effectivedate), 101) else NULL end,      ASCOT_AL3ImportPolicy_Zywave.PolicyEffDate,                --PolicyExpirationDate          ASCOT_AL3ImportPolicy_Zywave.PolicyExpDate,            --PolicyIndicator           CASE ASCOT_AL3ImportPolicy_Zywave.TransType                    when 'NB' THEN 'N'--New Business                   when 'CN' THEN 'C'--cancellation         when 'EN' THEN 'E'--endorsement         when 'RB' Then 'R' -- Renewal         when 'New Business' THEN 'N'--New Business         when 'Cancel' THEN 'C'--cancellation         when 'New' THEN 'N'--New Business         when 'Cancellation' THEN 'C'--cancellation         when 'Renewal' THEN 'R'--Renewal         when 'Endorsement' THEN 'E'--endorsement         when 'Reinstate' then 'W'         when 'Cancellation - Flat' THEN 'C'--cancellation  Pro Rated          when 'Cancellation - Pro-Rated' THEN 'C'--cancellation  Pro Rated          when 'Soft Delete' THEN 'C'       when 'Rewrite' THEN 'R'         ELSE ''        END,      --TransactionEffectiveDate      ASCOT_AL3ImportPolicy_Zywave.TransactionEffectiveDate,         --ExpiringPolicyNumber      NULL,  -- Not being supplied by Amfed       --ClaimsMadePolicyIndicator      NULL,      --PriorActions      NULL,      --RetroactiveDate      NULL,      --DiscoveryDate      NULL,      --InsuredName         ASCOT_AL3ImportPolicy_Zywave.InsuredName,      --CASE WHEN ISNULL(ASCOT_AL3ImportPolicy_Zywave.InsuredName, '') <> ''      -- THEN ASCOT_AL3ImportPolicy_Zywave.InsuredName           --END,    --DBAName      NULL,      --InsuredAddress          ASCOT_AL3ImportPolicy_Zywave.InsuredAddress1,      --InsuredCity          ASCOT_AL3ImportPolicy_Zywave.InsuredCity,      --InsuredState              ASCOT_AL3ImportPolicy_Zywave.InsuredState,            --InsuredZip          ASCOT_AL3ImportPolicy_Zywave.InsuredZip,      --InsuredCounty      NULL,            --RiskLocationindicator      NULL,      --SICCode      NULL,      --TypeOfPolicy      --NULL,      ASCOT_AL3ImportPolicy_Zywave.PolicyType,        --SystemDate      CONVERT(varchar(11), GETDATE(), 101),      --AccountingDate      CONVERT(varchar(11), GETDATE(), 101),      --SubmissionDate      CONVERT(varchar(11), GETDATE(), 101),      --PremiumAmount            --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,   ASCOT_AL3ImportPolicy_Zywave.TotalPremium,        --PremiumState        ASCOT_AL3ImportPolicy_Zywave.InsuredState,           --CompanyCode              CompanyCodeTable.CompanyLocationCode,            --CompanyContactCode      0,      --ProducerCode         ProducerCodeTable.ProducerLocationID,      --ProducerContactCode      0, -- select * from tblProducerContacts where fname like '%Amfed AIC%'      --QuotingOfficeLocationCode      0,      --IssuingOfficeLocationCode      0,      --PolicyTransactionID     ---policytransactionid ---use the id column from ASCOT_AL3ImportPolicy_BondPro table  and populate the policytransaction id in the master table      ASCOT_AL3ImportPolicy_Zywave.ID,      --LineCode          --select * from lstLines where LineName like '%compensation%'      @LineID,      --StateOfIssuance            ASCOT_AL3ImportPolicy_Zywave.InsuredState,      --AccountNumber      --MHW Need to append policy Number       ASCOT_AL3ImportPolicy_Zywave.PolicyNo AS AccountNumber,        --RewriteOfAccountNumber     case when(ASCOT_AL3ImportPolicy_Zywave.transtype='Rewrite') then ASCOT_AL3ImportPolicy_Zywave.PolicyNo else      NULL END,  -- AmFed is not doing rewrites       --RenewalOfAccountNumber          NULL,--ASCOT_AL3ImportPolicy_AmFed.expPolicy,      --InsuredID          --MHW Anderson said we need some sort of ID to uniquely identify the insured.            ASCOT_AL3ImportPolicy_Zywave.PolicyNo,      --DateIssued           null,      --Error      NULL,      --ErrorTime       NULL,      --DateProcessed      --ASCOT_AL3ImportPolicy_Zywave.Datecreated,--20/08      NULL,    --ErrorMessage      NULL,      --ProcessedBy      NULL,      --Note      NULL,      --DnlTrId      NEWID(),      --DocumentImage      NULL,      --DocumentStoreGuid      NULL,      --DocStoreFileAssociation      NULL,      --DocStoreFileName      NULL,      --DocStoreCompressed      NULL,      --DocStoreAssociatedEntityType      NULL,      --DocStoreAssociatedEntityName      NULL,      --DocStoreAssociatedEntityFormName      NULL,      --DocStoreContext      NULL,      --DocStoreOriginalFileSize      NULL,      --CreatedQuoteID      NULL,      --BrokerCommissionPercent      NULL,      --TerrorismPremium        --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1     --                  THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)    --                  ELSE 0    --              END,        0,      --NumInstallments          NULL,--1,      --QuoteStatusReasonID      NULL,      --EndorsementComment      NULL,      --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID,      --BillDate      NULL,    --EndodrsementType      NULL,      --BusinessType      NULL,        --InusredFirstName      NULL,       --InusredLasttName      NULL,       --InsuredAddress2      ASCOT_AL3ImportPolicy_Zywave.InsuredAddress2,          ASCOT_AL3ImportPolicy_Zywave.ProducerCommission, --producerComm,        NULL,--companyComm      --UniqueTransactionID      null --?     FROM  ASCOT_AL3ImportPolicy_Zywave   OUTER APPLY (       SELECT TOP 1 tblProducerLocations.ProducerLocationID       FROM tblProducerLocations       --WHERE tblProducerLocations.[Name] = ASCOT_AL3ImportPolicy_BondPro.ProducerSuppliedInSourcedata       WHERE tblProducerLocations.ProducerLocationGUID = ASCOT_AL3ImportPolicy_Zywave.ProducerLocationGUID      ) AS ProducerCodeTable   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = ASCOT_AL3ImportPolicy_Zywave.InsuredState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable     --OUTER APPLY (   --   SELECT TOP 1 tblQuotes.ControlNo,   --      tblQuotes.QuoteGUID,   --      tblQuotes.QuoteID,   --      tblQuotes.AccountNumber   --     FROM tblQuotes   --     WHERE tblQuotes.PolicyNumber = ASCOT_AL3ImportPolicy_AmFed.ExpiringPolicyNumber   --     ORDER BY tblQuotes.QuoteID DESC   --    ) AS ExpiringPolicyTable       WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     --DnlTrId has been created so now set it in the data tables       UPDATE ASCOT_AL3ImportPolicy_Zywave SET DnlTrId = AL3MasterTable.DnlTrId   FROM ASCOT_AL3ImportPolicy_Zywave   CROSS APPLY (       SELECT TOP 1 ASCOT_AL3PolicyMasterTable_V2.DnlTrId       FROM ASCOT_AL3PolicyMasterTable_V2       WHERE ASCOT_AL3PolicyMasterTable_V2.PolicyTransactionID = ASCOT_AL3ImportPolicy_Zywave.ID       --policytransactionid ---use the id column from ASCOT_AL3ImportPolicy_AmFed table  since thsi is an import from excel vs comming from existing database where we can use the quoteid of teh source.       AND ASCOT_AL3PolicyMasterTable_V2.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID       )AS AL3MasterTable   WHERE ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID           -- Below is uncommented out because AmFed does policy level producer commissions.  We need to update tblquotedetails eventually with the commsions   --Below should also be commented out if e are doing package policies.     ----------------------------CaptiveGLPrimaryPremOpsClaimsMade      INSERT INTO Ascot_AL3QuoteDetailTable_v2(DnlTrId, CompanyLocationCode, LineCode, StateID, Premium, Terrorism, ImportLogID)   SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryPremOpsClaimsMade,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryPremOpsClaimsMade,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL       --------------------------------------------------------------CaptiveGLPrimaryPremOpsOccurrence  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryPremOpsOccurrence,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryPremOpsOccurrence,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLPrimaryProductsClaimsMade  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryProductsClaimsMade,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryProductsClaimsMade,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLPrimaryProductsOccurrence  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryProductsOccurrence,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryProductsOccurrence,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLPrimaryTRIAClaimsMade  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryTRIAClaimsMade,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryTRIAClaimsMade,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID       UNION ALL  --------------------------------------------------------------CaptiveGLPrimaryTRIAOccurrence  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryTRIAOccurrence,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryTRIAOccurrence,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID       UNION ALL  --------------------------------------------------------------CaptiveGLPrimaryOtherClaimsMade  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryOtherClaimsMade,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryOtherClaimsMade,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLPrimaryOtherOccurrence  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryOtherOccurrence,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryOtherOccurrence,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLPrimaryLiquorClaimsMade  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryLiquorClaimsMade,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryLiquorClaimsMade,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLPrimaryLiquorOccurrence  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLPrimaryLiquorOccurrence,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLPrimaryLiquorOccurrence,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID  ---------------------------------------------------------------------------------------------------------------------------------------------  Union ALL  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLXOLPremOpsClaimsMade,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLXOLPremOpsClaimsMade,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLXOLPremOpsOccurrence  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLXOLPremOpsOccurrence,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLXOLPremOpsOccurrence,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLXOLProductsClaimsMade  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLXOLProductsClaimsMade,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLXOLProductsClaimsMade,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLXOLProductsOccurrence  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLXOLProductsOccurrence,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLXOLProductsOccurrence,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID     UNION ALL  --------------------------------------------------------------CaptiveGLXOLTRIAClaimsMade  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLXOLTRIAClaimsMade,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLXOLTRIAClaimsMade,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium), 2)     --                 ELSE 0     --             END,      0,    --ImportLogID      ASCOT_AL3ImportPolicy_Zywave.ImportLogID       FROM  ASCOT_AL3ImportPolicy_Zywave     inner join Ascot_AL3ImportPremiumState_Zywave on Ascot_AL3ImportPremiumState_Zywave.ZywaveID = ASCOT_AL3ImportPolicy_Zywave.ZywaveID    and Ascot_AL3ImportPremiumState_Zywave.ImportLogID = ASCOT_AL3ImportPolicy_Zywave.ImportLogID   OUTER APPLY (       SELECT TOP 1 tblCompanyLocations.CompanyLocationCode       FROM tblCompanyLines       INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID       WHERE tblCompanyLines.LineGUID = @CaptiveLineGuid       AND tblCompanyLines.StateID = Ascot_AL3ImportPremiumState_Zywave.RiskState       --AND tblCompanyLines.CompanyLocationGUID = ASCOT_AL3ImportPolicy_Zywave.Company      ) AS CompanyCodeTable      WHERE  ASCOT_AL3ImportPolicy_Zywave.ImportLogID = @ImportLogID       UNION ALL  --------------------------------------------------------------CaptiveGLXOLTRIAOccurrence  SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_Zywave.DnlTrId,      --CompanyLocationCode,           CompanyCodeTable.CompanyLocationCode,      --LineCode,       @CaptiveGLXOLTRIAOccurrence,      --StateID,           Ascot_AL3ImportPremiumState_Zywave.RiskState,      --Premium,         --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.GrossPremium) = 1      --                THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_BondPro.GrossPremium), 2)      --                ELSE 0      --            END,    Ascot_AL3ImportPremiumState_Zywave.CaptiveGLXOLTRIAOccurrence,      --Terrorism,      --CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_BondPro.TerrorismPremium) = 1      --                 THEN ROUND(CONVERT(money, A
Ascot_ImportAL3_ENDORSE_Zywave_Captive_GL	CREATE PROC  [dbo].[Ascot_ImportAL3_ENDORSE_Zywave_Captive_GL]    @ImportLogID INT  AS  BEGIN   DECLARE @TransType VARCHAR(25)   DECLARE @EnteredDate DATETIME    DECLARE @WrittenPremium MONEY   DECLARE @PolicyNumber VARCHAR(50)   DECLARE @PolicyTransactionID INT -- TFS 70502  USed to prevent duplicate trasnaction from being created should the feed run multiple times on same policy   DECLARE @CompanyLocationCode INT   DECLARE @UniqueTransactionID varchar(200) -- TFS 90577 -- Used to identify duplicate transaction uploads   DECLARE @UniqueTransactionIDExists INT   DECLARE @AccounNumber VARCHAR(50)     DECLARE @ImportSource INT   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID     IF OBJECT_ID('tempdb..#PolsToEnd') IS NOT NULL BEGIN DROP TABLE #PolsToEnd END   SELECT --TOP 500      *    INTO  #PolsToEnd   FROM  [dbo].Ascot_AL3PolicyMasterTable_v2   WHERE  ImportLogID = @ImportLogID   AND   ISNULL(Error, 0) = 0      AND DateProcessed IS NULL      AND PolicyIndicator IN ('E', 'C', 'W')          --AND policynumber= 'HABX2010000001-01'--'HABP2010000001-01'   ORDER BY TransactionEffectiveDate     DECLARE @DnlTrId UNIQUEIDENTIFIER     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToEnd ORDER BY AccountNumber, PolicyTransactionID     OPEN Cur   FETCH Cur INTO @DnlTrId     DECLARE @preblocking int   SET @preblocking=1     WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 5 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:05' --5 SECONDS     END    END          IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL    BEGIN       DROP TABLE #ConfigurationsTable      END      CREATE TABLE #ConfigurationsTable    (     ID int,     StartingOnPoliciesEffective smalldatetime,     QuotingLocationGuid uniqueidentifier,     IssuingLocationGuid uniqueidentifier,     UnderwriterGuid uniqueidentifier,     IssuedByUserID int,     BoundByUserID int,     CostCenterID int,     BrokerCommissionFeeChargeCode int,     UnderwritingAssistantGuid uniqueidentifier,     AutoApplyFees bit,     CompanyLocationCode INT,     UseUWCloseDate BIT    )      WHILE @@Fetch_status=0     BEGIN      BEGIN TRY         BEGIN TRAN          SELECT @TransType = PolicyIndicator,           @EnteredDate = DateIssued,          @WrittenPremium = ISNULL(PremiumAmount, 0),           @PolicyNumber = Ascot_AL3PolicyMasterTable_v2.PolicyNumber,          @PolicyTransactionID = Ascot_AL3PolicyMasterTable_v2.PolicyTransactionID,  --TFS 70502           @CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode,          @UniqueTransactionID = Ascot_AL3PolicyMasterTable_v2.UniqueTransactionID, -- TFS 91066 added logic to use UniqueTransactionID          @AccounNumber = Ascot_AL3PolicyMasterTable_v2.AccountNumber        FROM Ascot_AL3PolicyMasterTable_v2         WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId=@DnlTrId                Declare @IssuingLocationGuid UNIQUEIDENTIFIER, @QuotingLocationguid UNIQUEIDENTIFIER        SELECT @QuotingLocationguid=OfficeGUID from tblclientoffices  where Location in(Select SUBSTRING(Company, 1, CHARINDEX('(', Company) - 2) from ASCOT_AL3ImportPolicy_Zywave where importlogid=@importlogId)                Select @IssuingLocationGuid =ParentOfficeGuid from tblclientoffices  where OfficeGUID=@QuotingLocationguid          INSERT INTO #ConfigurationsTable        SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,           Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,           --Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,           @QuotingLocationguid,           @IssuingLocationGuid,           --Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,           Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,           Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,           Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,           Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,           Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,           Ascot_tblAL3ProgramConfigurations_v2.UnderwritingAssistantGuid,           Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,                             ASCOT_tblAL3ProgramConfigurations_V2.CompanyLocationCode,           ASCOT_tblAL3ProgramConfigurations_V2.UseUWCloseDate          FROM  Ascot_tblAL3ProgramConfigurations_v2        INNER JOIN Ascot_AL3PolicyMasterTable_v2 P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)         AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID         AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode         AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0         AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource        WHERE  P.DnlTrId = @DnlTrId          DECLARE @ConfigurationID int          SELECT TOP 1 @ConfigurationID = C.ID        FROM #ConfigurationsTable C        WHERE C.CompanyLocationCode = @CompanyLocationCode              ORDER BY C.StartingOnPoliciesEffective DESC          ---DECLARE @QuotingLocationGuid uniqueidentifier        --DECLARE @IssuingLocationGuid uniqueidentifier        DECLARE @UnderwriterGuid uniqueidentifier        DECLARE @IssuedByUserID int        DECLARE @BoundByUserID int        DECLARE @CostCenterID int        DECLARE @BrokerCommissionFeeChargeCode int        DECLARE @UnderwritingAssistantGuid uniqueidentifier        DECLARE @AutoApplyFees bit        DECLARE @UseUWCloseDate BIT = 0 -- TFS 92747          SELECT @QuotingLocationGuid = QuotingLocationGuid,          @IssuingLocationGuid = IssuingLocationGuid,          @UnderwriterGuid = UnderwriterGuid,          @IssuedByUserID = IssuedByUserID,          @BoundByUserID = BoundByUserID,          @CostCenterID = CostCenterID,          @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,          @UnderwritingAssistantGuid = UnderwritingAssistantGuid,          @AutoApplyFees = AutoApplyFees,          @UseUWCloseDate = UseUWCloseDate        FROM #ConfigurationsTable        WHERE ID = @ConfigurationID          IF @ConfigurationID IS NULL        BEGIN         raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;        END                        /*TFS 90900          add logic to determine if the transaction was already imported             */         SET @UniqueTransactionIDExists = 0           SELECT @UniqueTransactionIDExists = 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = @AccounNumber          AND SubT.UniqueTransactionID = @UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> @DnlTrId          and l.ImportSource = @ImportSource          and @UniqueTransactionID IS NOT NULL -- Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.          IF @UniqueTransactionIDExists = 1          BEGIN         raiserror('Policy Transaction previously imported', 15, 1) with nowait;        END                  --TFS 87326        DECLARE @MaxCtrlNum  int        DECLARE @MaxCtrlNumEffective smalldatetime        DECLARE @QuoteGuid uniqueidentifier        DECLARE @CurrentQuoteStatusID int          --TFS 88331  This quoting location clause is neccessary as BOLT policies (Excess Casualty) because they need to identify the  specific transaction         --as the source and destimation polcies are both in Ascot database but under different quoting office.        --SELECT    top 1  @MaxCtrlNum = controlno , @MaxCtrlNumEffective = EffectiveDate, @QuoteGuid = QuoteGUID, @CurrentQuoteStatusID = QuoteStatusID from tblQuotes         SELECT    top 1  @MaxCtrlNum = controlno , @MaxCtrlNumEffective = EffectiveDate, @CurrentQuoteStatusID = QuoteStatusID from tblQuotes         where PolicyNumber = @PolicyNumber          and QuotingLocationGuid = @QuotingLocationGuid                               order by ControlNo desc, QuoteID desc                --make sure no prev errors        DECLARE @PrevErrors int        SELECT @PrevErrors=COUNT(*)         FROM  Ascot_AL3PolicyMasterTable_v2         WHERE  Error=1            AND DateProcessed IS NULL                     AND PolicyNumber = @PolicyNumber           AND ErrorMessage NOT IN ('Ignore 0 Premium Endorsement')           -- TFS 70502            AND PolicyTransactionID < @PolicyTransactionID -- TFS 70502 Thsi will check the previous transaction id           and Note = @MaxCtrlNum           AND  DATEDIFF(d, PolicyEffectiveDate, @MaxCtrlNumEffective) <= 0                                 -- TFS 87326  The purpose is for the  error to only check errors on the latest control number. This will occur for rewrites and in come cases renewals.           -- 1:  Get the latest control number for the policy being processed that also has the  same policy  effective date           -- 2:  Add the control number here in where clause to limit the prcessing to the  latest ctrl           ---3:  compare the control number from step 2 to the note of teh master table for the polciy being processed and make sure he master note is equal controlnumber            IF @PrevErrors > 0         BEGIN          raiserror('Previous transactions had errors.', 15, 1) with nowait;         END                         DECLARE @QuoteID int        DECLARE @TransEffDate datetime        DECLARE @EndorsementComment varchar(50)              DECLARE @EndorsementCalcType char(1)        DECLARE @NewPremium money        DECLARE @TerrorismPremium money        DECLARE @QuoteStatusID int              DECLARE @DateBound datetime        DECLARE @UserGuid uniqueidentifier        DECLARE @BillingCode char(5)              DECLARE @ControlNo int        DECLARE @ExpirationDate datetime        DECLARE @BillingTypeID INT        DECLARE @producerComm DECIMAL(13,10) = NULL        DECLARE @companyComm DECIMAL(13,10) = NULL                                SELECT TOP 1           @ControlNo = q.ControlNo,            @QuoteID = q.QuoteID,              @QuoteGuid = q.QuoteGUID, --TFS 90900           @TransEffDate = t.TransactionEffectiveDate,           @EndorsementComment = t.EndorsementComment,                     @EndorsementCalcType = 'F',                    @NewPremium = ISNULL(PremiumAmount, 0),           @TerrorismPremium = ISNULL(TerrorismPremium, 0),           @QuoteStatusID = 9,                                 @DateBound = GETDATE(),           @UserGuid = '5be2621d-4bff-44de-b7d7-17fd01c90c85',                    @BillingTypeID = q.BillingTypeID, -- TFS 87790  getting this dynamically           @ExpirationDate = t.PolicyExpirationDate,           @producerComm = t.producerComm,           @companyComm = t.companyComm        FROM           Ascot_AL3PolicyMasterTable_v2 t WITH (NOLOCK)                    INNER JOIN tblQuotes q ON q.AccountNumber = t.AccountNumber--on endorsements use account number/control number as the policy number can change           INNER JOIN tblMaxQuoteIDs mb ON mb.MaxBoundQuoteID=q.QuoteID           INNER JOIN tblCompanyLocations ON q.CompanyLocationGuid = tblCompanyLocations.CompanyLocationGUID        WHERE t.DnlTrId=@DnlTrId        AND  tblCompanyLocations.CompanyLocationCode = @CompanyLocationCode              order by q.quoteid desc           /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                DECLARE @datebilled datetime                        --For endts, cancels, etc, the @datebound being passed to spaccoutingtransfer is the billdate and the policy effective date is @TransEffDate which what is being pased in to spcopyquote for polciy effective date         SET @datebilled = @DateBound         SET @Effectivedate = @TransEffDate          SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHTHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END                  select top 1 @BillingCode = BillingCode from lstBillingTypes where BillingTypeID = @BillingTypeID          DECLARE @TotalPremium money        DECLARE @CopyOptions bit = 0                         IF @TransType='E'         BEGIN                  exec dbo.Ascot_EndorsePolicyGL_v2 @QuoteGuid, @TransEffDate, @EndorsementComment, @EndorsementCalcType, @NewPremium, @QuoteStatusID, 20, @DateBound, @UserGuid, @BillingCode, @AutoApplyFees, @DnlTrId, @BrokerCommissionFeeChargeCode, @ExpirationDate, @TerrorismPremium, @CopyOptions                 END                 DECLARE @PremiumChange money                IF @TransType='C'         BEGIN                          IF @CurrentQuoteStatusID=12          raiserror('Policy is already cancelled.', 15, 1) with nowait;                 exec dbo.Ascot_CancelPolicyGL_v2 @QuoteGuid, @TransEffDate, @EndorsementComment, @EndorsementCalcType, @WrittenPremium, 99, @DateBound, @UserGuid, @BillingCode, @AutoApplyFees, @DnlTrId, @BrokerCommissionFeeChargeCode, @TerrorismPremium, @CopyOptions                   END                 IF @TransType='W'         BEGIN           IF @CurrentQuoteStatusID<>12           raiserror('Cannot reinstate non-cancelled policy.', 15, 1) with nowait;                    Select @TransType 'transtype_Testing'          exec dbo.Ascot_ReinstatePolicyGL_v2 @QuoteGuid, @TransEffDate, @EndorsementComment, @EndorsementCalcType, @WrittenPremium, 100, @DateBound, @UserGuid, @BillingCode, @AutoApplyFees, @DnlTrId, @BrokerCommissionFeeChargeCode, @TerrorismPremium, @CopyOptions                   END               --update sucess        UPDATE      Ascot_AL3PolicyMasterTable_v2        SET         Error=0,           ErrorMessage=NULL,           ErrorTime=NULL,           DateProcessed=getdate(),           ProcessedBy='MGA',           Note=@ControlNo        WHERE  DnlTrId=@DnlTrId         -- TFS 70502 Record the committed controls in this table to be used for custom client processing         DECLARE @tmpContext VARCHAR(200)       SET @tmpContext = 'Ascot Policy Import V2 for importLogID:' + convert(varchar(10),@ImportLogID)         EXEC dbo.LogAction        @userid = 1,       @action = 'Policy transaction was imported into IMS via Ascot Policy Import',       @identifierID = @ImportLogID,       @identifierguid = @QuoteGuid,       @context = @tmpContext              COMMIT TRAN              if @@trancount<>0 COMMIT TRAN      END TRY      BEGIN CATCH       ROLLBACK TRAN       if @@trancount<>0 ROLLBACK TRAN              UPDATE      Ascot_AL3PolicyMasterTable_v2       SET         Error=1,          ErrorMessage = ERROR_MESSAGE(),          ErrorTime=getdate()       WHERE  DnlTrId=@DnlTrId      END CATCH            FETCH Cur INTO @DnlTrId            IF @@Fetch_status=0       BEGIN         raiserror('Wait 5 seconds', 0, 1) with nowait;        WAITFOR DELAY '00:00:05' --5 seconds                DECLARE @postblocking int        SET @postblocking=1          WHILE @postblocking > 0         BEGIN          SELECT @postblocking=COUNT(*)           FROM master.sys.dm_exec_requests          WHERE blocking_session_id <> 0                    IF @postblocking > 0           BEGIN           raiserror('Something is post-blocking wait 5 seconds', 0, 1) with nowait;           WAITFOR DELAY '00:00:05' --20 SECONDS          END         END        END     END     CLOSE Cur    DEALLOCATE Cur     DROP TABLE #ConfigurationsTable  END
Ascot_ImportAL3_NBS_Zywave_Captive_GL	  CREATE PROCEDURE [dbo].[Ascot_ImportAL3_NBS_Zywave_Captive_GL] --38335   @ImportLogID int  AS  BEGIN     DECLARE @ImportSource int   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID      DECLARE @RenewalOfControlNum INT = NULL  -- needed to be set for renewals   DECLARE @RenewalOfQuoteGuid UNIQUEIDENTIFIER = NULL -- needed to be set for renewals   DECLARE @RenewalOfQuoteID INT = NULL -- needed to obtain BOR producer contact on renewal   DECLARE @ImportVersion int = 0   DECLARE @PreBindNewBusinessRenewalProcessProcedure varchar(200) = ''   DECLARE @SQL_@PreBindExecute NVARCHAR(200)   DECLARE @ImportSouceName VARCHAR(200) = ''     SELECT  @ImportVersion = ImportVersion from ASCOT_AL3ZywaveImportHeader where ImportLogID = @ImportLogID    SELECT  @ImportSouceName = ISNULL(sourcename,'Policy Import') from ASCOT_lstAL3ImportSources where ID = @ImportSource       IF OBJECT_ID('tempdb..#PolsToCreate') IS NOT NULL BEGIN DROP TABLE #PolsToCreate END   SELECT   t.*,      cl.CompanyLocationGuid,      Cl.CompanyLineGUID,      l.LineGuid   INTO  #PolsToCreate   FROM  Ascot_AL3PolicyMasterTable_v2 t   INNER JOIN lstLines l ON l.LineID=t.LineCode   Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = t.CompanyCode   Inner Join  tblCompanyLines CL on CL.LineGUID = l.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and t.StateOfIssuance = CL.StateID and cl.ParentCompanyLineGUID IS NULL   WHERE  ImportLogID = @ImportLogID   AND   isNull(Error,0)=0   AND   DateProcessed IS NULL   AND   PolicyIndicator IN ('N', 'R')   AND   ISNULL(RewriteOfAccountNumber, '0') = '0'       ORDER BY PolicyTransactionID         --double check   IF OBJECT_ID('tempdb..#db') IS NOT NULL BEGIN DROP TABLE #db END     SELECT  t.DnlTrId,      CASE WHEN PremiumState IS NULL       THEN 'PremiumState is null'       WHEN CompanyCode IS NULL       THEN 'CompanyCode is null'       WHEN LineCode IS NULL       THEN 'LineCode is null'       WHEN ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0       THEN 'PremiumAmount + TerrorismPremium is 0'       WHEN PolicyNumber IS NULL       THEN 'PolicyNumber is null'       WHEN Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode)       THEN 'Duplicate policy number found'       WHEN (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID IS NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))       THEN 'Policy Transaction previously imported'       ELSE NULL      END As [Message]   INTO  #db   FROM  #PolsToCreate t   WHERE  PremiumState IS NULL      OR CompanyCode IS NULL      OR LineCode IS NULL      OR ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0      OR PolicyNumber IS NULL      OR (Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode))      OR (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID is NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))      UPDATE Ascot_AL3PolicyMasterTable_v2   SET  Error=1,     ErrorMessage=ISNULL(d.[Message], 'Failed double check'),     ErrorTime=getdate()   FROM Ascot_AL3PolicyMasterTable_v2   INNER JOIN #db d ON Ascot_AL3PolicyMasterTable_v2.DnlTrId = d.DnlTrId       DELETE FROM #PolsToCreate    WHERE  DnlTrId IN (SELECT DnlTrId FROM #db)        IF OBJECT_ID('tempdb..#PolsToCreateDetails') IS NOT NULL   BEGIN      DROP TABLE #PolsToCreateDetails     END        CREATE TABLE #PolsToCreateDetails   (    ID int,    DnlTrId uniqueidentifier,    CompanyLocationCode int,    LineCode int,    StateID varchar(20),    Premium money,    Terrorism money,    CompanyLocationGuid uniqueidentifier,    CompanyLineGuid uniqueidentifier,    LineGuid uniqueidentifier,    CreatedQuoteOptionID int,    CreatedQuoteOptionGuid uniqueidentifier,    CreatedQuoteDetailID int   )               INSERT INTO #PolsToCreateDetails   SELECT    --ID int,      Ascot_AL3QuoteDetailTable_V2.ID,      --DnlTrId uniqueidentifier,      Ascot_AL3QuoteDetailTable_V2.DnlTrId,      --CompanyLocationCode int,      Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,      --LineCode int,      Ascot_AL3QuoteDetailTable_V2.LineCode,      --StateID varchar(20),      Ascot_AL3QuoteDetailTable_V2.StateID,      --Premium money,      Ascot_AL3QuoteDetailTable_V2.Premium,      --Terrorism money,      Ascot_AL3QuoteDetailTable_V2.Terrorism,      --CompanyLocationGuid uniqueidentifier,      tblCompanyLocations.CompanyLocationGUID,      --CompanyLineGuid uniqueidentifier      tblCompanyLines.CompanyLineGUID,      --LineGuid uniqueidentifier,      lstLines.LineGUID,      --CreatedQuoteOptionID int,      NULL,      --CreatedQuoteOptionGuid uniqueidentifier,      NULL,      --CreatedQuoteDetailID int,      NULL     FROM #PolsToCreate P   INNER JOIN Ascot_AL3QuoteDetailTable_V2 ON P.DnlTrId = Ascot_AL3QuoteDetailTable_V2.DnlTrId   LEFT JOIN tblCompanyLocations ON Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode = tblCompanyLocations.CompanyLocationCode   LEFT JOIN lstLines ON Ascot_AL3QuoteDetailTable_V2.LineCode = lstLines.LineID   LEFT JOIN tblCompanyLines ON tblCompanyLocations.CompanyLocationGUID = tblCompanyLines.CompanyLocationGUID    AND  lstLines.LineGuid = tblCompanyLines.LineGUID    AND  Ascot_AL3QuoteDetailTable_V2.StateID = tblCompanyLines.StateID    AND  ((tblCompanyLines.ParentCompanyLineGUID = P.CompanyLineGUID)       OR ((tblCompanyLines.ParentCompanyLineGUID IS NULL) AND (P.CompanyLineGUID = tblCompanyLines.CompanyLineGUID))      )  --select '#PolsToCreate' As PolsToCreate, * from #PolsToCreate  --select '#PolsToCreateDetails' AS PolsToCreateDetails, * from #PolsToCreateDetails       --ALTER TABLE #PolsToCreate ADD InsuredID int   ALTER TABLE #PolsToCreate ADD SubmissionGroupID int   ALTER TABLE #PolsToCreate ADD QuoteID int   --ALTER TABLE #PolsToCreate ADD ProducerContactID int     --SELECT * FROM #PolsToCreate         DECLARE @MGASystemsUserGuid uniqueidentifier   SELECT @MGASystemsUserGuid = UserGuid FROM tblUsers WHERE Username = 'Admin1'     DECLARE @DnlTrId uniqueidentifier     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToCreate     OPEN Cur   FETCH Cur INTO @DnlTrId      DECLARE @preblocking int   SET @preblocking=1       WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 10 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:10' --10 SECONDS     END    END       IF OBJECT_ID('tempdb..#InvoiceInstallmentsTable') IS NOT NULL   BEGIN      DROP TABLE #InvoiceInstallmentsTable     END     CREATE TABLE #InvoiceInstallmentsTable   (    QuoteID int,    EffectiveDate datetime,    ExpirationDate datetime,    NumInstallments int,    Installment int,    InstallmentDueDate datetime,    BillingCode varchar(100),    InstallmentMod decimal(20, 19)   )     IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL   BEGIN      DROP TABLE #ConfigurationsTable     END     CREATE TABLE #ConfigurationsTable   (    ID int,    StartingOnPoliciesEffective smalldatetime,    QuotingLocationGuid uniqueidentifier,    IssuingLocationGuid uniqueidentifier,    UnderwriterGuid uniqueidentifier,    IssuedByUserID int,    BoundByUserID int,    CostCenterID int,    BrokerCommissionFeeChargeCode int,    ProgramID int,    UnderwritingAssistantGuid uniqueidentifier,    AutoApplyFees bit,    CopyNotesandDocs BIT,    ProducerContactID INT,    ProducerLocationID int,    BillingTypeID INT,    CompanyLocationCode INT,    UseUWCloseDate BIT   )     WHILE @@Fetch_status=0    BEGIN     BEGIN TRY        BEGIN TRAN       DECLARE @PolicyNumber varchar(50)       DECLARE @datebilled datetime       DECLARE @policyIndicator varchar(5)       DECLARE @BusinessTypeID INT        DECLARE @CompanyLocationCode INT       DECLARE @InsuredFirstName VARCHAR (max)       DECLARE @InsuredLastName VARCHAR (max)        DECLARE @InsuredAddress2 VARCHAR (max)        DECLARE @InsuredFirstLastName VARCHAR (max)          SELECT  @PolicyNumber=PolicyNumber,          @datebilled = BillDate,          @policyIndicator = PolicyIndicator,         @BusinessTypeID =BusinessTypeID,         @CompanyLocationCode = CompanyCode,         @InsuredFirstName = InsuredFirstName,         @InsuredLastName = InsuredLastName,         @InsuredAddress2 =InsuredAddress2                FROM #PolsToCreate        WHERE DnlTrId=@DnlTrId         PRINT @PolicyNumber;              IF @datebilled IS NULL       BEGIN        SET @datebilled = getdate()                         END       ------------------------------------------------------------------ IssuingLocationGuid Change--------------------------------------------------------------       Declare @IssuingLocationGuid UNIQUEIDENTIFIER, @QuotingLocationguid UNIQUEIDENTIFIER -- @ProgramID int ,       --SELECT @IssuingLocationGuid= CompanyLocationGuid from tblCompanyLocations  where LocationName in(Select SUBSTRING(Company, 1, CHARINDEX('(', Company) - 2) from ASCOT_AL3ImportPolicy_Zywave where importlogid=@importlogId)        SELECT @QuotingLocationguid=OfficeGUID from tblclientoffices  where Location in(Select SUBSTRING(Company, 1, CHARINDEX('(', Company) - 2) from ASCOT_AL3ImportPolicy_Zywave where importlogid=@importlogId)        --Select @ProgramID=ProgramID from ASCOT_AL3ImportPolicy_Zywave where importlogid=@importlogId          Select @IssuingLocationGuid =ParentOfficeGuid from tblclientoffices  where OfficeGUID=@QuotingLocationguid         --------------------------------------------------------------------------------------------------------------------------------------------------------------------       INSERT INTO #ConfigurationsTable       SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,          Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,          --Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,          @QuotingLocationguid as QuotingLocationguid,          --Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,          @IssuingLocationGuid as IssuingLocationGuid,          Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,          Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,          Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,          Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,          Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,          Ascot_tblAL3ProgramConfigurations_v2.ProgramID,          --@ProgramID,          Ascot_tblAL3ProgramConfigurations_v2.UnderwritingAssistantGuid,          Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,          Ascot_tblAL3ProgramConfigurations_v2.CopyNotesandDocs,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerContactID,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerLocationID,          ASCOT_tblAL3ProgramConfigurations_V2.BillingTypeID,                ASCOT_tblAL3ProgramConfigurations_V2.CompanyLocationCode,          ASCOT_tblAL3ProgramConfigurations_V2.UseUWCloseDate         FROM  Ascot_tblAL3ProgramConfigurations_v2       INNER JOIN #PolsToCreate P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)        AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID        AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode        AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0        AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource         DECLARE @ConfigurationID int         SELECT TOP 1 @ConfigurationID = C.ID       FROM #ConfigurationsTable C       WHERE C.CompanyLocationCode = @CompanyLocationCode       ORDER BY C.StartingOnPoliciesEffective DESC         --DECLARE @QuotingLocationGuid uniqueidentifier       DECLARE @QuotingLocationID int       ---DECLARE @IssuingLocationGuid uniqueidentifier       DECLARE @UnderwriterGuid uniqueidentifier       DECLARE @IssuedByUserID int       DECLARE @BoundByUserID int       DECLARE @CostCenterID int       DECLARE @BrokerCommissionFeeChargeCode int          DECLARE @ProgramID int       DECLARE @UnderwritingAssistantGuid uniqueidentifier       DECLARE @RunAutoApplyFees bit       DECLARE @CopyNotesandDocs bit       DECLARE @ProducerContactID int       DECLARE @ProducerLocationID int       DECLARE @BillingTypeID int       DECLARE @clientofficeID INT       DECLARE @AutoApplyFees bit       DECLARE @UseUWCloseDate BIT = 0  -- TFS 92747         SELECT @QuotingLocationGuid = QuotingLocationGuid,         @IssuingLocationGuid = IssuingLocationGuid,         @UnderwriterGuid = UnderwriterGuid,         @IssuedByUserID = IssuedByUserID,         @BoundByUserID = BoundByUserID,         @CostCenterID = CostCenterID,         @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,         @ProgramID = ProgramID,         @UnderwritingAssistantGuid = UnderwritingAssistantGuid,         @RunAutoApplyFees = AutoApplyFees,         @CopyNotesandDocs = CopyNotesandDocs,         @ProducerContactID = ProducerContactID,         @ProducerLocationID = ProducerLocationID,         @BillingTypeID = ISNULL(BillingTypeID,3), -- Default this to agnecy,         @AutoApplyFees = AutoApplyFees,         @UseUWCloseDate = UseUWCloseDate         FROM #ConfigurationsTable       WHERE ID = @ConfigurationID         SELECT @QuotingLocationID = tblClientOffices.OfficeID       FROM tblClientOffices       WHERE tblClientOffices.OfficeGuid = @QuotingLocationGuid         IF @ConfigurationID IS NULL       BEGIN          raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;         END         IF @ProducerLocationID = 0       BEGIN          SELECT @ProducerLocationID = ProducerCode        FROM #PolsToCreate         WHERE DnlTrId=@DnlTrId         END         -- TFS 87790 Get the quoting location office id used in spaccountingtransfer       select @clientofficeID =  officeid from tblclientoffices where officeguid = @QuotingLocationGuid         --make sure it doesn't exist.       DECLARE @AlreadyExists int       SELECT  @AlreadyExists=COUNT(*)        FROM  tblQuotes        OUTER APPLY (           SELECT TOP 1 RewriteQ.ControlNo,              RewriteQ.QuotingLocationGuid           FROM tblQuotes SubQ           INNER JOIN tblQuotes RewriteQ ON SubQ.QuoteGuid = RewriteQ.RewriteOfQuoteGuid           WHERE SubQ.ControlNo = tblQuotes.ControlNo          ) As RewriteTable       WHERE  PolicyNumber=@PolicyNumber       AND   tblQuotes.QuotingLocationGuid = @QuotingLocationGuid       AND   EXISTS(SELECT * FROM tblCompanyLines WHERE tblCompanyLines.CompanyLineGUID = tblQuotes.CompanyLineGuid AND tblCompanyLines.EnforceUniquePolicyNumbers = 1)       AND   ISNULL(RewriteTable.QuotingLocationGuid, tblQuotes.QuotingLocationGuid) = tblQuotes.QuotingLocationGuid       --in some cases an Ascot policy is being cancelled and rewritten to an Ethos policy that then needs to create a matching Ascot policy.        --This check is failing the creation in that case so check to see if there is a rewrite of this policy and if its quoting location matches this policys quoting location       --if the quoting locations match then don't create the policy           IF @AlreadyExists > 0        BEGIN         raiserror('Policy Already Exists', 15, 1) with nowait;        END         DECLARE @QuotingOfficeID int       SELECT @QuotingOfficeID = OfficeID       FROM tblClientOffices WHERE OfficeGuid = @QuotingLocationGuid         /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                 SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHTHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END           --insert the insured       --after discussion there is no clearance here       ----LEEDISABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ----LEEDISABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              --select top 1 * from tblInsureds       raiserror('tblInsureds', 0, 1) with nowait;         -- Insert it as a coproration or Individual           --INSURED INDIVIDUAL       If ISNULL(@InsuredFirstName,'')<> ''       BEGIN        SET @InsuredFirstLastName = @InsuredFirstName + ' ' + @InsuredLastName          INSERT INTO tblInsureds          (             RiskID,             BusinessTypeID,             PolicyName,             FirstName,            LastName,             Name,             StatusID,             Soundex,             StrippedName,             StrippedPolicyName,             NumSubmissions,             DBA)           SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                     4, -- select * from lstBusinessTypes where businesstype = 'Individual'            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            1,            SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(@InsuredFirstLastName))), 0, 51),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            1,            SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)         FROM  #PolsToCreate p         WHERE  DnlTrId=@DnlTrId         AND  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)       END         ELSE        --INSURED CORPORATE            BEGIN          INSERT INTO tblInsureds (RiskID, BusinessTypeID, PolicyName, CorporationName, Name, StatusID, Soundex, StrippedName, StrippedPolicyName, NumSubmissions, DBA)        SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                    13, -- select * from lstBusinessTypes where businesstype = 'Corporation'           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           1,           SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(p.InsuredName))), 0, 51),           SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),           SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),           1,           SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)        FROM  #PolsToCreate p        WHERE  DnlTrId=@DnlTrId        and  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)         END              ----LEEENABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ----LEEENABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              --end-------------------------------------------------------------------------------------------------------------------              --add the insureds location       raiserror('tblInsuredLocations', 0, 1) with nowait;              INSERT INTO tblInsuredLocations (DeliveryMethodID, LocationTypeID, Address1, Address2, City, State, ZipCode, County, ISOCountryCode, Name, InsuredGuid)       SELECT  1,          1,          SUBSTRING(RTRIM(LTRIM(p.InsuredAddress)), 0, 251),          SUBSTRING(RTRIM(LTRIM(@InsuredAddress2)), 0, 251),          SUBSTRING(RTRIM(LTRIM(p.InsuredCity)), 0, 51),          RTRIM(LTRIM(p.InsuredState)),          SUBSTRING(RTRIM(LTRIM(p.InsuredZip)), 0, 11),          SUBSTRING(RTRIM(LTRIM(p.insuredcounty)), 0, 51),          'USA' AS ISOCountryCode,           'Mailing' AS Name,          i.InsuredGuid       FROM  #PolsToCreate p       INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       WHERE  DnlTrId=@DnlTrId       and  NOT EXISTS(SELECT * FROM tblInsuredLocations WHERE tblInsuredLocations.InsuredGUID = I.InsuredGUID AND tblInsuredLocations.LocationTypeID = 1)           --Enable trigger tblInsuredLocations_OnlyOnePrimary on dbo.tblInsuredLocations       --end-------------------------------------------------------------------------------------------------------------------              --add submission       raiserror('tblSubmissionGroup', 0, 1) with nowait;           -- TFS 86643   Allow the program to dynamically assign a producer contact from designated producer location if one is not specified from the  config table.       IF ISNULL(@ProducerContactID,0) = 0             BEGIN        SELECT  TOP 1 @ProducerContactID = ProducerContactID FROM tblProducerContacts pc join tblProducerLocations p on pc.ProducerLocationGUID = p.ProducerLocationGUID WHERE p.ProducerLocationID = @ProducerLocationID       END         INSERT INTO tblSubmissionGroup (ProducerLocationGuid, ProducerContactID, InsuredGuid, DateSubmitted, AddedByUserGuid)       SELECT  tblProducerLocations.ProducerLocationGuid,          --(SELECT TOP 1 ProducerContactID FROM tblProducerContacts pc WHERE pc.ProducerLocationGuid = tblProducerLocations.ProducerLocationGUID),          @ProducerContactID,          i.InsuredGuid,          getdate(),          '5be2621d-4bff-44de-b7d7-17fd01c90c85'        FROM  #PolsToCreate p       INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       WHERE  DnlTrId=@DnlTrId              UPDATE  #PolsToCreate       SET   SubmissionGroupID=scope_identity()       WHERE  DnlTrId=@DnlTrId                       --UPDATE  #PolsToCreate       --SET   ProducerContactID=s.ProducerContactID       --FROM  #PolsToCreate p       --INNER JOIN tblSubmissionGroup s ON s.SubmissionGroupID=p.SubmissionGroupID       --WHERE  DnlTrId=@DnlTrId;       --end-------------------------------------------------------------------------------------------------------------------           --add policy       ----LEEDISABLE TRIGGER dbo.RecordQuoteStatusChange on dbo.tblQuotes       raiserror('tblQuotes', 0, 1) with nowait;       INSERT INTO tblQuotes (        SubmissionGroupGuid,        QuotingLocationGuid,        IssuingLocationGuid,        CompanyLocationGuid,        ControlGuid,        LineGuid,        QuoteStatusID,         EffectiveDate,         ExpirationDate,         PolicyTypeID,         StateID,        ProducerContactGuid,        UnderwriterUserGuid,         RetailerGuid,         TACSRUserGuid,        PolicyNumber,         PolicyNumberIndex,         SIC_Code,        BillingTypeID,        MinimumEarnedPercentage,         DateIssued,         IssuedByUserID,        DateBound,        BoundByUserID,         InsuredDBA,         InsuredFEIN,         InsuredSSN,         InsuredBusinessTypeID,         InsuredPolicyName,         InsuredCorporationName,         InsuredSalutation,         InsuredFirstName,         InsuredMiddleName,         InsuredLastName,        InsuredAddress1,         InsuredAddress2,         InsuredCity,         InsuredState,         InsuredCounty,         InsuredISOCountryCode,         InsuredZipCode,         InsuredPhone,         InsuredFax,        ProducerLocationID,         ProducerName,         ProducerLocationName,         ProducerAddress1,         ProducerAddress2,         ProducerCity,         ProducerCounty,         ProducerState,         ProducerISOCountryCode,         ProducerZipCode,         ProducerPhone,         ProducerFax,         FinanceCompanyGuid,         CompanyLineGuid,         AccountNumber,         CostCenterID,         InspectionCompanyID,         QuickQuote,         InstallmentBillingQuoteOptionID,         Auditable,         ControlNo,        UnderwritingAssistantGuid,        QuoteStatusReasonID,        --TFS 90517   added Renewal logic to populate renewal fields on tblquotes        RenewalOfControlNum,        RenewalOfQuoteGuid       )       SELECT  s.SubmissionGroupGuid,          @QuotingLocationGuid AS QuotingLocationGuid,           @IssuingLocationGuid AS IssuingLocationGuid,          p.CompanyLocationGuid,          NEWID(),          p.LineGuid,          1 as QuoteStatusID,          p.PolicyEffectiveDate,          p.PolicyExpirationDate,          CASE p.PolicyIndicator WHEN 'N' THEN 1 WHEN 'R' THEN 2 ELSE NULL END,          p.PremiumState,          pc.ProducerContactGUID,          @UnderwriterGuid as UnderwriterGuid,          NULL,          NULL,          p.PolicyNumber,          NULL,          NULL,          --3,          @BillingTypeID,          NULL AS MinimumEarnedPercentage,           p.dateissued AS DateIssued,           @IssuedByUserID AS IssuedByUserID,           getdate() AS DateBound,          @BoundByUserID AS BoundByUserID,           NULL AS InsuredDBA,           NULL AS InsuredFEIN,           NULL AS InsuredSSN,           InsuredTable.BusinessTypeID,           SUBSTRING(InsuredTable.[Name], 0, 501),           SUBSTRING(InsuredTable.CorporationName, 0, 501),           NULL AS InsuredSalutation,           NULL AS InsuredFirstName,           NULL AS InsuredMiddleName,           NULL AS InsuredLastName,          InsuredTable.Address1,           InsuredTable.Address2,           InsuredTable.City,           InsuredTable.[State],           '' AS InsuredCounty,           InsuredTable.ISOCountryCode,           InsuredTable.ZipCode,           NULL AS InsPhone,           NULL AS InsFax,          pl.ProducerLocationID,           pr.ProducerName,           pl.Name AS ProdLocationName,           pl.Address1 AS ProdAddress,           pl.Address2 AS ProdAddress2,           pl.City AS ProdCity,           pl.County,           pl.State AS ProdState,           pl.ISOCountryCode AS ProdCountry,           pl.ZipCode AS ProdZip,           pl.Phone,           pl.Fax,           NULL AS finance,           p.CompanyLineGUID,           p.AccountNumber AS AccountNumber,          @CostCenterID AS CostCenterID,           NULL AS Insp,           0 AS QQ,           NULL AS InstallM,           0 AS audit,           ISNULL((SELECT MAX(ControlNo) FROM dbo.tblQuotes), 0)+1,          @UnderwritingAssistantGuid,          p.QuoteStatusReasonID,            --TFS 90517  added Renewal logic to populate renewal fields on tblquotes          --This needs to be tested in Ascot TEST before  it goes live 9/23/22                    CASE p.PolicyIndicator            WHEN 'N' THEN NULL            WHEN 'R' THEN p.RenewalOfAccountNumber            ELSE NULL END, --RenewalOfControlNum,                    CASE p.PolicyIndicator            WHEN 'N' THEN NULL            WHEN 'R' THEN (select top 1 quoteguid from tblQuotes where ControlNo = p.RenewalOfAccountNumber order by QuoteID desc)            ELSE NULL END --RenewalOfQuoteguid               --1 + (Select Top 1 ControlNo from tblQuotes order by ControlNo Desc) AS ControlNo --This is a place holder we will update right before committing.       FROM  #PolsToCreate p       CROSS APPLY (           SELECT TOP 1 i.InsuredGUID,              i.BusinessTypeID,              i.[Name],              i.CorporationName,              il.Address1,               il.Address2,               il.City,               il.[State],              il.ISOCountryCode,               il.ZipCode           FROM tblInsureds i           INNER JOIN tblInsuredLocations il ON il.InsuredGuid=i.InsuredGuid           WHERE i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)           and il.LocationTypeID = 1          ) As InsuredTable           INNER JOIN tblSubmissionGroup s ON s.InsuredGuid=InsuredTable.InsuredGUID       INNER JOIN tblProducerLocations pl ON pl.ProducerLocationGuid=s.ProducerLocationGuid       INNER JOIN tblProducers pr ON pr.ProducerGuid=pl.ProducerGuid       INNER JOIN tblProducerContacts pc on pc.ProducerContactID = s.ProducerContactID       WHERE  DnlTrId=@DnlTrId       AND   P.SubmissionGroupID = s.SubmissionGroupID           DECLARE @QuoteID int       SET @QuoteID=scope_identity()         DECLARE @QuoteGuid uniqueidentifier       SELECT @QuoteGuid = QuoteGuid FROM tblQuotes WHERE QuoteID = @QuoteID         UPDATE Q SET CostCenterID = ISNULL(CostCenterTable.GroupID, Q.CostCenterID)       FROM tblQuotes Q       OUTER APPLY (           SELECT TOP 1 GroupID           FROM dbo.GetQuoteCostCenters(@QuoteGuid) T           ORDER BY T.IsDefault DESC, T.SystemDefined DESC, T.EffectiveDate DESC          ) As CostCenterTable       WHERE Q.QuoteGUID = @QuoteGuid                  UPDATE  #PolsToCreate       SET   QuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;         UPDATE  Ascot_AL3PolicyMasterTable_v2       SET   CreatedQuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;                --end-------------------------------------------------------------------------------------------------------------------              --add quote details       raiserror('tblQuoteDetails', 0, 1) with nowait;         --for monoline policies       INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       SELECT  q.QuoteGuid,          p.CompanyLineGuid,          (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=p.CompanyLocationGuid),          1,          --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),          --TFS 87790 Get dynamic  commissions          ISNULL(p.producerComm,dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),          0,          30 as TermsOfPayment,          CASE WHEN @ProgramID = 0           THEN ProgramCodeTable.ProgramID           ELSE @ProgramID          END       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN lstLines ON q.LineGuid = lstLines.LineGUID       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       OUTER APPLY (           SELECT TOP 1 tblCompanyProgramCodes.ProgramID           FROM tblCompanyProgramCodes            LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID           LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID           WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')           AND ( (tblCompanyProgramCodes.LineGUID = q.LineGUID OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode)))           --AND ( tblCompanyProgramCodes.LineGUID = q.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')           --AND ( q.EffectiveDate BETWEEN Convert(varchar(12),tblCompanyProgramCodes.ContractEffective,101) AND Convert(varchar(12),tblCompanyProgramCodes.ContractExpiration,101))           AND ( q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)           AND (ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'  AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Special Program for Highland' )           ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = q.StateID THEN 1 ELSE 0 END +             CASE WHEN ((tblCompanyProgramCodes.LineGUID = q.LineGuid  OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode))) THEN 1 ELSE 0 END +             --CASE WHEN tblCompanyProgramCodes.LineGUID = q.LineGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +             --CASE WHEN tblCompanyProgramCodes.GroupCode = lstLines.GroupCode THEN 1 ELSE 0 END DESC,             tblCompanyProgramCodes.ContractEffective DESC          ) As ProgramCodeTable       WHERE  DnlTrId=@DnlTrId       AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)              --for package policies       INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       SELECT  q.QuoteGuid,          DetailTable.CompanyLineGuid,          (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=DetailTable.CompanyLocationGuid),          1,          --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),          --TFS 87790 Get dynamic  commissions          ISNULL(p.producerComm, dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),          0,          30 as TermsOfPayment,          CASE WHEN @ProgramID = 0           THEN ProgramCodeTable.ProgramID           ELSE @ProgramID          END       FROM  #PolsToCreate p       CROSS APPLY (        SELECT DISTINCT SubPD.CompanyLineGuid,            SubPD.CompanyLocationGuid,            SubCL.LineGUID,            SubPD.StateID,            SubL.GroupCode  -- ADD THIS LINE        FROM #PolsToCreateDetails SubPD        INNER JOIN tblCompanyLines SubCL ON SubPD.CompanyLineGuid = SubCL.CompanyLineGuid        INNER JOIN lstLines SubL ON SubCL.LineGUID = SubL.LineGUID  -- ADD THIS JOIN        WHERE SubPD.DnlTrId = P.DnlTrId        AND SubPD.StateID = P.StateOfIssuance       ) AS DetailTable       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN lstLines ParentLine ON q.LineGuid = ParentLine.LineGUID       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       OUTER APPLY (           SELECT TOP 1 tblCompanyProgramCodes.ProgramID           FROM tblCompanyProgramCodes            LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID           LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID           WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')           AND ( tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')           AND (q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)           AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'           ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = DetailTable.StateID THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.GroupCode = DetailTable.GroupCode THEN 1 ELSE 0 END DESC,             tblCompanyProgramCodes.ContractEffective DESC          ) As ProgramCodeTable       WHERE  DnlTrId=@DnlTrId         UPDATE PD SET CreatedQuoteDetailID = tblQuoteDetails.QuoteDetailID       FROM #PolsToCreateDetails PD       INNER JOIN #PolsToCreate P ON PD.DnlTrId = P.DnlTrId       INNER JOIN tblQuotes ON P.QuoteID = tblQuotes.QuoteID       INNER JOIN tblQuoteDetails ON tblQuotes.QuoteGUID = tblQuoteDetails.QuoteGuid        AND tblQuoteDetails.CompanyLineGuid = PD.CompanyLineGuid       WHERE PD.StateID = P.StateOfIssuance                --end-------------------------------------------------------------------------------------------------------------------                  --add quote option       --for monoline policies       raiserror('tblQuoteOptions', 0, 1) with nowait;       INSERT INTO tblQuoteOptions (QuoteGUID, LineGUID, CompanyLocationID, DateCreated, Quote, Bound, CompanyInstallmentID)       SELECT  q.QuoteGuid,          q.LineGuid,          c.CompanyLocationCode,          getdate(),          1,          1,          NULL       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN  tblCompanyLines cl ON cl.CompanyLineGuid=p.CompanyLineGuid       INNER JOIN tblCompanyLocations c ON c.CompanyLocationGuid = cl.CompanyLocationGuid       WHERE  DnlTrId=@DnlTrId       AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)         --for package policies       raiserror('tblQuoteOptions', 0, 1) with nowait;       INSERT INTO tblQuoteOptions (QuoteGUID, LineGUID, CompanyLocationID, DateCreated, Quote, Bound, CompanyInstallmentID)       SELECT  q.QuoteGuid,          DetailTable.LineGuid,          DetailTable.CompanyLocationCode,          getdate(),          1,          1,          NULL       FROM  #PolsToCreate p       CROSS APPLY (           SELECT DISTINCT SubPD.LineGuid,               SubPD.CompanyLocationCode           FROM #PolsToCreateDetails SubPD           WHERE SubPD.DnlTrId = P.DnlTrId           AND SubPD.StateID = P.StateOfIssuance          ) AS DetailTable       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN  tblCompanyLines cl ON cl.CompanyLineGuid=p.CompanyLineGuid       --INNER JOIN tblCompanyLocations c ON c.CompanyLocationGuid = cl.CompanyLocationGuid       WHERE  DnlTrId=@DnlTrId         UPDATE PD SET CreatedQuoteOptionID = tblQuoteOptions.QuoteOptionID,           CreatedQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid       FROM #PolsToCreateDetails PD       INNER JOIN #PolsToCreate P ON PD.DnlTrId = P.DnlTrId       INNER JOIN tblQuotes ON P.QuoteID = tblQuotes.QuoteID       INNER JOIN tblQuoteOptions ON tblQuotes.QuoteGUID = tblQuoteOptions.QuoteGUID        AND tblQuoteOptions.LineGUID = PD.LineGuid        AND tblQuoteOptions.CompanyLocationID = PD.CompanyLocationCode         --end-------------------------------------------------------------------------------------------------------------------                      raiserror('tblQuoteOptionPremiums', 0, 1) with nowait;       --Monoline policies       --add option premium       INSERT INTO tblQuoteOptionPremiums (QuoteOptionGuid, ChargeCode, OfficeID, Premium, AnnualPremium, Commissionable)       SELECT  qo.QuoteOptionGuid,          pc.ChargeCode,          @QuotingOfficeID,          p.PremiumAmount,          p.PremiumAmount,          1 as Commissionable       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN tblQuoteOptions qo ON q.QuoteGU
Ascot_ImportAL3_REWRITE_Zywave_Captive_GL	Create PROCEDURE [dbo].[Ascot_ImportAL3_REWRITE_Zywave_Captive_GL]    @ImportLogID int  AS  BEGIN     DECLARE @ImportSource int   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID     --note this has not been updated to handle installments     DECLARE @TransType varchar(25)   DECLARE @EnteredDate datetime    DECLARE @WrittenPremium money   DECLARE @PolicyNumber Varchar(50)   DECLARE @OriginalControlNo int   DECLARE @MGASystemsUserGuid uniqueidentifier   DECLARE @UniqueTransactionID int -- TFS 90577 -- Used to identify duplicate transaction uploads   DECLARE @UniqueTransactionIDExists INT   DECLARE @AccounNumber VARCHAR(50)   DECLARE @PolicyeffectiveDate varchar(50)   DECLARE @datebilled datetime      SET @datebilled = getdate()             SELECT @MGASystemsUserGuid = UserGuid FROM tblUsers WHERE Username = 'Admin1'       IF OBJECT_ID('tempdb..#PolsToEnd') IS NOT NULL BEGIN DROP TABLE #PolsToEnd END   SELECT --TOP 500      Ascot_AL3PolicyMasterTable_v2.*,      cl.CompanyLocationGuid,      Cl.CompanyLineGUID,      l.LineGuid   INTO  #PolsToEnd   FROM  [dbo].Ascot_AL3PolicyMasterTable_v2   INNER JOIN lstLines l ON l.LineID=Ascot_AL3PolicyMasterTable_v2.LineCode   Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode   Inner Join  tblCompanyLines CL on CL.LineGUID = l.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and Ascot_AL3PolicyMasterTable_v2.StateOfIssuance = CL.StateID and cl.ParentCompanyLineGUID IS NULL   WHERE  ImportLogID = @ImportLogID   AND   ISNULL(Error, 0) = 0      AND DateProcessed IS NULL      AND ISNULL(RewriteOfAccountNumber, '0') <> '0'      AND PolicyIndicator IN ('N', 'R')      --and DnlTrId = '7A783BD4-21F5-4446-A8EA-E756F81A37DD'   ORDER BY TransactionEffectiveDate     IF OBJECT_ID('tempdb..#PolsToCreateDetails') IS NOT NULL   BEGIN      DROP TABLE #PolsToEndDetails     END        CREATE TABLE #PolsToEndDetails   (    ID int,    DnlTrId uniqueidentifier,    CompanyLocationCode int,    LineCode int,    StateID varchar(20),    Premium money,    Terrorism money,    CompanyLocationGuid uniqueidentifier,    CompanyLineGuid uniqueidentifier,    LineGuid uniqueidentifier,    CreatedQuoteOptionID int,    CreatedQuoteOptionGuid uniqueidentifier,    CreatedQuoteDetailID int   )         INSERT INTO #PolsToEndDetails   SELECT    --ID int,      Ascot_AL3QuoteDetailTable_V2.ID,      --DnlTrId uniqueidentifier,      Ascot_AL3QuoteDetailTable_V2.DnlTrId,      --CompanyLocationCode int,      Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,      --LineCode int,      Ascot_AL3QuoteDetailTable_V2.LineCode,      --StateID varchar(20),      Ascot_AL3QuoteDetailTable_V2.StateID,      --Premium money,      Ascot_AL3QuoteDetailTable_V2.Premium,      --Terrorism money,      Ascot_AL3QuoteDetailTable_V2.Terrorism,      --CompanyLocationGuid uniqueidentifier,      tblCompanyLocations.CompanyLocationGUID,      --CompanyLineGuid uniqueidentifier      tblCompanyLines.CompanyLineGUID,      --LineGuid uniqueidentifier,      lstLines.LineGUID,      --CreatedQuoteOptionID int,      NULL,      --CreatedQuoteOptionGuid uniqueidentifier,      NULL,      --CreatedQuoteDetailID int,      NULL     FROM #PolsToEnd P   INNER JOIN Ascot_AL3QuoteDetailTable_V2 ON P.DnlTrId = Ascot_AL3QuoteDetailTable_V2.DnlTrId   LEFT JOIN tblCompanyLocations ON Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode = tblCompanyLocations.CompanyLocationCode   LEFT JOIN lstLines ON Ascot_AL3QuoteDetailTable_V2.LineCode = lstLines.LineID   LEFT JOIN tblCompanyLines ON tblCompanyLocations.CompanyLocationGUID = tblCompanyLines.CompanyLocationGUID    AND  lstLines.LineGuid = tblCompanyLines.LineGUID    AND  Ascot_AL3QuoteDetailTable_V2.StateID = tblCompanyLines.StateID    AND  ((tblCompanyLines.ParentCompanyLineGUID = P.CompanyLineGUID)       OR ((tblCompanyLines.ParentCompanyLineGUID IS NULL) AND (P.CompanyLineGUID = tblCompanyLines.CompanyLineGUID))      )     DECLARE @DnlTrId uniqueidentifier     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToEnd ORDER BY AccountNumber, PolicyTransactionID     OPEN Cur   FETCH Cur INTO @DnlTrId     DECLARE @preblocking int   SET @preblocking=1     WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 10 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:10' --10 SECONDS     END    END       IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL    BEGIN       DROP TABLE #ConfigurationsTable      END      CREATE TABLE #ConfigurationsTable    (     ID int,     StartingOnPoliciesEffective smalldatetime,     QuotingLocationGuid uniqueidentifier,     IssuingLocationGuid uniqueidentifier,     UnderwriterGuid uniqueidentifier,     IssuedByUserID int,     BoundByUserID int,     CostCenterID int,     BrokerCommissionFeeChargeCode int,     AutoApplyFees BIT,     UseUWCloseDate BIT    )      WHILE @@Fetch_status=0     BEGIN      BEGIN TRY         BEGIN TRAN          SELECT @TransType=PolicyIndicator,          @EnteredDate=DateIssued,          @WrittenPremium=ISNULL(PremiumAmount, 0),          @PolicyNumber = PolicyNumber,          @OriginalControlNo = OriginalControlNoTable.Note,          @UniqueTransactionID = Ascot_AL3PolicyMasterTable_v2.UniqueTransactionID, -- TFS 91066 added logic to use UniqueTransactionID          @AccounNumber = AccountNumber,          @PolicyeffectiveDate = PolicyEffectiveDate                           FROM Ascot_AL3PolicyMasterTable_v2        OUTER APPLY (            SELECT TOP 1 SubT.Note            FROM Ascot_AL3PolicyMasterTable_v2 SubT            WHERE SubT.AccountNumber = Ascot_AL3PolicyMasterTable_v2.RewriteOfAccountNumber           ) As OriginalControlNoTable        WHERE DnlTrId=@DnlTrId                  INSERT INTO #ConfigurationsTable        SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,           Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,           Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,           Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,           Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,           Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,           Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,           Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,           Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,           Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,           Ascot_tblAL3ProgramConfigurations_v2.UseUWCloseDate           FROM  Ascot_tblAL3ProgramConfigurations_v2        INNER JOIN Ascot_AL3PolicyMasterTable_v2 P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)         AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID         AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode         AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0         AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource        WHERE  P.DnlTrId = @DnlTrId          DECLARE @ConfigurationID int          SELECT TOP 1 @ConfigurationID = C.ID        FROM #ConfigurationsTable C        ORDER BY C.StartingOnPoliciesEffective DESC          DECLARE @QuotingLocationGuid uniqueidentifier        DECLARE @IssuingLocationGuid uniqueidentifier        DECLARE @UnderwriterGuid uniqueidentifier        DECLARE @IssuedByUserID int        DECLARE @BoundByUserID int        DECLARE @CostCenterID int        DECLARE @BrokerCommissionFeeChargeCode int        DECLARE @clientofficeID INT        DECLARE @RunAutoApplyFees BIT                          DECLARE @UseUWCloseDate BIT = 0 -- TFS 92747          SELECT @QuotingLocationGuid = QuotingLocationGuid,          @IssuingLocationGuid = IssuingLocationGuid,          @UnderwriterGuid = UnderwriterGuid,          @IssuedByUserID = IssuedByUserID,          @BoundByUserID = BoundByUserID,          @CostCenterID = CostCenterID,          @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,          @RunAutoApplyFees = AutoApplyFees,          @UseUWCloseDate = UseUWCloseDate            FROM #ConfigurationsTable        WHERE ID = @ConfigurationID          IF @ConfigurationID IS NULL        BEGIN           raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;          END            /*TFS 90900          add logic to determine if the transaction was already imported             */         SET @UniqueTransactionIDExists = 0           SELECT @UniqueTransactionIDExists = 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = @AccounNumber          AND SubT.UniqueTransactionID = @UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> @DnlTrId          and l.ImportSource = @ImportSource          and @UniqueTransactionID IS NOT NULL -- Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.          IF @UniqueTransactionIDExists = 1          BEGIN         raiserror('Policy Transaction previously imported', 15, 1) with nowait;        END            -- TFS 87790 Get the quoting location office id used in spaccountingtransfer       select @clientofficeID =  officeid from tblclientoffices where officeguid = @QuotingLocationGuid                --make sure no prev errors        DECLARE @PrevErrors int        SELECT @PrevErrors=COUNT(*)         FROM  Ascot_AL3PolicyMasterTable_v2        WHERE  Error=1            AND DateProcessed IS NULL            AND DateIssued<@EnteredDate            AND PolicyNumber = @PolicyNumber           AND ErrorMessage NOT IN ('Ignore 0 Premium Endorsement')        IF @PrevErrors > 0         BEGIN          raiserror('Previous transactions had errors.', 15, 1) with nowait;         END           /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                                  --For rewrites the @datebound being passed to spaccoutingtransfer is the billdate                 SET @Effectivedate = CONVERT(varchar(11), CONVERT(datetime, @PolicyeffectiveDate), 101)          SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHETHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END                   DECLARE @OriginalQuoteGuid uniqueidentifier        DECLARE @OriginalQuoteID int        DECLARE @Comment varchar(50)        DECLARE @NewPremium money        DECLARE @TerrorismPremium money        DECLARE @DateBound datetime        DECLARE @UserGuid uniqueidentifier        DECLARE @BillingCode char(5)        DECLARE @BillingTypeID INT                SELECT TOP 1 @OriginalQuoteGuid = tblQuotes.QuoteGuid,          @OriginalQuoteID = tblQuotes.QuoteID,           @BillingTypeID = tblQuotes.BillingTypeID        FROM tblQuotes        WHERE tblQuotes.Controlno = @OriginalControlNo        ORDER BY tblQUotes.QuoteID DESC          SELECT TOP 1           @Comment = 'Automated Rewrite',             @NewPremium = t.PremiumAmount,           @TerrorismPremium = t.TerrorismPremium,           @DateBound = getdate(),           @UserGuid = '5be2621d-4bff-44de-b7d7-17fd01c90c85'--,           --@BillingCode = 'AGNCY'                     FROM           Ascot_AL3PolicyMasterTable_v2 t WITH (NOLOCK)        WHERE t.DnlTrId=@DnlTrId                DECLARE @TotalPremium money        SET @Comment='Automated Endorsement'          select @BillingCode = BillingCode from lstBillingTypes where BillingTypeID = @BillingTypeID      DECLARE @RewriteQuoteID int    DECLARE @RewriteQuoteGuid uniqueidentifier    DECLARE @RewriteControlNumber int    DECLARE @RewriteUnderwriterGuid uniqueidentifier    DECLARE @RewriteEffectiveDate datetime        -- TFS 89800 updated logic to make rewrite of accountnumber a varchar instead of int as this will be policynumber for imports whose source data does not contain    --an actual controlnumber which is unlike feeds that come from Ethos directly.  When the source data is comming from ethos, we can use this as an int as we have access to a controlnumber in IMS.      DECLARE @RewriteAccountNumber varchar (50)     ----copied from endorse      --Create the rewrite      EXEC  spCopyQuote         @QuoteGuid = @OriginalQuoteGuid,         @QuoteStatusID = 1,--submitted         @IsRenewal = 0,         @IsRewrite = 1,         @PolicyTypeID = 3--rewrite                  --Get the Rewrite Quote Guid      SELECT TOP 1 @RewriteQuoteGuid = Q.QuoteGuid,         @RewriteQuoteID = Q.QuoteID,         @RewriteControlNumber = Q.ControlNo,         @RewriteUnderwriterGuid = Q.UnderwriterUserGuid,        @RewriteEffectiveDate = Q.EffectiveDate      FROM tblQuotes Q WHERE RewriteOfQuoteGuid = @OriginalQuoteGuid        SELECT TOP 1 @RewriteAccountNumber = P.AccountNumber      FROM #PolsToEnd P      WHERE P.DnlTrId = @DnlTrId       UPDATE tblQuotes SET PolicyNumber = @PolicyNumber,          AccountNumber = @RewriteAccountNumber     WHERE QuoteGuid = @RewriteQuoteGuid         --//TFS 87687 to call a new column in version table that will hold a proc for custom processing prior to bind,       --in this case, it's for setting “Non renewed” and “By Definition” needs to be set for every transaction       --EXEC Ascot_ImportAL3_NBS_V2_PreBindHighland @RewriteQuoteGuid, @RewriteQuoteID            --Copy forward the quote option      INSERT INTO      tblQuoteOptions      (         QuoteOptionGUID,         OriginalQuoteOptionGUID,         QuoteGUID,         LineGUID,         CompanyLocationID,         DateCreated,         Bound,         Quote,         AdditionalComments,         CompanyInstallmentID,         AutoApplyFeeLog      )      SELECT         NEWID(),         tblQuoteOptions.QUoteOptionGuid,         @RewriteQuoteGuid,         LineGUID,         CompanyLocationID,         GETDATE(),         1,         0,         AdditionalComments,         CompanyInstallmentID,         AutoApplyFeeLog      FROM         tblQuoteOptions      WHERE tblQuoteOptions.QuoteGUID = @OriginalQuoteGuid             --At this point, the endorsement has been created.  We now      --want to copy forward the old premium record with the new amount     INSERT INTO tblQuoteOptionPremiums     SELECT NewQuoteOptions.QuoteOptionGuid,       ISNULL(ChargeCodeTable.ChargeCode, tblFin_PolicyCharges.ChargeCode) AS ChargeCode,       tblQuoteOptionPremiums.OfficeId,       CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL        THEN CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN @TerrorismPremium ELSE @NewPremium END        ELSE CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END       END,       CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL        THEN CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN @TerrorismPremium ELSE @NewPremium END        ELSE CASE WHEN ChargeCodeTable.ChargeID = 'TERR' THEN NewPremiumTable.Terrorism ELSE NewPremiumTable.Premium END       END,       tblQuoteOptionPremiums.Commissionable,       GETDATE()     FROM tblQuoteOptions      INNER JOIN tblQuoteOptions NewQuoteOptions ON NewQuoteOptions.OriginalQuoteOptionGuid = tblQuoteOptions.QuoteOptionGuid     INNER JOIN tblQuoteOptionPremiums ON tblQuoteOptions.QuoteOptionGuid = tblQuoteOptionPremiums.QuoteOptionGuid     INNER JOIN tblFin_PolicyCharges ON tblQuoteOptionPremiums.ChargeCode = tblFin_PolicyCharges.ChargeCode     INNER JOIN lstLines ON tblQuoteOptions.LineGuid = lstLines.LineGuid     OUTER APPLY (         SELECT Ascot_AL3QuoteDetailTable_v2.Premium,           Ascot_AL3QuoteDetailTable_v2.Terrorism,           Ascot_AL3QuoteDetailTable_v2.CompanyLocationCode,           Ascot_AL3QuoteDetailTable_v2.LineCode,           Ascot_AL3QuoteDetailTable_v2.StateID         FROM Ascot_AL3QuoteDetailTable_v2         WHERE Ascot_AL3QuoteDetailTable_v2.DnlTrId = @DnlTrID        ) AS NewPremiumTable     OUTER APPLY (         SELECT TOP 1 SubPC.ChargeCode,            SubPC.ChargeID         FROM tblFin_PolicyCharges SubPC         WHERE SubPC.ChargeID = tblFin_PolicyCharges.ChargeID         AND SubPC.StateID = NewPremiumTable.StateID        ) AS ChargeCodeTable     OUTER APPLY (         SELECT Ascot_AL3PolicyMasterTable_v2.CompanyCode AS CompanyLocationCode,           Ascot_AL3PolicyMasterTable_v2.LineCode         FROM Ascot_AL3PolicyMasterTable_v2         WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId = @DnlTrId        ) AS PolicyLevelImportTable     WHERE tblQuoteOptions.QuoteGuid = @OriginalQuoteGuid     AND  CASE WHEN NewPremiumTable.LineCode IS NULL        THEN CASE WHEN lstLines.LineID = PolicyLevelImportTable.LineCode THEN 1 ELSE 0 END        ELSE CASE WHEN lstLines.LineID = NewPremiumTable.LineCode THEN 1 ELSE 0 END       END = 1     AND  CASE WHEN NewPremiumTable.CompanyLocationCode IS NULL        THEN CASE WHEN tblQuoteOptions.CompanyLocationID = PolicyLevelImportTable.CompanyLocationCode THEN 1 ELSE 0 END        ELSE CASE WHEN tblQuoteOptions.CompanyLocationID = NewPremiumTable.CompanyLocationCode THEN 1 ELSE 0 END       END = 1        IF @BrokerCommissionFeeChargeCode IS NOT NULL    BEGIN       DECLARE @BrokerCommissionPercent decimal(9, 8)     DECLARE @BrokerFeeAppliesToLineGuid uniqueidentifier     DECLARE @BrokerFeeAppliesToCompanyLineGuid uniqueidentifier     DECLARE @BrokerFeeAppliesToQuoteOptionGuid uniqueidentifier     DECLARE @BrokerFeeAppliesToOfficeID int       SELECT @BrokerCommissionPercent = Ascot_AL3PolicyMasterTable_v2.BrokerCommissionPercent,       @BrokerFeeAppliesToLineGuid = lstLines.LineGUID,       @BrokerFeeAppliesToCompanyLineGuid = CL.CompanyLineGuid     FROM Ascot_AL3PolicyMasterTable_v2     INNER JOIN lstLines ON Ascot_AL3PolicyMasterTable_v2.LineCode = lstLines.LineID     Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = Ascot_AL3PolicyMasterTable_v2.CompanyCode     Inner Join  tblCompanyLines CL on CL.LineGUID = lstLines.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and Ascot_AL3PolicyMasterTable_v2.StateOfIssuance = CL.StateID     WHERE DnlTrId = @DnlTrId       SELECT @BrokerFeeAppliesToQuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID     FROM tblQuoteOptions     WHERE tblQuoteOptions.QuoteGuid = @RewriteQuoteGuid     AND  EXISTS(SELECT *          FROM tblQuoteOptionPremiums          WHERE tblQuoteOptionPremiums.QuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID          AND tblQuoteOptionPremiums.Premium <> 0         AND tblQuoteOptionPremiums.OfficeID = @BrokerFeeAppliesToOfficeID)     AND  tblQuoteOptions.LineGUID = @BrokerFeeAppliesToLineGuid       IF @BrokerFeeAppliesToQuoteOptionGuid IS NULL     BEGIN        SELECT @BrokerFeeAppliesToQuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID      FROM tblQuoteOptions      WHERE tblQuoteOptions.QuoteGuid = @RewriteQuoteGuid      AND  EXISTS(SELECT *           FROM tblQuoteOptionPremiums           WHERE tblQuoteOptionPremiums.QuoteOptionGuid = tblQuoteOptions.QuoteOptionGUID           AND tblQuoteOptionPremiums.Premium <> 0)          --AND tblQuoteOptionPremiums.OfficeID = @BrokerFeeAppliesToOfficeID      --AND  tblQuoteOptions.LineGUID = @BrokerFeeAppliesToLineGuid       END       DECLARE @BrokerCommissionCompanyFeeID int     SELECT @BrokerCommissionCompanyFeeID = CompanyFeeID     FROM tblCompanyPolicyCharges     WHERE tblCompanyPolicyCharges.ChargeCode = @BrokerCommissionFeeChargeCode     AND tblCompanyPolicyCharges.LineGuid = @BrokerFeeAppliesToLineGuid       IF @BrokerCommissionCompanyFeeID IS NULL     BEGIN        raiserror('No CompanyFeeID setup found for ChargeCode and Line', 15, 1) with nowait;       END         INSERT INTO tblQuoteOptionCharges(QuoteOptionGuid, CompanyFeeID, ChargeCode, OfficeID, CompanyLineGuid, FeeTypeID, Payable, PercentageRate, Splittable, AutoApplied)     SELECT @BrokerFeeAppliesToQuoteOptionGuid,       @BrokerCommissionCompanyFeeID,       @BrokerCommissionFeeChargeCode,       @BrokerFeeAppliesToOfficeID,       @BrokerFeeAppliesToCompanyLineGuid,       3,       0,       @BrokerCommissionPercent,        0,       0     FROM Ascot_AL3PolicyMasterTable_v2     WHERE Ascot_AL3PolicyMasterTable_v2.DnlTrId = @DnlTrId        END          --Update Quote Option Data      UPDATE      tblQuoteOptions      SET      Bound = 1      WHERE      QuoteGuid = @RewriteQuoteGuid        --Update Quote Data      UPDATE      tblQuotes      SET      DateIssued = GETDATE(),      IssuedByUserID = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),      DateBound = GETDATE(),      BoundByUserId = (SELECT TOP 1 UserId FROM tblUsers WHERE UserGuid = @UserGuid),      QuoteStatusId = 3      WHERE      QuoteGuid = @RewriteQuoteGuid      AND DateIssued IS NULL           UPDATE Ascot_AL3PolicyMasterTable_v2 SET CreatedQuoteID = @RewriteQuoteID      FROM Ascot_AL3PolicyMasterTable_v2      WHERE DnlTrID = @DnlTrID          --TFS 89800  SQL Ascot added spautoapplyfees       --it can be controlled via @RunAutoApplyFees               --IF @RunAutoApplyFees = 1       --BEGIN         -- IF OBJECT_ID('AutoApplyFeesCur') IS NOT NULL        -- BEGIN        --  CLOSE AutoApplyFeesCur        --  DEALLOCATE AutoApplyFeesCur       -- END         -- DECLARE @CursorCreatedQuoteOptionGuid uniqueidentifier         -- DECLARE AutoApplyFeesCur Cursor FAST_FORWARD FORWARD_ONLY       -- FOR SELECT CreatedQuoteOptionGuid FROM #PolsToCreateDetails WHERE DnlTrId=@DnlTrId         -- OPEN AutoApplyFeesCur       -- FETCH AutoApplyFeesCur INTO @CursorCreatedQuoteOptionGuid         -- WHILE @@Fetch_status=0       -- BEGIN         --  exec spAutoApplyFees @CursorCreatedQuoteOptionGuid                --  FETCH AutoApplyFeesCur INTO @CursorCreatedQuoteOptionGuid         -- END         -- CLOSE AutoApplyFeesCur        -- DEALLOCATE AutoApplyFeesCur         --END                   --Send invoices to accounting (AccountingTransfer.vb)      DECLARE @invoicenum int            raiserror('spAccountingTransfer', 0, 1) with nowait;      --exec spaccountingtransfer 0, @RewriteQuoteGuid, @MGASystemsUserGuid, 17, 0, 1, @RewriteEffectiveDate,      --@datebilled, null, @billingCode, null, null, null,  @invoicenum output         exec spaccountingtransfer 0, @RewriteQuoteGuid, @MGASystemsUserGuid, @clientofficeID, 0, 1, @RewriteEffectiveDate,      @datebilled, null, @billingCode, null, null, null,  @invoicenum output                --Post to Journal      EXEC spFin_PostInvoice @InvoiceNum        exec GreyHawk_AfterPostInvoice @invoicenum--Posts reinsurance data        --Verify Invoices were created      DECLARE @InvoiceCount INT      SELECT @InvoiceCount = COUNT(*) FROM tblFin_Invoices WHERE QuoteID = (SELECT QuoteID FROM tblQuotes WHERE QuoteGuid = @RewriteQuoteGuid) AND Failed = 0        IF (@InvoiceCount <> 1)      BEGIN     ROLLBACK TRANSACTION     RETURN --Raise error here      END      ----copied from endorse                 --update sucess        UPDATE      Ascot_AL3PolicyMasterTable_v2        SET         Error=0,           ErrorMessage=NULL,           ErrorTime=NULL,           DateProcessed=getdate(),           ProcessedBy='MGA',           Note=@RewriteControlNumber        WHERE  DnlTrId=@DnlTrId                DECLARE @tmpContext VARCHAR(200)       SET @tmpContext = 'Ascot Policy Import V2 for importLogID:' + convert(varchar(10),@ImportLogID)         EXEC dbo.LogAction        @userid = 1,       @action = 'Policy transaction was imported into IMS via Ascot Policy Import',       @identifierID = @ImportLogID,       @identifierguid = @RewriteQuoteGuid,       @context = @tmpContext                COMMIT TRAN              if @@trancount<>0 COMMIT TRAN      END TRY      BEGIN CATCH       ROLLBACK TRAN       if @@trancount<>0 ROLLBACK TRAN              UPDATE      Ascot_AL3PolicyMasterTable_v2       SET         Error=1,          ErrorMessage = ERROR_MESSAGE(),          ErrorTime=getdate()       WHERE  DnlTrId=@DnlTrId      END CATCH            FETCH Cur INTO @DnlTrId            IF @@Fetch_status=0       BEGIN         raiserror('Wait 10 seconds', 0, 1) with nowait;        WAITFOR DELAY '00:00:10' --10 seconds                DECLARE @postblocking int        SET @postblocking=1          WHILE @postblocking > 0         BEGIN          SELECT @postblocking=COUNT(*)           FROM master.sys.dm_exec_requests          WHERE blocking_session_id <> 0                    IF @postblocking > 0           BEGIN           raiserror('Something is post-blocking wait 10 seconds', 0, 1) with nowait;           WAITFOR DELAY '00:00:10' --10 SECONDS          END         END        END     END     CLOSE Cur    DEALLOCATE Cur     DROP TABLE #ConfigurationsTable   DROP TABLE #PolsToEndDetails    END
UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives	Create PROCEDURE [dbo].[UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives]  ( @QuoteOptionGUID UNIQUEIDENTIFIER   ,@LineName VARCHAR(100)   ,@RawPremiumHistoryTable VARCHAR(200)   ,@PremiumField VARCHAR(100)   ,@ChargeId VARCHAR(5)   ,@PremiumModifier money = 1)  AS  BEGIN   DECLARE @quoteGuid UNIQUEIDENTIFIER     /*    @QuoteOptionGUID = @QuoteOptionGUID,    @LineName = 'Captive GL Primary Employers Liability - Occurrence',    @RawPremiumHistoryTable = 'Dynamic_Data_CaptiveGLRater',    @PremiumField = 'CaptGPriEmplBenOcc',    @ChargeID = 'PREM'   */     SELECT     @quoteGuid = qo.QuoteGUID   FROM     dbo.tblQuoteOptions qo   WHERE     qo.QuoteOptionGUID = @QuoteOptionGUID        EXEC dbo.ExcelRating_tblQuoteOptionsSetup @QuoteGuid = @QuoteGuid     SELECT     @QuoteOptionGUID = qo.QuoteOptionGUID   FROM     dbo.tblQuoteOptions qo   JOIN dbo.lstLines ll on qo.LineGUID = ll.LineGUID   WHERE     qo.QuoteGUID = @quoteGuid    AND ll.LineName = @LineName     IF @quoteOptionGuid IS NULL   BEGIN    RAISERROR ('No option found for the line:', @LineName, 1);   END   BEGIN    EXEC dbo.UpdatePremiumHistoricV3 @QuoteOptionGuid = @quoteOptionGuid            , @RawPremiumHistoryTable = @RawPremiumHistoryTable            , @PremiumField = @PremiumField            , @ChargeID = @ChargeID            , @premiumModifier = @premiumModifier            , @RoundPremiums = 0            , @prorataPrecision = 7      EXEC dbo.spAutoApplyFees @QuoteOptionGUID = @quoteOptionGuid   END  END
Ascot_CaptiveGLRater_RateOptionV2	CREATE  PROCEDURE [dbo].[Ascot_CaptiveGLRater_RateOptionV2]  (@QuoteOptionGUID UNIQUEIDENTIFIER)  AS  BEGIN     --need to account for line splits   /*   select     tq.controlno,     tq.quoteid,     tq.QuoteGUID,     qd.FactorSetGUID,     qo.QuoteOptionGUID,     rt.RatingType,     ll.LineName   from tblQuotes tq   join tblquotedetails qd    on tq.quoteguid = qd.quoteguid   join tblQuoteOptions qo    on tq.QuoteGUID = qo.QuoteGUID   join lstRatingTypes rt    on qd.raterid = rt.ratingtypeid   join lstlines ll    on qo.LineGUID = ll.LineGUID   where     qo.quoteguidguid = @QuoteOptionGUID     select  Splits.*,     ProgramCodes.*,     tblCompanyProgramCodes.progcode    from Ascot_tblCaptivePremiumSplits Splits    join Ascot_ParentCaptiveProgamsCodes ProgramCodes    on Splits.ParentID = ProgramCodes.ParentID   join tblCompanyProgramCodes    on ProgramCodes.programid = tblCompanyProgramCodes.programid       childLine           LineGUID        ProgCode   ProgramID   ---------------------------------------------------------------------------------------------------------------------   Captive GL Primary Employee Benefits - Claims Made 57528047-FDD4-4A22-8F37-289162D978C5 Captive 10 Primary 1038     select * from Ascot_ParentCaptiveProgamsCodes where programid = 1038     select * from Ascot_tblCaptivePremiumSplits where parentid = 2      ParentID LineGUIDFrom       LineGUIDTo        SplitPct   2   91B71D05-93E7-4A1A-8CC1-04B79F9C4B15 4C2974A6-7DD4-4229-A648-E569805CE3F7 0.4000   2   9BA0EE09-71CA-407F-AD21-68BB73EE71C4 0A4A6F9D-FF01-4677-BDA7-6BB6658942C4 0.4000   2   20BA4B89-670D-474A-B0F4-9ACEECC9103B 522722FD-2644-44B1-A4CC-DBD68CB3798E 0.4000   2   EF4D6C85-74C7-482F-A644-E286E048A2EC 5EC2804A-4EF3-4D45-A196-D1A0CAFE3C8C 0.4000    select     mainline.LineName as mainPackageLine,    childline.LineName as childLine,    tcl.LineGUID,    tblCompanyProgramCodes.ProgCode,   --this is using parent id 2, which does not have any of these lines; lets change it to use parent id 7    --ProgCode     ProgramID   --Captive AFL GL Primary 1055    1055, --qd.ProgramID,    Ascot_ParentCaptiveProgamsCodes.parentid,    tcl.*  from tblQuotes tq  join tblquotedetails qd   on tq.quoteguid = qd.quoteguid  join lstRatingTypes rt   on qd.raterid = rt.ratingtypeid  join tblCompanyLines tcl   on qd.CompanyLineGuid = tcl.CompanyLineGUID  join tblCompanyLocations     on tq.CompanyLocationGuid = tblCompanyLocations.companylocationGuid  join lstlines mainline   on tq.lineguid = mainline.LineGUID  join lstlines childline   on tcl.lineguid = childline.LineGUID  join tblCompanyProgramCodes   on qd.ProgramID = tblCompanyProgramCodes.ProgramID  join Ascot_ParentCaptiveProgamsCodes   on 1055 = Ascot_ParentCaptiveProgamsCodes.programid --should be using qd.ProgramID,  where    tq.quoteid = 500685  order by    childline.LineName      childLine           LineGUID        ProgCode   ProgramID    Captive GL Primary Employee Benefits - Claims Made 57528047-FDD4-4A22-8F37-289162D978C5 Captive 10 Primary 1055   */       DECLARE @QuoteGUID UNIQUEIDENTIFIER     SELECT @QuoteGUID = QuoteGUID     FROM dbo.tblQuoteOptions     WHERE QuoteOptionGUID = @QuoteOptionGuid     --select @QuoteGUID    --this one EXEC UpdateCostCenter_AscotCaptives @QuoteGUID = @QuoteGUID    --this one EXEC dbo.UpdateCommission_AscotCaptives @QuoteGUID = @QuoteGUID     declare @LineSplitPercentages table  (   ProgramId int,   ParentId int,     PrimaryLineName varchar(200),   PrimaryLineGuid uniqueidentifier,   PrimarySplitPct decimal(6,5),     SecondaryLineName varchar(200),   SecondaryLineGuid uniqueidentifier,   SecondarySplitPct decimal(6,5)  )      insert into @LineSplitPercentages  --primary lines  select     --mainline.LineName as mainPackageLine,    --tblCompanyProgramCodes.ProgCode,   --this is using parent id 2, which does not have any of these lines; lets change it to use parent id 7    --ProgCode     ProgramID   --Captive AFL GL Primary 1055    qd.ProgramID,    Ascot_ParentCaptiveProgamsCodes.parentid,        childline.LineName as PrimaryLineName,    tcl.LineGUID as PrimaryLineGuid,    (1 - splits.SplitPct) as PrimarySplitPct,      SecondaryLineName.LineName as SecondaryLineName,    splits.LineGUidTo as SecondaryLineGuid,    splits.SplitPct as SecondarySplitPct      --, CLD.*    --split.*    --, tcl.*  from tblQuotes tq  join tblquotedetails qd   on tq.quoteguid = qd.quoteguid  join lstRatingTypes rt   on qd.raterid = rt.ratingtypeid  join tblCompanyLines tcl   on qd.CompanyLineGuid = tcl.CompanyLineGUID  join tblCompanyLocations     on tq.CompanyLocationGuid = tblCompanyLocations.companylocationGuid  join lstlines mainline   on tq.lineguid = mainline.LineGUID  join lstlines childline   on tcl.lineguid = childline.LineGUID  join tblCompanyProgramCodes   on qd.ProgramID = tblCompanyProgramCodes.ProgramID  join Ascot_ParentCaptiveProgamsCodes    --use for testing only    --on 1055 = Ascot_ParentCaptiveProgamsCodes.programid --should be using qd.ProgramID,   on qd.ProgramID = Ascot_ParentCaptiveProgamsCodes.programid --should be using qd.ProgramID,  --this will only return the primary line since we are using are using the LineGUIFFrom  join Ascot_tblCaptivePremiumSplits splits   on tcl.LineGUID = splits.LineGUIDFrom   and Ascot_ParentCaptiveProgamsCodes.ParentID = splits.ParentID  join lstlines SecondaryLineName   on splits.LineGuidTo = SecondaryLineName.LineGuid  --(3/20/24) may have to use this to get correct parent id  /*  left join   (    select       --mainline.LineName as mainPackageLine,      childline.LineName as childLine,      tcl.LineGUID,      --tblCompanyProgramCodes.ProgCode,     --this is using parent id 2, which does not have any of these lines; lets change it to use parent id 7      --ProgCode     ProgramID     --Captive AFL GL Primary 1055      qd.ProgramID,      Ascot_ParentCaptiveProgamsCodes.parentid,      SplitPct as UpdatedSplitPct      --splits.*      --tcl.*    from tblQuotes tq    join tblquotedetails qd     on tq.quoteguid = qd.quoteguid    join lstRatingTypes rt     on qd.raterid = rt.ratingtypeid    join tblCompanyLines tcl     on qd.CompanyLineGuid = tcl.CompanyLineGUID    join tblCompanyLocations       on tq.CompanyLocationGuid = tblCompanyLocations.companylocationGuid    join lstlines mainline     on tq.lineguid = mainline.LineGUID    join lstlines childline     on tcl.lineguid = childline.LineGUID    join tblCompanyProgramCodes     on qd.ProgramID = tblCompanyProgramCodes.ProgramID    join Ascot_ParentCaptiveProgamsCodes     --used only for testing     --on 1055 = Ascot_ParentCaptiveProgamsCodes.programid --should be using qd.ProgramID,     on qd.ProgramID = Ascot_ParentCaptiveProgamsCodes.programid --should be using qd.ProgramID,    join Ascot_tblCaptivePremiumSplits splits     on tcl.LineGUID = splits.LineGUIDTo     and Ascot_ParentCaptiveProgamsCodes.ParentID = splits.ParentID    where      tq.quoteguid = @QuoteGUID   ) CLD   on splits.LineGUidTo = CLD.LineGUID  */  where    tq.quoteguid = @QuoteGUID    /*  select * from @LineSplitPercentages    select     --mainline.LineName as mainPackageLine,    childline.LineName as childLine,    tcl.LineGUID,    --tblCompanyProgramCodes.ProgCode,   --this is using parent id 2, which does not have any of these lines; lets change it to use parent id 7    --ProgCode     ProgramID   --Captive AFL GL Primary 1055    qd.ProgramID,    Ascot_ParentCaptiveProgamsCodes.parentid,    SplitPct as UpdatedSplitPct    --splits.*    --tcl.*  from tblQuotes tq  join tblquotedetails qd   on tq.quoteguid = qd.quoteguid  join lstRatingTypes rt   on qd.raterid = rt.ratingtypeid  join tblCompanyLines tcl   on qd.CompanyLineGuid = tcl.CompanyLineGUID  join tblCompanyLocations     on tq.CompanyLocationGuid = tblCompanyLocations.companylocationGuid  join lstlines mainline   on tq.lineguid = mainline.LineGUID  join lstlines childline   on tcl.lineguid = childline.LineGUID  join tblCompanyProgramCodes   on qd.ProgramID = tblCompanyProgramCodes.ProgramID  join Ascot_ParentCaptiveProgamsCodes   --used only for testing   --on 1055 = Ascot_ParentCaptiveProgamsCodes.programid --should be using qd.ProgramID,   on qd.ProgramID = Ascot_ParentCaptiveProgamsCodes.programid --should be using qd.ProgramID,  join Ascot_tblCaptivePremiumSplits splits   on tcl.LineGUID = splits.LineGUIDTo   and Ascot_ParentCaptiveProgamsCodes.ParentID = splits.ParentID  where    tq.quoteguid = @QuoteGUID          select '@LineSplitPercentages' as tablename, * From @LineSplitPercentages  */    ------------------------------  /* Code to reset all lines */  --not sure if we have a better way to reset the excel rater; start with this and then look into  ------------------------------       declare @ResetLines table     (      RowNumber int,      PrimaryLineName varchar(200),      PrimaryLineGuid uniqueidentifier     )       insert into @ResetLines        select         --mainline.LineName as mainPackageLine,        --tblCompanyProgramCodes.ProgCode,       --this is using parent id 2, which does not have any of these lines; lets change it to use parent id 7        --ProgCode     ProgramID       --Captive AFL GL Primary 1055        --'test all lines' as linename,        row_number() over(partition by quoteid order by childline.LineName) as RowNumber,          childline.LineName as LineName,        tcl.LineGUID as LineGuid        from tblQuotes tq      join tblquotedetails qd       on tq.quoteguid = qd.quoteguid      join lstRatingTypes rt       on qd.raterid = rt.ratingtypeid      join tblCompanyLines tcl       on qd.CompanyLineGuid = tcl.CompanyLineGUID      join tblCompanyLocations         on tq.CompanyLocationGuid = tblCompanyLocations.companylocationGuid      join lstlines mainline       on tq.lineguid = mainline.LineGUID      join lstlines childline       on tcl.lineguid = childline.LineGUID      join tblCompanyProgramCodes       on qd.ProgramID = tblCompanyProgramCodes.ProgramID        where        tq.quoteguid = @QuoteGUID          --select * from @ResetLines         DECLARE @index INT = 1,       @rowCount int = 1,       @LineToReset varchar(100),       @ChargeId char(4) = 'PREM'       set @rowCount =  ( select count(*) from @ResetLines)        --select @rowCount        WHILE @index <= @rowCount     BEGIN        set @LineToReset = (select PrimaryLineName from @ResetLines where RowNumber = @index )        --for debugging       --select @LineToReset       --select concat(@index, 'test')             --if the line name contains TRIA use TERR for the charge id      set @ChargeId = ( select iif(charindex('TRIA', @LineToReset) != 0, 'TERR', 'PREM'))        --for debugging       --select @LineToReset as 'LineToRest'       --select @ChargeId as 'Charge Id'        --since we are setting all lines to 0 the field does not matter as long as it is a valid field      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                 @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @LineToReset,                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriEmplBenOcc',                @ChargeID = @ChargeId,                @PremiumModifier = 0.0        /*      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                 @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @LineToReset,                @RawPremiumHistoryTable = 'Dynamic_Data_CaptiveGLRater',                @PremiumField = 'CaptGPriEmplBenOcc',                @ChargeID = 'TERR',                @PremiumModifier = 0.0      */        SET @index = @index + 1       END         print 'FINISHED RESET'  ------------------------------  /* End Code to reset all lines */  ------------------------------           --union all  --child lines  /*  select     --mainline.LineName as mainPackageLine,    childline.LineName as childLine,    tcl.LineGUID,    --tblCompanyProgramCodes.ProgCode,   --this is using parent id 2, which does not have any of these lines; lets change it to use parent id 7    --ProgCode     ProgramID   --Captive AFL GL Primary 1055    1055, --qd.ProgramID,    Ascot_ParentCaptiveProgamsCodes.parentid,    SplitPct as UpdatedSplitPct    --splits.*    --tcl.*  from tblQuotes tq  join tblquotedetails qd   on tq.quoteguid = qd.quoteguid  join lstRatingTypes rt   on qd.raterid = rt.ratingtypeid  join tblCompanyLines tcl   on qd.CompanyLineGuid = tcl.CompanyLineGUID  join tblCompanyLocations     on tq.CompanyLocationGuid = tblCompanyLocations.companylocationGuid  join lstlines mainline   on tq.lineguid = mainline.LineGUID  join lstlines childline   on tcl.lineguid = childline.LineGUID  join tblCompanyProgramCodes   on qd.ProgramID = tblCompanyProgramCodes.ProgramID  join Ascot_ParentCaptiveProgamsCodes   on 1055 = Ascot_ParentCaptiveProgamsCodes.programid --should be using qd.ProgramID,  join Ascot_tblCaptivePremiumSplits splits   on tcl.LineGUID = splits.LineGUIDTo   and Ascot_ParentCaptiveProgamsCodes.ParentID = splits.ParentID  where    tq.quoteid = 500685  order by    childline.LineName  */      --select * from @LineSplitPercentages order by PrimaryLineName    --select * from Ascot_tblCaptivePremiumSplits  --ParentID LineGUIDFrom       LineGUIDTo        SplitPct  --7   91B71D05-93E7-4A1A-8CC1-04B79F9C4B15 4C2974A6-7DD4-4229-A648-E569805CE3F7 0.1600          --------------------------  --SET PREMIUM FOR ALL LINES IN POLICY  --------------------------    --OCCURRENCE LINES (start) --Captive GL - Occurrence   /*   1 - 'Captive GL Primary Employers Liability - Occurrence'   2 - 'Captive GL Primary Liquor - Occurrence'   3 - 'Captive GL Primary Other - Occurrence'   4 - 'Captive GL Primary PremOps - Occurrence'   5 - 'Captive GL Primary Products - Occurrence'   6 - 'Captive GL Primary TRIA - Occurrence'   */     print 'START OCCURRENCE LINES'     --START = 1 - 'Captive GL Primary Employers Liability - Occurrence'   ----------       declare @Modifier decimal(6,5)    declare @Line varchar(100)        set @Line = 'Captive GL Primary Employers Liability - Occurrence'    set @Modifier = ( select isnull(PrimarySplitPct, 1.0) from @LineSplitPercentages where PrimaryLineName = @Line )      --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end       --for debugging     --select @Line     --select @Modifier      --for primary line    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                 @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary Employers Liability - Occurrence',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriEmplBenOcc',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier      --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary Employers Liability - Occurrence',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriEmplBenOcc',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary Employers Liability - Occurrence'     --START = 2 - 'Captive GL Primary Liquor - Occurrence'   ----------    set @Line = 'Captive GL Primary Liquor - Occurrence'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )      --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary Liquor - Occurrence',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriLiqOcc',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier        --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary Liquor - Occurrence',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriLiqOcc',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary Liquor - Occurrence'     --START = 3 - 'Captive GL Primary Other - Occurrence'   ----------    set @Line = 'Captive GL Primary Other - Occurrence'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )      --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary Other - Occurrence',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriOtherOcc',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier      --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary Other - Occurrence',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriOtherOcc',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary Other - Occurrence'       --START = 4 - 'Captive GL Primary PremOps - Occurrence'   ----------    set @Line = 'Captive GL Primary PremOps - Occurrence'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )        --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary PremOps - Occurrence',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriPremOpsOcc',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier      --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary PremOps - Occurrence',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriPremOpsOcc',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary PremOps - Occurrence'     --START = 5 - 'Captive GL Primary Products - Occurrence'   ----------    set @Line = 'Captive GL Primary Products - Occurrence'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )      --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary Products - Occurrence',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriProdOcc',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier        --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary Products - Occurrence',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriProdOcc',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary PremOps - Occurrence'     --START = 6 - 'Captive GL Primary TRIA - Occurrence'   ----------    set @Line = 'Captive GL Primary TRIA - Occurrence'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )      --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary TRIA - Occurrence',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriTRIAOcc',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier        --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary TRIA - Occurrence',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriTRIAOcc',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary PremOps - Occurrence'    --OCCURENCE LINES (end)      print 'START CLAIMS MADE LINES'     --CLAIMS MADE LINES (start) --Captive GL - Claims Made   /*   1 - 'Captive GL Primary Employee Benefits - Claims Made'   2 - 'Captive GL Primary Liquor - Claims Made'   3 - 'Captive GL Primary Other - Claims Made'   4 - 'Captive GL Primary PremOps - Claims Made'   5 - 'Captive GL Primary Products - Claims Made'   6 - 'Captive GL Primary TRIA - Claims Made'   */     --START = 1 - 'Captive GL Primary Employee Benefits - Claims Made'   ----------    set @Line = 'Captive GL Primary Employee Benefits - Claims Made'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )        --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary Employee Benefits - Claims Made',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriEmplBenClaimsMade',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier      --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary Employee Benefits - Claims Made',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriEmplBenClaimsMade',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary Employee Benefits - Claims Made'     --START = 2 - 'Captive GL Primary Liquor - Claims Made'   ----------    set @Line = 'Captive GL Primary Liquor - Claims Made'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )        --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary Liquor - Claims Made',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriLiqCM',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier        --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary Liquor - Claims Made',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriLiqCM',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary Liquor - Claims Made'       --START = 3 - 'Captive GL Primary Other - Claims Made'   ----------    set @Line = 'Captive GL Primary Other - Claims Made'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )               --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary Other - Claims Made',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriOtherCM',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier        --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'Captive GL Primary Other - Claims Made',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriOtherCM',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary Other - Claims Made'     --START = 4 - 'Captive GL Primary PremOps - Claims Made'   ----------    set @Line = 'Captive GL Primary PremOps - Claims Made'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )      --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary PremOps - Claims Made',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriPremOpsCM',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier        --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary PremOps - Claims Made',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriPremOpsCM',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary Other - Claims Made'     --START = 5 - 'Captive GL Primary Products - Claims Made'   ----------   set @Line = 'Captive GL Primary Products - Claims Made'   set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )      --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary Products - Claims Made',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriProdCM',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier        --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOLfor Captive GL Primary Products - Claims Made',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriProdCM',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary Products - Claims Made'     --START = 6 - 'Captive GL Primary TRIA - Claims Made'   ----------    set @Line = 'Captive GL Primary TRIA - Claims Made'    set @Modifier = ( select PrimarySplitPct from @LineSplitPercentages where PrimaryLineName = @Line )      --if table @LineSplitPercentages does not return any data it may be because the program id does not have a parent id      --in Ascot_ParentCaptiveProgamsCodes or because the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      --if this is the case just return the primary premium    if @Modifier is null    begin       set @Modifier = 1.0    end      --PRIMARY LINE    EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                @QuoteOptionGUID = @QuoteOptionGUID,                @LineName = @Line, --'Captive GL Primary TRIA - Claims Made',                @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                @PremiumField = 'CaptGPriTRIACM',                @ChargeID = 'PREM',                @PremiumModifier = @Modifier        --SECONDARY LINE     --get secondary line info; this will not return a seconday line if the program id does not have a parent id in Ascot_ParentCaptiveProgamsCodes      --or if the parent id or the line guid does not have a split in Ascot_tblCaptivePremiumSplits      set @Line = ( select SecondaryLineName from @LineSplitPercentages where PrimaryLineName = @Line )          --for debugging      --select @Line as 'Secondary Line Name'       if (@Line is not null)     begin      set @Modifier = ( select isnull(SecondarySplitPct, 0.0) from @LineSplitPercentages where SecondaryLineName = @Line )          --for debugging      --select @Line as 'line for secondary'      --select @Modifier as 'line for modifier'        --for secondary line      EXEC UpdatePremiumHistoricV3_RateOptionByLine_AscotCaptives                  @QuoteOptionGUID = @QuoteOptionGUID,                 @LineName = @Line, --'XOL for Captive GL Primary TRIA - Claims Made',                 @RawPremiumHistoryTable = 'Dynamic_Data_GLCaptiveRater',                 @PremiumField = 'CaptGPriTRIACM',                 @ChargeID = 'PREM',                 @PremiumModifier = @Modifier     end   ----------   --END = 'Captive GL Primary TRIA - Claims Made'      --CLAIMS MADE LINES (end)      END
Ascot_rptAccountTransactionLedger_CaptiveProgram	CREATE PROC [dbo].[Ascot_rptAccountTransactionLedger_CaptiveProgram]      @glaccountids VARCHAR(8000) = NULL,      @DateRangeFrom DATETIME = NULL,      @DateRangeTo DATETIME = NULL,      @glcompanyid INT = NULL,      @costcenterid INT = NULL,      @entityGuid UNIQUEIDENTIFIER = NULL,      @PolicyNumbers VARCHAR(MAX) = NULL,      @ProgramCodes VARCHAR(MAX) = NULL,      @CostCenters VARCHAR(MAX) = NULL,      @InvoiceNumbers VARCHAR(8000) = NULL,      @FlagIncludeASLOB BIT = NULL,      @ExcludeVoidInvoices BIT = 1,      @DateFrom DATE = NULL,      @DateTo DATE = NULL  AS    --DECLARE  -- @glaccountids VARCHAR(8000) = 280,  --    @DateRangeFrom DATETIME = '01/01/2024',  --    @DateRangeTo DATETIME = '01/10/2024',  --    @glcompanyid INT = NULL,  --    @costcenterid INT = 21,  --    @entityGuid UNIQUEIDENTIFIER = NULL,  --    @PolicyNumbers VARCHAR(MAX) = NULL,  --    @ProgramCodes VARCHAR(MAX) = NULL,  --    @CostCenters VARCHAR(MAX) = NULL,  --    @InvoiceNumbers VARCHAR(8000) = NULL,  --    @FlagIncludeASLOB BIT = NULL,  --    @ExcludeVoidInvoices BIT = 1,  --    @DateFrom DATE = '01/01/2024',  --    @DateTo DATE = '01/10/2024'  BEGIN     --NOTE: (6/10/24) this was taken from sproc Ascot_rptAccountTransactionLedger and update to include captive program data          SET NOCOUNT ON;      SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;        DECLARE @GlAccountsTable TABLE      (          GlAcctId INT      );      IF @glaccountids IS NOT NULL      BEGIN          INSERT INTO @GlAccountsTable          SELECT *          FROM dbo.StringOfIntsToTable(@glaccountids, ',');      END;        DECLARE @PolicyNumbersTable TABLE      (          PolicyNumber VARCHAR(MAX)      );      IF @PolicyNumbers IS NOT NULL      BEGIN          INSERT INTO @PolicyNumbersTable          SELECT *          FROM dbo.StringOfStringsToTable(@PolicyNumbers, ',');      END;          DECLARE @InvoiceNumbersParseTable TABLE      (          InvoiceNumberString VARCHAR(MAX)      );      IF @InvoiceNumbers IS NOT NULL      BEGIN          INSERT INTO @InvoiceNumbersParseTable          SELECT *          FROM dbo.StringOfStringsToTable(@InvoiceNumbers, ',');      END;        DECLARE @InvoiceNumbersTable TABLE      (          InvoiceNumber INT      );      IF @InvoiceNumbers IS NOT NULL      BEGIN          INSERT INTO @InvoiceNumbersTable          SELECT CONVERT(INT, InvoiceNumberString)          FROM @InvoiceNumbersParseTable          WHERE ISNUMERIC(InvoiceNumberString) = 1;      END;        DECLARE @ProgramCodesTable TABLE      (          ProgramCode VARCHAR(500)      );      IF @ProgramCodes IS NOT NULL      BEGIN          INSERT INTO @ProgramCodesTable          SELECT *          FROM dbo.StringOfStringsToTable(@ProgramCodes, ',');      END;        DECLARE @CostCentersTable TABLE      (          CostCenter VARCHAR(MAX)      );      IF @CostCenters IS NOT NULL      BEGIN          INSERT INTO @CostCentersTable          SELECT *          FROM dbo.StringOfStringsToTable(@CostCenters, ',');      END;        DECLARE @entityTbl TABLE      (          Guid UNIQUEIDENTIFIER      );          IF (@entityGuid IS NOT NULL)      BEGIN          INSERT INTO @entityTbl          SELECT Guid          FROM dbo.GetLinkedEntities(@entityGuid);      END;        IF OBJECT_ID('tempdb..#VoidedInvoiceNumsTable') IS NOT NULL          DROP TABLE #VoidedInvoiceNumsTable;        CREATE TABLE #VoidedInvoiceNumsTable      (          InvoiceNum INT PRIMARY KEY      );        INSERT INTO #VoidedInvoiceNumsTable      SELECT DISTINCT             tblFin_Invoices.InvoiceNum      FROM tblFin_Invoices      WHERE Failed = 1;        IF OBJECT_ID('tempdb..#pretbl') IS NOT NULL      BEGIN            DROP TABLE #pretbl;        END;          CREATE TABLE #pretbl      (          fullname VARCHAR(100),          TransDescription VARCHAR(100),          TransactNum INT,          PostingNum INT,          PolicyNum VARCHAR(100),          CostCenterName VARCHAR(100),          SystemInvoiceNum INT,          BillingType VARCHAR(100),          Comments VARCHAR(2000),          checkNum VARCHAR(50),          PostDate DATE,          VoidedBy INT,          VoiderFor INT,          InvoiceNumber INT,          Debit MONEY,          Credit MONEY,          Balance MONEY,          Company VARCHAR(1000),          GLAccountNumber INT,          GlAccountName VARCHAR(100),          EntityName VARCHAR(2000),          ProgramCode VARCHAR(500),          DateBound VARCHAR(11),          PolicyEffectiveDate VARCHAR(11),          TransactionEffectiveDate VARCHAR(11),          CreatedDate VARCHAR(11),          InvoiceDate VARCHAR(11),          DueDate VARCHAR(11),          SunGLProductionAccountingDate VARCHAR(11),          IsBound VARCHAR(10),          ChargeType VARCHAR(10),          GLAccountType VARCHAR(10),          ChargeID VARCHAR(100),          ControlNo INT,          ProducerLocation VARCHAR(500),          Producer VARCHAR(500),          CurrencyCode VARCHAR(100),          PostingUser VARCHAR(200),          ResPayID INT,          ClaimID INT,          AccidentYear INT,          ClaimantCoverageLineGuid UNIQUEIDENTIFIER,          QuoteID INT,          StateID VARCHAR(10),          ASLOB VARCHAR(100),          ClaimReservePaymentDateCreated DATETIME,          ClaimNumber VARCHAR(100),          ResPayIDExists BIT,          PoNum INT,          ClientOfficeName VARCHAR(1000),          InterCompany VARCHAR(1000),          Expirationdate DATETIME,          PolicyChildLine UNIQUEIDENTIFIER,    [Child Line Name] VARCHAR(100)      );        INSERT INTO #pretbl      SELECT      --'#tbl' as tablename,     --jp.GLAcctID,          gl.FullName,             tt.[TransDescription],             jp.TransactNum,             jp.PostingNum,             CASE                 WHEN jp.InvoiceNum IS NULL THEN                     ClaimPolicyNumberTable.PolicyNumber                 ELSE                     QuotesTable.PolicyNumber             END AS [PolicyNum],             CostCenterTable.GroupName AS [CostCenterName],             jp.InvoiceNum AS SystemInvoiceNum,             CASE tblFin_Invoices.Remitter                 WHEN 'I' THEN                     'Direct Bill (MGA)'                 WHEN 'C' THEN                     'Direct Bill (Company)'                 WHEN 'B' THEN                     'Agency Bill'                 ELSE                     NULL             END AS [BillingType],             CASE                 WHEN EXISTS                      (                          SELECT *                          FROM tblFin_CheckRegister cr                          WHERE cr.TransactNum = jp.TransactNum                      ) THEN                     CheckRegisterTable.PayeeName                 ELSE                     CASE                         WHEN EXISTS                              (                                  SELECT *                                  FROM tblFin_RemitterJournal rj                                  WHERE rj.TransactNum = jp.TransactNum                              ) THEN                             ISNULL(RemitterJournalTable.RemitterName,'')                         ELSE                             ''                     END             END + ISNULL(' ' + j.Comments, '') AS [Comments],             CheckRegisterTable.CheckNum AS checkNum,             j.PostDate AS [PostDate],             j.VoidedBy,             j.VoiderFor,             CASE                 WHEN jp.InvoiceNum IS NULL THEN                     NULL                 ELSE                     tblFin_Invoices.OfficeInvoiceNum             END AS [InvoiceNumber],             CASE                 WHEN jp.Amount > 0 THEN                     jp.Amount                 ELSE                     0             END AS [Debit],             CASE                 WHEN jp.Amount < 0 THEN                     jp.Amount                 ELSE                     0             END AS [Credit],               --Balance money,             NULL,             NULL AS CompanyName,               --GLAccountNumber int,             jp.GLAcctID,               --GlAccountName VARCHAR(100),             CAST(jp.GLAcctID AS VARCHAR) + ' - ' + gl.FullName AS glaccountname,             ve.EntityName,             ProgramCodesTable.ProgCode AS [ProgramCode],               --DateBound varchar(11),             CONVERT(VARCHAR(11), QuotesTable.DateBound, 101),               --PolicyEffectiveDate varchar(11),             CONVERT(VARCHAR(11), QuotesTable.EffectiveDate, 101),               --TransactionEffectiveDate varchar(11)             CONVERT(VARCHAR(11), QuotesTable.TransactionEffectiveDate, 101),               --CreatedDate varchar(11),             CONVERT(VARCHAR(11), QuotesTable.DateCreated, 101),               --InvoiceDate varchar(11),             CONVERT(VARCHAR(11), tblFin_Invoices.InvoiceDate, 101),               --DueDate varchar(11),             CONVERT(VARCHAR(11), tblFin_Invoices.DueDate, 101),               --SunGLProductionAccountingDate varchar(11)             --this logic to match what the production sun gl report does with the ceded tria fix records             CASE                 WHEN j.TransDescID = 'J'                      AND jp.GLAcctID IN ( 283, 228, 387 )                      AND DATEDIFF(D, j.PostDate, QuotesTable.SunGLProductionAccountingDate) <> 0 THEN                     CONVERT(VARCHAR(11), j.PostDate, 101)                 ELSE                     CONVERT(VARCHAR(11), QuotesTable.SunGLProductionAccountingDate, 101)             END,               --IsBound varchar(10)             CASE                 WHEN QuotesTable.Bound = 1 THEN                     'Yes'                 WHEN QuotesTable.Bound = 0 THEN                     'No'                 ELSE                     NULL             END,               --ChargeType varchar(10)             tblFin_PolicyCharges.ChargeType,               --GLAccountType varchar(10)             tblFin_GlAccountTypes.AccountType,               --ChargeID varchar(100)             tblFin_PolicyCharges.ChargeID,               --ControlNo int             ISNULL(tblFin_Invoices.QuoteControlNum, tblClaims_Claim.ControlNo),               --ProducerLocation varchar(500),             QuotesTable.ProducerLocationName,               --Producer varchar(500)             QuotesTable.ProducerName,               --CurrencyCode varchar(100)             jp.CurrencyCode_Amount,               --PostingUser varchar(200)             tblUsers.FirstName + ' ' + tblUsers.LastName,               --ResPayID int,             jp.ResPayId,               --ClaimID int,             jp.ClaimId,               --AccidentYear int             NULL,               --ClaimantCoverageLineGuid uniqueidentifier             NULL,               --QuoteID int,             tblFin_Invoices.QuoteID,               --StateID varchar(10)             tblFin_PolicyCharges.StateID,               --ASLOB varchar(20)             NULL,               --ClaimReservePaymentDateCreated datetime             tblClaims_ReservePayments.DateCreated,               --ClaimNumber varchar(100)             tblClaims_Claim.ClaimNumber,               --ResPayIDExists bit             CASE                 WHEN EXISTS                      (                          SELECT *                          FROM tblClaims_ReservePayments                          WHERE tblClaims_ReservePayments.ResPayId = jp.ResPayId                      ) THEN                     1                 ELSE                     0             END,             jp.PONum,             NULL AS ClientOfficeName,             NULL AS InterCompany,             tblFin_Invoices.ExpirationDate,               --PolicyChildLine uniqueidentifier             tblCompanyLines.LineGUID,       ll.LineName        FROM tblFin_JournalPostings jp -- tblFin_journalPostings.GLAcctID = 280          LEFT JOIN tblCompanyLines              ON jp.CompanyLineGuid = tblCompanyLines.CompanyLineGUID          LEFT JOIN tblCompanyLocations cloc              ON tblCompanyLines.CompanyLocationGUID = cloc.CompanyLocationGUID          LEFT JOIN tblCompanies co              ON cloc.CompanyGUID = co.CompanyGUID          LEFT JOIN tblClaims_ReservePayments              ON jp.ResPayId = tblClaims_ReservePayments.ResPayId          LEFT JOIN tblClaims_Claim              ON jp.ClaimId = tblClaims_Claim.ClaimId          LEFT JOIN tblFin_PolicyCharges              ON jp.ChargeCode = tblFin_PolicyCharges.ChargeCode          INNER JOIN tblFin_Journal j              ON j.TransactNum = jp.TransactNum --and j.PostDate <= @asof_date          INNER JOIN tblUsers              ON j.UserGUID = tblUsers.UserGUID          INNER JOIN tblFin_GLAccounts gl              ON gl.GLAcctID = jp.GLAcctID          INNER JOIN tblFin_GlAccountTypes              ON gl.GLAcctID = tblFin_GlAccountTypes.GlAcctId          INNER JOIN tblClientOffices              ON gl.GlCompanyId = tblClientOffices.OfficeID          INNER JOIN tblFin_TransactionTypes tt              ON tt.TransDescID = j.TransDescID          LEFT JOIN viewEntityNames ve              ON jp.EntityGuid = ve.EntityGUID          LEFT JOIN tblFin_Invoices              ON jp.InvoiceNum = tblFin_Invoices.InvoiceNum    left join lstlines ll     on tblCompanyLines.LineGUID = ll.LineGUID          OUTER APPLY      (          SELECT tblQuotes.EffectiveDate,                 tblQuotes.PolicyNumber,                 tblQuotes.DateBound,                 tblQuoteInfoCache.TransactionEffectiveDate,                 tblQuotes.DateCreated,                 CASE                     WHEN tblQuotes.DateBound > tblQuoteInfoCache.TransactionEffectiveDate THEN                         tblQuotes.DateBound                     ELSE                         tblQuoteInfoCache.TransactionEffectiveDate                 END AS SunGLProductionAccountingDate,                 lstQuoteStatus.Bound,                 tblProducerLocations.[Name] AS ProducerLocationName,                 tblProducers.ProducerName,                 tblCompanies.CompanyName          FROM tblFin_Invoices SubI              INNER JOIN tblQuotes                  ON SubI.QuoteID = tblQuotes.QuoteID              INNER JOIN lstQuoteStatus                  ON tblQuotes.QuoteStatusID = lstQuoteStatus.QuoteStatusID              LEFT JOIN tblQuoteInfoCache                  ON tblQuotes.QuoteID = tblQuoteInfoCache.QuoteID              INNER JOIN tblSubmissionGroup                  ON tblQuotes.SubmissionGroupGuid = tblSubmissionGroup.SubmissionGroupGUID              INNER JOIN tblProducerLocations                  ON tblSubmissionGroup.ProducerLocationGuid = tblProducerLocations.ProducerLocationGUID              INNER JOIN tblProducers                  ON tblProducerLocations.ProducerGUID = tblProducers.ProducerGUID              INNER JOIN tblCompanyLocations                  ON tblQuotes.CompanyLocationGuid = tblCompanyLocations.CompanyLocationGUID              INNER JOIN tblCompanies                  ON tblCompanyLocations.CompanyGUID = tblCompanies.CompanyGUID          WHERE SubI.InvoiceNum = jp.InvoiceNum      ) AS QuotesTable          OUTER APPLY      (          SELECT TOP 1                 CPI.PolicyNumber          FROM tblClaims_PolicyInformation CPI          WHERE CPI.ClaimId = jp.ClaimId      ) AS ClaimPolicyNumberTable          OUTER APPLY      (          SELECT TOP 1                 eg.GroupName          FROM tblEntityGroups eg              INNER JOIN tblFin_CostCenterAllocation cca                  ON eg.GroupId = cca.CostCenterId          WHERE cca.PostingNum = jp.PostingNum      ) AS CostCenterTable          OUTER APPLY      (          SELECT 'Payee-' + CASE                                WHEN PayeeName IS NULL THEN                                    vn.EntityName                                ELSE                                    PayeeName                            END AS PayeeName,                 CASE                     WHEN cr.CheckNum IS NULL THEN                         'N/A'                     ELSE                         CONVERT(VARCHAR, cr.CheckNum)                 END AS CheckNum          FROM tblFin_CheckRegister cr              LEFT JOIN viewEntityNames vn                  ON cr.PayeeGUID = vn.EntityGUID          WHERE cr.TransactNum = jp.TransactNum      ) AS CheckRegisterTable          OUTER APPLY      (          SELECT 'Remitter- ' + vn.EntityName AS RemitterName          FROM tblFin_RemitterJournal rj              INNER JOIN viewEntityNames vn                  ON rj.RemitterGUID = vn.EntityGUID          WHERE rj.TransactNum = jp.TransactNum      ) AS RemitterJournalTable          OUTER APPLY      (          SELECT TOP 1                 CPC.ProgCode          FROM tblQuotes q              INNER JOIN tblQuoteDetails QD                  ON q.QuoteGUID = QD.QuoteGuid              INNER JOIN tblCompanyProgramCodes CPC                  ON QD.ProgramID = CPC.ProgramID          WHERE q.QuoteID = tblFin_Invoices.QuoteID                AND QD.CompanyLineGuid = jp.CompanyLineGuid                AND CPC.ProgCode IS NOT NULL          ORDER BY CPC.ProgCode DESC      ) AS ProgramCodesTable   WHERE      --used for testing captive workers comp policies     --exists (select CreatedQuoteID from ASCOT_AL3PolicyMasterTable_V2 where CreatedQuoteID = tblFin_Invoices.QuoteID)      --use this as a test case      --tblFin_Invoices.QuoteID = 502142 --499188 --in (502177, 499188) --499188 502177 workers comp input process; 499188 is a netrate policy      --502142 is a captive workers comp policy using the generic rater      --and--tblFin_Invoices.QuoteID = 501793 --502144 workers comp policy       --and --jp.GLAcctID = 280 --280 - GROSS WRITTEN PREMIUM      --and        DATEDIFF(DD, ISNULL(@DateRangeFrom, j.PostDate), j.PostDate) >= 0     AND DATEDIFF(DD, ISNULL(@DateRangeTo, j.PostDate), j.PostDate) <= 0            AND jp.Amount <> 0            AND            (                QuotesTable.PolicyNumber IN                (                    SELECT * FROM @PolicyNumbersTable                )                OR ClaimPolicyNumberTable.PolicyNumber IN                   (                       SELECT * FROM @PolicyNumbersTable                   )                OR @PolicyNumbers IS NULL            )            AND CASE                    WHEN @glaccountids IS NULL THEN                        1                    ELSE                        CASE                            WHEN jp.GLAcctID IN                                 (                                     SELECT * FROM @GlAccountsTable                                 )                                 OR @glaccountids IS NULL THEN                                1                            ELSE                                0                        END                END = 1            AND CASE                    WHEN @entityGuid IS NULL THEN                        1                    ELSE                        CASE                            WHEN EXISTS      (          SELECT *          FROM @entityTbl et          WHERE (                    (jp.EntityGuid = et.Guid)                    OR                    (                        jp.EntityGuid IS NULL                        AND jp.PayeeGUID = et.Guid                    )                )      )   THEN                                1                            ELSE                                0                        END                END = 1            AND            (                @glcompanyid = gl.GlCompanyId                OR @glcompanyid IS NULL            )      AND CASE                    WHEN @ExcludeVoidInvoices = 1 THEN                        CASE                            WHEN jp.InvoiceNum IN                                 (                                     SELECT * FROM #VoidedInvoiceNumsTable                                 )                                 AND j.TransDescID IN ( 'I', 'V' ) THEN                                0                            ELSE                                1                        END                    ELSE                        1                END = 1;        --AND CASE WHEN @ExcludeVoidInvoices = 1      --     THEN CASE WHEN j.VoiderFor IS NULL AND j.VoidedBy IS NULL      --             THEN 1      --             ELSE 0      --         END      --     ELSE 1      -- END = 1            --select '#pretbl' as tablename, * from #pretbl        IF OBJECT_ID('tempdb..#captiveData') IS NOT NULL      BEGIN            DROP TABLE #captiveData;        END;          CREATE TABLE #captiveData      (    Controlno int,    QuoteID INT,    ProgramId int,    LineGuid UNIQUEIDENTIFIER,    LineName varchar(500),    [Captive ID] int,    [Captive Name] VARCHAR(500),    [Captive Consultant Fee Percentage] MONEY,    [Program Admin] MONEY,    [Fronting Fee] MONEY,    [Spec 650 xs 350] MONEY,    [Agg Stop Loss] MONEY,    BBT MONEY,     [LP Safety] MONEY,    [Claims TPA] MONEY,    [Clash & ECO] MONEY,    [ADP CAT] MONEY,    [WC 22mxs 3m] MONEY,    Telmatics MONEY,    [Additional Captive Management Fee] MONEY,    [Excess Loss] MONEY,    [WC 25m xs 1m] MONEY,      unionnumber int      );     insert into #captiveData     select     --'#captiveData' as tablenamne,     NetRateCaptiveData.ControlNo,       NetRateCaptiveData.CreatedQuoteID as QuoteId,     NetRateCaptiveData.ProgramId,     NetRateCaptiveData.lineguid,     ll.LineName,     NetRateCaptiveData.[Captive ID],     NetRateCaptiveData.[Captive Name],     --NetRateCaptiveData.ProgramId     --Ascot_tblParentCaptive.ID as [Captive ID],     --Ascot_tblParentCaptive.ParentCaptive as [Captive Name],     CaptiveConsultantFee.FeePct as [Captive Consultant Fee Percentage],     ProgramAdminFee.FeePct as [Program Admin],     FrontingFee.FeePct as [Fronting Fee],     SpecFee.FeePct as [Spec 650 xs 350],     AggStopLossFee.FeePct as [Agg Stop Loss],     BBTFee.FeePct as BBT,      LPSafetyFee.FeePct as [LP Safety],     ClaimsTPAFee.FeePct as [Claims TPA],     ClashECOFee.FeePct as [Clash & ECO],     ADPCatFee.FeePct as [ADP CAT],     WC22mxs3mFee.FeePct as [WC 22mxs 3m],     TelmaticsFee.FeePct as [Telmatics],     AddlCaptMgmgFee.FeePct as [Additional Captive Management Fee],     ExcessLossFee.FeePct as [Excess Loss],     WC25mxs1mFee.FeePct as [WC 25m xs 1m]           , unionnumber     from    (      --union # 1 captive policies - non netrate rated policies       select            distinct        tblquotes.ControlNo,       --'get non netrate rated policies' as tablename,       --@importlogid,       --PolicyNumber,       dt.CreatedQuoteID,       Ascot_tblParentCaptive.ID as [Captive ID],       Ascot_tblParentCaptive.ParentCaptive as [Captive Name],       cpc.ProgramId,       lstlines.lineguid,         1 as unionnumber      from       (       --captive policies - non netrate rated       select          --ASCOT_AL3PolicyMasterTable_V2.PolicyNumber,          ASCOT_AL3PolicyMasterTable_V2.CreatedQuoteID,          --ll.LineName,          --ll.lineid,          ASCOT_AL3PolicyMasterTable_V2.ProgramID,           tblcompanylines.CompanyLineGUID        from ASCOT_AL3PolicyMasterTable_V2        join lstlines ll         on ASCOT_AL3PolicyMasterTable_V2.linecode = ll.lineid        join tblcompanylines         on ll.lineguid = tblcompanylines.LineGUID         and ASCOT_AL3PolicyMasterTable_V2.insuredState = tblcompanylines.StateId        --where           --ASCOT_AL3PolicyMasterTable_V2.ImportLogID = 36910 --@importlogid          --ASCOT_AL3PolicyMasterTable_V2.CreatedQuoteID = 502142          --ASCOT_AL3PolicyMasterTable_V2.CreatedQuoteID = 501793 --non netrate rated captive policies      ) as dt      join tblquotes       on dt.CreatedQuoteID = tblquotes.QuoteID      join tblcompanylines       on dt.CompanyLineGUID = tblcompanylines.ParentCompanyLineGUID       join lstlines        on tblcompanylines.LineGUID = lstlines.LineGUID        join Ascot_ParentCaptiveProgamsCodes cpc       on dt.ProgramID = cpc.ProgramID      join Ascot_tblParentCaptive       on Ascot_tblParentCaptive.ID = cpc.ParentID      join #pretbl OrigPolicyData       on dt.CreatedQuoteID = OrigPolicyData.QuoteID          union all --union # 2 captive policies - netrate rated policies - main line of business (from policies)       SELECT        DISTINCT               /*         dbo.tblQuotes.Controlno,         dbo.tblQuotes.QuoteID as CreatedQuoteID,         Ascot_ParentCaptiveProgamsCodes.ParentID as CaptiveId,           Ascot_tblParentCaptive.ParentCaptive as [Captive Name],           dbo.tblQuoteDetails.ProgramID,         --Ascot_ParentCaptiveProgamsCodes.ParentID,         --dbo.tblQuoteDetails.CompanyLineGuid,         dbo.tblCompanyLines.CompanyLineGUID,         dbo.tblCompanyLines.parentcompanylineguid,         lstLines.LineName,         lstLines.LineGUID,         2 as unionnumber        */           dbo.tblQuotes.Controlno,           dbo.tblQuotes.QuoteID as CreatedQuoteID,         Ascot_ParentCaptiveProgamsCodes.ParentID as CaptiveId,           Ascot_tblParentCaptive.ParentCaptive as [Captive Name],           dbo.tblQuoteDetails.ProgramID,            --Ascot_ParentCaptiveProgamsCodes.ParentID,         lstLines.LineGUID,           2 as unionnumber              FROM  dbo.tblQuotes       INNER JOIN dbo.tblQuoteDetails         ON dbo.tblQuotes.QuoteGUID = dbo.tblQuoteDetails.QuoteGuid        join lstRatingTypes rt        on tblQuoteDetails.raterid = rt.ratingtypeid      INNER JOIN dbo.Ascot_ParentCaptiveProgamsCodes         ON dbo.tblQuoteDetails.ProgramID = dbo.Ascot_ParentCaptiveProgamsCodes.ProgramID        join Ascot_tblParentCaptive        on Ascot_tblParentCaptive.ID = Ascot_ParentCaptiveProgamsCodes.ParentID      INNER JOIN dbo.Ascot_tblCaptivePremiumSplits         ON dbo.Ascot_ParentCaptiveProgamsCodes.ParentID = dbo.Ascot_tblCaptivePremiumSplits.ParentID       INNER JOIN dbo.tblCompanyLines         ON dbo.tblQuoteDetails.CompanyLineGuid = dbo.tblCompanyLines.CompanyLineGUID       INNER JOIN dbo.lstLines          ON dbo.tblCompanyLines.LineGUID = lstLines.LineGUID         AND dbo.Ascot_tblCaptivePremiumSplits.LineGUIDFrom = lstLines.LineGUID      --  and dbo.Ascot_tblCaptivePremiumSplits.ParentID = dbo.tblQuoteDetails.ProgramID      --INNER JOIN dbo.lstLines llTo      --  ON dbo.Ascot_tblCaptivePremiumSplits.LineGUIDTo = llTo.LineGUID      --WHERE       dbo.tblQuotes.QuoteId = 501392        join #pretbl OrigPolicyData         on tblQuotes.QuoteID = OrigPolicyData.QuoteID      WHERE                rt.RatingTypeid = 100 --NetRate      union all --union # 3 captive policies - netrate rated policies - sub line of business (from policies)         select       distinct         dt.Controlno,         dt.CreatedQuoteID,         dt.CaptiveId,         dt.[Captive Name],         dt.ProgramID,         lstlines.LineGUID,          3 as unionnumber         from       (        SELECT            DISTINCT              dbo.tblQuotes.Controlno,             dbo.tblQuotes.QuoteID as CreatedQuoteID,             Ascot_ParentCaptiveProgamsCodes.ParentID as CaptiveId,               Ascot_tblParentCaptive.ParentCaptive as [Captive Name],               dbo.tblQuoteDetails.ProgramID,             --Ascot_ParentCaptiveProgamsCodes.ParentID,             --dbo.tblQuoteDetails.CompanyLineGuid,             dbo.tblCompanyLines.CompanyLineGUID,             dbo.tblCompanyLines.parentcompanylineguid,             lstLines.LineName,             lstLines.LineGUID,             2 as unionnumber                    FROM  dbo.tblQuotes           INNER JOIN dbo.tblQuoteDetails             ON dbo.tblQuotes.QuoteGUID = dbo.tblQuoteDetails.QuoteGuid            join lstRatingTypes rt            on tblQuoteDetails.raterid = rt.ratingtypeid          INNER JOIN dbo.Ascot_ParentCaptiveProgamsCodes             ON dbo.tblQuoteDetails.ProgramID = dbo.Ascot_ParentCaptiveProgamsCodes.ProgramID            join Ascot_tblParentCaptive            on Ascot_tblParentCaptive.ID = Ascot_ParentCaptiveProgamsCodes.ParentID          INNER JOIN dbo.Ascot_tblCaptivePremiumSplits             ON dbo.Ascot_ParentCaptiveProgamsCodes.ParentID = dbo.Ascot_tblCaptivePremiumSplits.ParentID           INNER JOIN dbo.tblCompanyLines             ON dbo.tblQuoteDetails.CompanyLineGuid = dbo.tblCompanyLines.CompanyLineGUID           INNER JOIN dbo.lstLines              ON dbo.tblCompanyLines.LineGUID = lstLines.LineGUID             AND dbo.Ascot_tblCaptivePremiumSplits.LineGUIDFrom = lstLines.LineGUID          --  and dbo.Ascot_tblCaptivePremiumSplits.ParentID = dbo.tblQuoteDetails.ProgramID          --INNER JOIN dbo.lstLines llTo          --  ON dbo.Ascot_tblCaptivePremiumSplits.LineGUIDTo = llTo.LineGUID           join #pretbl OrigPolicyData            on tblQuotes.QuoteID = OrigPolicyData.QuoteID          WHERE                    rt.RatingTypeid = 100 --NetRate            --and dbo.tblQuotes.QuoteId = 501392       ) as dt       join Ascot_tblCaptivePremiumSplits         on dt.CaptiveId = Ascot_tblCaptivePremiumSplits.ParentID        and dt.LineGUID = Ascot_tblCaptivePremiumSplits.LineGUIDFrom       join dbo.lstLines         on Ascot_tblCaptivePremiumSplits.LineGUIDTo = lstlines.LineGUID     ) as NetRateCaptiveData     left join Ascot_ParentCaptiveProgamsCodes    on  NetRateCaptiveData.ProgramID = Ascot_ParentCaptiveProgamsCodes.ProgramID   left join Ascot_tblParentCaptive    on  Ascot_tblParentCaptive.ID = Ascot_ParentCaptiveProgamsCodes.ParentID   left join Ascot_tblCaptiveFees CaptiveConsultantFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = CaptiveConsultantFee.parentid    and  NetRateCaptiveData.LineGUID = CaptiveConsultantFee.LineGUID    and  CaptiveConsultantFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'Captive Consultant')   left join Ascot_tblCaptiveFees ProgramAdminFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = ProgramAdminFee.parentid    and  NetRateCaptiveData.LineGUID = ProgramAdminFee.LineGUID    and  ProgramAdminFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'Program Admin')   left join Ascot_tblCaptiveFees FrontingFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = FrontingFee.parentid    and  NetRateCaptiveData.LineGUID = FrontingFee.LineGUID    and  FrontingFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'Fronting')   left join Ascot_tblCaptiveFees SpecFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = SpecFee.parentid    and  NetRateCaptiveData.LineGUID = SpecFee.LineGUID    and  SpecFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'Spec 650 xs 350')   left join Ascot_tblCaptiveFees AggStopLossFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = AggStopLossFee.parentid    and  NetRateCaptiveData.LineGUID = AggStopLossFee.LineGUID    and  AggStopLossFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'Agg Stop Loss')   left join Ascot_tblCaptiveFees BBTFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = BBTFee.parentid    and  NetRateCaptiveData.LineGUID = BBTFee.LineGUID    and  BBTFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'BBT')   left join Ascot_tblCaptiveFees LPSafetyFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = LPSafetyFee.parentid    and  NetRateCaptiveData.LineGUID = LPSafetyFee.LineGUID    and  LPSafetyFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'LP/Safety')   left join Ascot_tblCaptiveFees ClaimsTPAFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = ClaimsTPAFee.parentid    and  NetRateCaptiveData.LineGUID = ClaimsTPAFee.LineGUID    and  ClaimsTPAFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'Claims TPA')   left join Ascot_tblCaptiveFees ClashECOFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = ClashECOFee.parentid    and  NetRateCaptiveData.LineGUID = ClashECOFee.LineGUID    and  ClashECOFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'Clash & ECO')   left join Ascot_tblCaptiveFees ADPCatFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = ADPCatFee.parentid    and  NetRateCaptiveData.LineGUID = ADPCatFee.LineGUID    and  ADPCatFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'ADP Cat')   left join Ascot_tblCaptiveFees WC22mxs3mFee    on  Ascot_ParentCaptiveProgamsCodes.ParentID = WC22mxs3mFee.parentid    and  NetRateCaptiveData.LineGUID = WC22mxs3mFee.LineGUID    and  WC22mxs3mFee.FeeID = (select feeid from Ascot_lstCaptiveFees where Ascot_lstCaptiveFees.CaptiveFee = 'WC 22m xs 3m')   left join lstlines ll    on  NetRateCaptiveData.lineguid = ll.LineGUID   LEFT JOIN dbo.Ascot_tblCaptiveFees TelmaticsFee ON dbo.Ascot_ParentCaptiveProgamsCodes.ParentID = TelmaticsFee.parentid      AND NetRateCaptiveData.LineGUID = TelmaticsFee.LineGUID      AND TelmaticsFee.FeeID = (SELECT feeid FROM Ascot_lstCaptiveFees WHERE dbo.Ascot_lstCaptiveFees.CaptiveFee = 'Telmatics')   LEFT JOIN dbo.Ascot_tblCaptiveFees WC25mxs1mFee ON dbo.Ascot_ParentCaptiveProgamsCodes.ParentID = WC25mxs1mFee.parentid      AND NetRateCaptiveData.LineGUID = WC25mxs1mFee.LineGUID      AND WC25mxs1mFee.FeeID = (SELECT feeid FROM Ascot_lstCaptiveFees WHERE dbo.Ascot_lstCaptiveFees.CaptiveFee = 'WC 25m xs 1m')   LEFT JOIN dbo.Ascot_tblCaptiveFees AddlCaptMgmgFee ON dbo.Ascot_ParentCaptiveProgamsCodes.ParentID = AddlCaptMgmgFee.parentid      AND NetRateCaptiveData.LineGUID = AddlCaptMgmgFee.LineGUID      AND AddlCaptMgmgFee.FeeID = (SELECT feeid FROM Ascot_lstCaptiveFees WHERE dbo.Ascot_lstCaptiveFees.CaptiveFee = 'Addl Capative Management')   LEFT JOIN dbo.Ascot_tblCaptiveFees ExcessLossFee ON dbo.Ascot_ParentCaptiveProgamsCodes.ParentID = ExcessLossFee.parentid      AND NetRateCaptiveData.LineGUID = ExcessLossFee.LineGUID      AND ExcessLossFee.FeeID = (SELECT feeid FROM Ascot_lstCaptiveFees WHERE dbo.Ascot_lstCaptiveFees.CaptiveFee = 'Excess Loss')       --select '#captiveData' as tablename, * From #captiveData       IF OBJECT_ID('tempdb..#tbl') IS NOT NULL      BEGIN            DROP TABLE #tbl;        END;          CREATE TABLE #tbl      (          fullname VARCHAR(100),          TransDescription VARCHAR(100),          TransactNum INT,          PostingNum INT,          PolicyNum VARCHAR(100),          CostCenterName VARCHAR(100),          SystemInvoiceNum INT,          BillingType VARCHAR(100),          Comments VARCHAR(2000),          checkNum VARCHAR(50),          PostDate DATE,          VoidedBy INT,          VoiderFor INT,          InvoiceNumber INT,          Debit MONEY,          Credit MONEY,          Balance MONEY,          Company VARCHAR(1000),          GLAccountNumber INT,          GlAccountName VARCHAR(100),          EntityName VARCHAR(2000),          ProgramCode VARCHAR(500),          DateBound VARCHAR(11),          PolicyEffectiveDate VARCHAR(11),          TransactionEffectiveDate VARCHAR(11),          CreatedDate VARCHAR(11),          InvoiceDate VARCHAR(11),          DueDate VARCHAR(11),          SunGLProductionAccountingDate VARCHAR(11),          IsBound VARCHAR(10),          ChargeType VARCHAR(10),          GLAccountType VARCHAR(10),          ChargeID VARCHAR(100),          ControlNo INT,          ProducerLocation VARCHAR(500),          Producer VARCHAR(500),          CurrencyCode VARCHAR(100),          PostingUser VARCHAR(200),          ResPayID INT,          ClaimID INT,          AccidentYear INT,          ClaimantCoverageLineGuid UNIQUEIDENTIFIER,          QuoteID INT,          StateID VARCHAR(10),          ASLOB VARCHAR(100),          ClaimReservePaymentDateCreated DATETIME,          ClaimNumber VARCHAR(100),          ResPayIDExists BIT,          PoNum INT,          ClientOfficeName VARCHAR(1000),          InterCompany VARCHAR(1000),          Expirationdate DATETIME,          PolicyChildLine UNIQUEIDENTIFIER,    [Child Line Name] VARCHAR(500),    [Captive ID] int,    [Captive Name] VARCHAR(500),    [Captive Consultant Fee Percentage] MONEY,    [Program Admin] MONEY,    [Fronting Fee] MONEY,    [Spec 650 xs 350] MONEY,    [Agg Stop Loss] MONEY,    BBT MONEY,     [LP Safety] MONEY,    [Claims TPA] MONEY,    [Clash & ECO] MONEY,    [ADP CAT] MONEY,    [WC 22mxs 3m] MONEY,    [Telmatics] MONEY,    [Additional Captive Management Fee] MONEY,    [Excess Loss] MONEY,    [WC 25m xs 1m] MONEY         );        INSERT INTO #tbl      SELECT       --'#tbl' as tablename,      --jp.GLAcctID,           prePolicyData.FullName,      prePolicyData.[TransDescription],      prePolicyData.TransactNum,      prePolicyData.PostingNum,      prePolicyData.[PolicyNum],      prePolicyData.[CostCenterName],      prePolicyData.SystemInvoiceNum,      prePolicyData.[BillingType],      prePolicyData.[Comments],      prePolicyData.checkNum,      prePolicyData.[PostDate],      prePolicyData.VoidedBy,      prePolicyData.VoiderFor,      prePolicyData.[InvoiceNumber],      prePolicyData.[Debit],      prePolicyData.[Credit],      prePolicyData.Balance,      prePolicyData.Company,      prePolicyData.GLAccountNumber,      prePolicyData.glaccountname,      prePolicyData.EntityName,      prePolicyData.[ProgramCode],      prePolicyData.DateBound,      prePolicyData.PolicyEffectiveDate,      prePolicyData.TransactionEffectiveDate,      prePolicyData.CreatedDate,      prePolicyData.InvoiceDate,      prePolicyData.DueDate,      prePolicyData.SunGLProductionAccountingDate,      prePolicyData.IsBound,      prePolicyData.ChargeType,      prePolicyData.GLAccountType,      prePolicyData.ChargeID,      prePolicyData.ControlNo,      prePolicyData.ProducerLocation,      prePolicyData.Producer,      prePolicyData.CurrencyCode,      prePolicyData.PostingUser,      prePolicyData.ResPayId,      prePolicyData.ClaimId,      prePolicyData.AccidentYear,      prePolicyData.ClaimantCoverageLineGuid,      prePolicyData.QuoteID,      prePolicyData.StateID,      prePolicyData.ASLOB,      prePolicyData.ClaimReservePaymentDateCreated,      prePolicyData.ClaimNumber,      prePolicyData.ResPayIDExists,      prePolicyData.PONum,      prePolicyData.ClientOfficeName,      prePolicyData.InterCompany,      prePolicyData.ExpirationDate,      prePolicyData.PolicyChildLine,     --(5/29/24) added for captive policies      prePolicyData.[Child Line Name] as [Child Line Name],      cd.[Captive ID],      cd.[Captive Name],      --NetRateCaptiveData.ProgramId      --Ascot_tblParentCaptive.ID as [Captive ID],      --Ascot_tblParentCaptive.ParentCaptive as [Captive Name],      cd.[Captive Consultant Fee Percentage],      cd.[Program Admin],      cd.[Fronting Fee],      cd.[Spec 650 xs 350],      cd.[Agg Stop Loss],      cd.BBT,       cd.[LP Safety],      cd.[Claims TPA],      cd.[Clash & ECO],      cd.[ADP CAT],      cd.[WC 22mxs 3m],      cd.[Telmatics],      cd.[Additional Captive Management Fee],      cd.[Excess Loss],      cd.[WC 25m xs 1m]         --for debugging     /*      , cd.Controlno      , prePolicyData.QuoteID      , lstlines.LineName      , prePolicyData.PolicyChildLine       , cd.LineGuid      , cd.unionnumber     */   from          #pretbl prePolicyData   left join #captiveData cd     on prePolicyData.QuoteID = cd.QuoteID     and prePolicyData.PolicyChildLine = cd.LineGuid   left join lstlines     on prePolicyData.PolicyChildLine = lstlines.LineGUID    --where   --   prePolicyData.QuoteID  in (501392, 501793) --, 501793) --501713)   order by      prePolicyData.QuoteID,      cd.unionnumber                         UPDATE T      SET Balance = Credit + Debit      FROM #tbl T;        UPDATE T      SET Company = COALESCE(JOffTable.OfficeName, POffTable.OfficeName, OffsetOTable.OfficeName, QuotesTable.CompanyName, BankoffTable.OfficeName, GlOffTable.[Location]),          ClientOfficeName = COALESCE(JOffTable.OfficeName, POffTable.OfficeName, OffsetOTable.OfficeName, GlOffTable.[Location]),          InterCompany = COALESCE(ManualJournalInterCompanyTable.OfficeName, PurchaseOrdersInterCompanyTable.OfficeName, OffsetInterCompanyTable.OfficeName, '')                FROM #tbl T      OUTER APPLY      (          SELECT TOP 1 GOFF.OfficeName FROM Ascot_ManualJournalEntryPostings AMJEP          INNER JOIN Greyhawk_Offices GOFF ON AMJEP.OfficeCode = GOFF.OfficeCode          WHERE AMJEP.TransactNum = T.TransactNum      ) AS JOffTable          OUTER APPLY      (          SELECT TOP 1 GOFF.OfficeName FROM Greyhawk_tblPurchaseOrders GPO          INNER JOIN Greyhawk_Offices GOFF ON GPO.OfficeCode = GOFF.OfficeCode          WHERE GPO.PONum = T.PoNum      ) AS POffTable          OUTER APPLY      (          SELECT TOP(1) clo.LocationName [OfficeName] FROM dbo.Greyhawk_BankLegalEntity ble                      INNER JOIN dbo.tblFin_JournalPostings jp ON jp.TransactNum = T.TransactNum AND ble.GlAcctId = jp.GLAcctID          INNER JOIN dbo.tblFin_GlAccountTypes glt ON glt.GlAcctId = jp.GLAcctID AND glt.AccountType = 'C'          INNER JOIN dbo.tblCompanyLocations clo ON clo.CompanyLocationGUID = ble.CompanyLocationGuid          ORDER BY jp.PostingNum ASC      ) AS BankOffTable          OUTER APPLY      (          SELECT TOP 1                 GOFF.OfficeName          FROM GreyHawk_tblJournalPostingOffsetOffice GJPOO              INNER JOIN Greyhawk_Offices GOFF                  ON GJPOO.OfficeCode = GOFF.OfficeCode          WHERE GJPOO.PostingNum IN                (                    SELECT JP.PostingNum                    FROM tblFin_JournalPostings JP                    WHERE JP.TransactNum = T.TransactNum                          AND JP.GLAcctID = T.GLAccountNumber                )      ) AS OffsetOTable          OUTER APPLY      (          SELECT TOP 1                 CO2.Location          FROM tblFin_Journal J2              INNER JOIN tblClientOffices CO2                  ON J2.GlCompanyId = CO2.OfficeID          WHERE J2.TransactNum = T.TransactNum      ) AS GlOffTable          OUTER APPLY      (          SELECT TOP 1                 GOFF.OfficeName          FROM Ascot_ManualJournalEntryPostings AMJEP              INNER JOIN Greyhawk_Offices GOFF                  ON AMJEP.IntercompanyCode = GOFF.OfficeCode          WHERE AMJEP.TransactNum = T.TransactNum      ) AS ManualJournalInterCompanyTable          OUTER APPLY      (          SELECT TOP 1                 GOFF.OfficeName          FROM Greyhawk_tblPurchaseOrders GPO              INNER JOIN Greyhawk_Offices GOFF                  ON GPO.IntercompanyCode = GOFF.OfficeCode          WHERE GPO.PONum = T.PoNum      ) AS PurchaseOrdersInterCompanyTable          OUTER APPLY      (          SELECT TOP 1                 GOFF.OfficeName          FROM GreyHawk_tblJournalPostingOffsetOffice GJPOO              INNER JOIN Greyhawk_Offices GOFF                  ON GJPOO.IntercompanyCode = GOFF.OfficeCode          WHERE GJPOO.PostingNum = T.PostingNum      ) AS OffsetInterCompanyTable          OUTER APPLY      (          SELECT TOP 1                 tblCompanies.CompanyName          FROM tblFin_JournalPostings              INNER JOIN tblCompanyLines                  ON tblFin_JournalPostings.CompanyLineGuid = tblCompanyLines.CompanyLineGUID              INNER JOIN tblCompanyLocations                  ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID              INNER JOIN tblCompanies                  ON tblCompanyLocations.CompanyGUID = tblCompanies.CompanyGUID          WHERE tblFin_JournalPostings.TransactNum = T.TransactNum      ) AS QuotesTable;        UPDATE T      SET Company = ClaimsTable.CompanyName,          AccidentYear = YEAR(ClaimsTable.LossDate)      FROM #tbl T          CROSS APPLY      (          SELECT TOP 1                 tblCompanies.CompanyName,                 tblClaims_Claim.LossDate          FROM tblClaims_ReservePayments         
UpdateCommission_AscotCaptives	CREATE PROCEDURE [dbo].[UpdateCommission_AscotCaptives]      @QuoteGUID UNIQUEIDENTIFIER  AS  BEGIN      SET NOCOUNT ON;      DECLARE @PolicyNumber VARCHAR(100)      DECLARE @ControlNo INT      DECLARE @QuoteID INT      DECLARE @RowsUpdated INT            -- Get quote information from tblQuotes first      SELECT @PolicyNumber = tq.PolicyNumber,             @ControlNo = tq.ControlNo,             @QuoteID = tq.QuoteID      FROM tblQuotes tq      WHERE tq.QuoteGUID = @QuoteGUID            -- Check if quote exists by checking if we got a QuoteID      IF @QuoteID IS NULL      BEGIN          RAISERROR('Quote not found for the provided QuoteGUID', 16, 1)          RETURN      END            -- Update quote details where LineName contains 'XOL' to have 0% commission      UPDATE qd      SET ProducerCommission = 0      FROM tblQuoteDetails qd      INNER JOIN tblCompanyLines cl ON qd.CompanyLineGUID = cl.CompanyLineGUID      INNER JOIN lstLines ll ON cl.LineGUID = ll.LineGUID      WHERE qd.QuoteGUID = @QuoteGUID        AND ll.LineName LIKE '%XOL%'        AND (qd.ProducerCommission != 0 OR qd.ProducerCommission IS NULL)            SET @RowsUpdated = @@ROWCOUNT            -- Print the result      IF @RowsUpdated > 0      BEGIN          PRINT 'Updated ' + CAST(@RowsUpdated AS VARCHAR) + ' XOL line(s) for Quote ' + ISNULL(@PolicyNumber, 'QuoteID: ' + CAST(@QuoteID AS VARCHAR)) +                 ' (Control: ' + ISNULL(CAST(@ControlNo AS VARCHAR), 'NULL') + ')' +                ' to 0% commission'      END      ELSE      BEGIN          PRINT 'No XOL lines found or all XOL lines already set to 0% commission for Quote ' + ISNULL(@PolicyNumber, 'QuoteID: ' + CAST(@QuoteID AS VARCHAR)) +                 ' (Control: ' + ISNULL(CAST(@ControlNo AS VARCHAR), 'NULL') + ')'      END  END
Ascot_rptAccountTransactionLedger_CaptiveData	Create PROC [dbo].[Ascot_rptAccountTransactionLedger_CaptiveData]      @glaccountids VARCHAR(8000) = NULL,      @DateRangeFrom DATETIME = NULL,      @DateRangeTo DATETIME = NULL,      @glcompanyid INT = NULL,      @costcenterid INT = NULL,      @entityGuid UNIQUEIDENTIFIER = NULL,      @PolicyNumbers VARCHAR(MAX) = NULL,      @ProgramCodes VARCHAR(MAX) = NULL,      @CostCenters VARCHAR(MAX) = NULL,      @InvoiceNumbers VARCHAR(8000) = NULL,      @FlagIncludeASLOB BIT = NULL,      @ExcludeVoidInvoices BIT = 1,      @DateFrom DATE = NULL,      @DateTo DATE = NULL  AS  BEGIN            SET NOCOUNT ON;      SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;        DECLARE @GlAccountsTable TABLE      (          GlAcctId INT      );      IF @glaccountids IS NOT NULL      BEGIN          INSERT INTO @GlAccountsTable          SELECT *          FROM dbo.StringOfIntsToTable(@glaccountids, ',');      END;        DECLARE @PolicyNumbersTable TABLE      (          PolicyNumber VARCHAR(MAX)      );      IF @PolicyNumbers IS NOT NULL      BEGIN          INSERT INTO @PolicyNumbersTable          SELECT *          FROM dbo.StringOfStringsToTable(@PolicyNumbers, ',');      END;          DECLARE @InvoiceNumbersParseTable TABLE      (          InvoiceNumberString VARCHAR(MAX)      );      IF @InvoiceNumbers IS NOT NULL      BEGIN          INSERT INTO @InvoiceNumbersParseTable          SELECT *          FROM dbo.StringOfStringsToTable(@InvoiceNumbers, ',');      END;        DECLARE @InvoiceNumbersTable TABLE      (          InvoiceNumber INT      );      IF @InvoiceNumbers IS NOT NULL      BEGIN          INSERT INTO @InvoiceNumbersTable          SELECT CONVERT(INT, InvoiceNumberString)          FROM @InvoiceNumbersParseTable          WHERE ISNUMERIC(InvoiceNumberString) = 1;      END;        DECLARE @ProgramCodesTable TABLE      (          ProgramCode VARCHAR(500)      );      IF @ProgramCodes IS NOT NULL      BEGIN          INSERT INTO @ProgramCodesTable          SELECT *          FROM dbo.StringOfStringsToTable(@ProgramCodes, ',');      END;        DECLARE @CostCentersTable TABLE      (          CostCenter VARCHAR(MAX)      );      IF @CostCenters IS NOT NULL      BEGIN          INSERT INTO @CostCentersTable          SELECT *          FROM dbo.StringOfStringsToTable(@CostCenters, ',');      END;        DECLARE @entityTbl TABLE      (          Guid UNIQUEIDENTIFIER      );          IF (@entityGuid IS NOT NULL)      BEGIN          INSERT INTO @entityTbl          SELECT Guid          FROM dbo.GetLinkedEntities(@entityGuid);      END;        IF OBJECT_ID('tempdb..#VoidedInvoiceNumsTable') IS NOT NULL          DROP TABLE #VoidedInvoiceNumsTable;        CREATE TABLE #VoidedInvoiceNumsTable      (          InvoiceNum INT PRIMARY KEY      );        INSERT INTO #VoidedInvoiceNumsTable      SELECT DISTINCT             tblFin_Invoices.InvoiceNum      FROM tblFin_Invoices      WHERE Failed = 1;        IF OBJECT_ID('tempdb..#tbl') IS NOT NULL      BEGIN            DROP TABLE #tbl;        END;          CREATE TABLE #tbl      (          fullname VARCHAR(100),          TransDescription VARCHAR(100),          TransactNum INT,          PostingNum INT,          PolicyNum VARCHAR(100),          CostCenterName VARCHAR(100),          SystemInvoiceNum INT,          BillingType VARCHAR(100),          Comments VARCHAR(2000),          checkNum VARCHAR(50),          PostDate DATE,          VoidedBy INT,          VoiderFor INT,          InvoiceNumber INT,          Debit MONEY,          Credit MONEY,          Balance MONEY,          Company VARCHAR(1000),          GLAccountNumber INT,          GlAccountName VARCHAR(100),          EntityName VARCHAR(2000),          ProgramCode VARCHAR(500),          DateBound VARCHAR(11),          PolicyEffectiveDate VARCHAR(11),          TransactionEffectiveDate VARCHAR(11),          CreatedDate VARCHAR(11),          InvoiceDate VARCHAR(11),          DueDate VARCHAR(11),          SunGLProductionAccountingDate VARCHAR(11),          IsBound VARCHAR(10),          ChargeType VARCHAR(10),          GLAccountType VARCHAR(10),          ChargeID VARCHAR(100),          ControlNo INT,          ProducerLocation VARCHAR(500),          Producer VARCHAR(500),          CurrencyCode VARCHAR(100),          PostingUser VARCHAR(200),          ResPayID INT,          ClaimID INT,          AccidentYear INT,          ClaimantCoverageLineGuid UNIQUEIDENTIFIER,          QuoteID INT,          StateID VARCHAR(10),          ASLOB VARCHAR(100),          ClaimReservePaymentDateCreated DATETIME,          ClaimNumber VARCHAR(100),          ResPayIDExists BIT,          PoNum INT,          ClientOfficeName VARCHAR(1000),          InterCompany VARCHAR(1000),          Expirationdate DATETIME,          PolicyChildLine UNIQUEIDENTIFIER      );        INSERT INTO #tbl      SELECT gl.FullName,             tt.[TransDescription],             jp.TransactNum,             jp.PostingNum,             CASE                 WHEN jp.InvoiceNum IS NULL THEN                     ClaimPolicyNumberTable.PolicyNumber                 ELSE                     QuotesTable.PolicyNumber             END AS [PolicyNum],             CostCenterTable.GroupName AS [CostCenterName],             jp.InvoiceNum AS SystemInvoiceNum,             CASE tblFin_Invoices.Remitter                 WHEN 'I' THEN                     'Direct Bill (MGA)'                 WHEN 'C' THEN                     'Direct Bill (Company)'                 WHEN 'B' THEN                     'Agency Bill'                 ELSE                     NULL             END AS [BillingType],             CASE                 WHEN EXISTS                      (                          SELECT *                          FROM tblFin_CheckRegister cr                          WHERE cr.TransactNum = jp.TransactNum                      ) THEN                     CheckRegisterTable.PayeeName                 ELSE                     CASE                         WHEN EXISTS                              (                                  SELECT *                                  FROM tblFin_RemitterJournal rj                                  WHERE rj.TransactNum = jp.TransactNum                              ) THEN                             ISNULL(RemitterJournalTable.RemitterName,'')                         ELSE                             ''                     END             END + ISNULL(' ' + j.Comments, '') AS [Comments],             CheckRegisterTable.CheckNum AS checkNum,             j.PostDate AS [PostDate],             j.VoidedBy,             j.VoiderFor,             CASE                 WHEN jp.InvoiceNum IS NULL THEN                     NULL                 ELSE                     tblFin_Invoices.OfficeInvoiceNum             END AS [InvoiceNumber],             CASE                 WHEN jp.Amount > 0 THEN                     jp.Amount                 ELSE                     0             END AS [Debit],             CASE                 WHEN jp.Amount < 0 THEN                     jp.Amount                 ELSE                     0             END AS [Credit],               --Balance money,             NULL,             NULL AS CompanyName,               --GLAccountNumber int,             jp.GLAcctID,               --GlAccountName VARCHAR(100),             CAST(jp.GLAcctID AS VARCHAR) + ' - ' + gl.FullName AS glaccountname,             ve.EntityName,             ProgramCodesTable.ProgCode AS [ProgramCode],               --DateBound varchar(11),             CONVERT(VARCHAR(11), QuotesTable.DateBound, 101),               --PolicyEffectiveDate varchar(11),             CONVERT(VARCHAR(11), QuotesTable.EffectiveDate, 101),               --TransactionEffectiveDate varchar(11)             CONVERT(VARCHAR(11), QuotesTable.TransactionEffectiveDate, 101),               --CreatedDate varchar(11),             CONVERT(VARCHAR(11), QuotesTable.DateCreated, 101),               --InvoiceDate varchar(11),             CONVERT(VARCHAR(11), tblFin_Invoices.InvoiceDate, 101),               --DueDate varchar(11),             CONVERT(VARCHAR(11), tblFin_Invoices.DueDate, 101),               --SunGLProductionAccountingDate varchar(11)             --this logic to match what the production sun gl report does with the ceded tria fix records             CASE                 WHEN j.TransDescID = 'J'                      AND jp.GLAcctID IN ( 283, 228, 387 )                      AND DATEDIFF(D, j.PostDate, QuotesTable.SunGLProductionAccountingDate) <> 0 THEN                     CONVERT(VARCHAR(11), j.PostDate, 101)                 ELSE                     CONVERT(VARCHAR(11), QuotesTable.SunGLProductionAccountingDate, 101)             END,               --IsBound varchar(10)             CASE                 WHEN QuotesTable.Bound = 1 THEN                     'Yes'                 WHEN QuotesTable.Bound = 0 THEN                     'No'                 ELSE                     NULL             END,               --ChargeType varchar(10)             tblFin_PolicyCharges.ChargeType,               --GLAccountType varchar(10)             tblFin_GlAccountTypes.AccountType,               --ChargeID varchar(100)             tblFin_PolicyCharges.ChargeID,               --ControlNo int             ISNULL(tblFin_Invoices.QuoteControlNum, tblClaims_Claim.ControlNo),               --ProducerLocation varchar(500),             QuotesTable.ProducerLocationName,               --Producer varchar(500)             QuotesTable.ProducerName,               --CurrencyCode varchar(100)             jp.CurrencyCode_Amount,               --PostingUser varchar(200)             tblUsers.FirstName + ' ' + tblUsers.LastName,               --ResPayID int,             jp.ResPayId,               --ClaimID int,             jp.ClaimId,               --AccidentYear int             NULL,               --ClaimantCoverageLineGuid uniqueidentifier             NULL,               --QuoteID int,             tblFin_Invoices.QuoteID,               --StateID varchar(10)             tblFin_PolicyCharges.StateID,               --ASLOB varchar(20)             NULL,               --ClaimReservePaymentDateCreated datetime             tblClaims_ReservePayments.DateCreated,               --ClaimNumber varchar(100)             tblClaims_Claim.ClaimNumber,               --ResPayIDExists bit             CASE                 WHEN EXISTS                      (                          SELECT *                          FROM tblClaims_ReservePayments                          WHERE tblClaims_ReservePayments.ResPayId = jp.ResPayId                      ) THEN                     1                 ELSE                     0             END,             jp.PONum,             NULL AS ClientOfficeName,             NULL AS InterCompany,             tblFin_Invoices.ExpirationDate,               --PolicyChildLine uniqueidentifier             tblCompanyLines.LineGUID      FROM tblFin_JournalPostings jp          LEFT JOIN tblCompanyLines              ON jp.CompanyLineGuid = tblCompanyLines.CompanyLineGUID          LEFT JOIN tblCompanyLocations cloc              ON tblCompanyLines.CompanyLocationGUID = cloc.CompanyLocationGUID          LEFT JOIN tblCompanies co              ON cloc.CompanyGUID = co.CompanyGUID          LEFT JOIN tblClaims_ReservePayments              ON jp.ResPayId = tblClaims_ReservePayments.ResPayId          LEFT JOIN tblClaims_Claim              ON jp.ClaimId = tblClaims_Claim.ClaimId          LEFT JOIN tblFin_PolicyCharges              ON jp.ChargeCode = tblFin_PolicyCharges.ChargeCode          INNER JOIN tblFin_Journal j              ON j.TransactNum = jp.TransactNum --and j.PostDate <= @asof_date          INNER JOIN tblUsers              ON j.UserGUID = tblUsers.UserGUID          INNER JOIN tblFin_GLAccounts gl              ON gl.GLAcctID = jp.GLAcctID          INNER JOIN tblFin_GlAccountTypes              ON gl.GLAcctID = tblFin_GlAccountTypes.GlAcctId          INNER JOIN tblClientOffices              ON gl.GlCompanyId = tblClientOffices.OfficeID          INNER JOIN tblFin_TransactionTypes tt              ON tt.TransDescID = j.TransDescID          LEFT JOIN viewEntityNames ve              ON jp.EntityGuid = ve.EntityGUID          LEFT JOIN tblFin_Invoices              ON jp.InvoiceNum = tblFin_Invoices.InvoiceNum          OUTER APPLY      (          SELECT tblQuotes.EffectiveDate,                 tblQuotes.PolicyNumber,                 tblQuotes.DateBound,                 tblQuoteInfoCache.TransactionEffectiveDate,                 tblQuotes.DateCreated,                 CASE                     WHEN tblQuotes.DateBound > tblQuoteInfoCache.TransactionEffectiveDate THEN                         tblQuotes.DateBound                     ELSE                         tblQuoteInfoCache.TransactionEffectiveDate                 END AS SunGLProductionAccountingDate,                 lstQuoteStatus.Bound,                 tblProducerLocations.[Name] AS ProducerLocationName,                 tblProducers.ProducerName,                 tblCompanies.CompanyName          FROM tblFin_Invoices SubI              INNER JOIN tblQuotes                  ON SubI.QuoteID = tblQuotes.QuoteID              INNER JOIN lstQuoteStatus                  ON tblQuotes.QuoteStatusID = lstQuoteStatus.QuoteStatusID              LEFT JOIN tblQuoteInfoCache                  ON tblQuotes.QuoteID = tblQuoteInfoCache.QuoteID              INNER JOIN tblSubmissionGroup                  ON tblQuotes.SubmissionGroupGuid = tblSubmissionGroup.SubmissionGroupGUID              INNER JOIN tblProducerLocations                  ON tblSubmissionGroup.ProducerLocationGuid = tblProducerLocations.ProducerLocationGUID              INNER JOIN tblProducers                  ON tblProducerLocations.ProducerGUID = tblProducers.ProducerGUID              INNER JOIN tblCompanyLocations                  ON tblQuotes.CompanyLocationGuid = tblCompanyLocations.CompanyLocationGUID              INNER JOIN tblCompanies                  ON tblCompanyLocations.CompanyGUID = tblCompanies.CompanyGUID          WHERE SubI.InvoiceNum = jp.InvoiceNum      ) AS QuotesTable          OUTER APPLY      (          SELECT TOP 1                 CPI.PolicyNumber          FROM tblClaims_PolicyInformation CPI          WHERE CPI.ClaimId = jp.ClaimId      ) AS ClaimPolicyNumberTable          OUTER APPLY      (          SELECT TOP 1                 eg.GroupName          FROM tblEntityGroups eg              INNER JOIN tblFin_CostCenterAllocation cca                  ON eg.GroupId = cca.CostCenterId          WHERE cca.PostingNum = jp.PostingNum      ) AS CostCenterTable          OUTER APPLY      (          SELECT 'Payee-' + CASE                                WHEN PayeeName IS NULL THEN                                    vn.EntityName                                ELSE                                    PayeeName                            END AS PayeeName,                 CASE                     WHEN cr.CheckNum IS NULL THEN                         'N/A'                     ELSE                         CONVERT(VARCHAR, cr.CheckNum)                 END AS CheckNum          FROM tblFin_CheckRegister cr              LEFT JOIN viewEntityNames vn                  ON cr.PayeeGUID = vn.EntityGUID          WHERE cr.TransactNum = jp.TransactNum      ) AS CheckRegisterTable          OUTER APPLY      (          SELECT 'Remitter- ' + vn.EntityName AS RemitterName          FROM tblFin_RemitterJournal rj              INNER JOIN viewEntityNames vn                  ON rj.RemitterGUID = vn.EntityGUID          WHERE rj.TransactNum = jp.TransactNum      ) AS RemitterJournalTable          OUTER APPLY      (          SELECT TOP 1                 CPC.ProgCode          FROM tblQuotes q              INNER JOIN tblQuoteDetails QD                  ON q.QuoteGUID = QD.QuoteGuid              INNER JOIN tblCompanyProgramCodes CPC                  ON QD.ProgramID = CPC.ProgramID          WHERE q.QuoteID = tblFin_Invoices.QuoteID                AND QD.CompanyLineGuid = jp.CompanyLineGuid                AND CPC.ProgCode IS NOT NULL          ORDER BY CPC.ProgCode DESC      ) AS ProgramCodesTable      WHERE DATEDIFF(DD, ISNULL(@DateRangeFrom, j.PostDate), j.PostDate) >= 0            AND DATEDIFF(DD, ISNULL(@DateRangeTo, j.PostDate), j.PostDate) <= 0            AND jp.Amount <> 0            AND            (                QuotesTable.PolicyNumber IN                (                    SELECT * FROM @PolicyNumbersTable                )                OR ClaimPolicyNumberTable.PolicyNumber IN                   (                       SELECT * FROM @PolicyNumbersTable                   )                OR @PolicyNumbers IS NULL            )            AND CASE                    WHEN @glaccountids IS NULL THEN                        1                    ELSE                        CASE                            WHEN jp.GLAcctID IN                                 (                                     SELECT * FROM @GlAccountsTable                                 )                                 OR @glaccountids IS NULL THEN                                1                            ELSE                                0                        END                END = 1            AND CASE                    WHEN @entityGuid IS NULL THEN                        1                    ELSE                        CASE                            WHEN EXISTS      (          SELECT *          FROM @entityTbl et          WHERE (                    (jp.EntityGuid = et.Guid)                    OR                    (                        jp.EntityGuid IS NULL                        AND jp.PayeeGUID = et.Guid                    )                )      )   THEN                                1                            ELSE                                0                        END                END = 1            AND            (                @glcompanyid = gl.GlCompanyId                OR @glcompanyid IS NULL            )            AND CASE                    WHEN @ExcludeVoidInvoices = 1 THEN                        CASE                            WHEN jp.InvoiceNum IN                                 (                                     SELECT * FROM #VoidedInvoiceNumsTable                                 )                                 AND j.TransDescID IN ( 'I', 'V' ) THEN                                0                            ELSE                                1                        END                    ELSE                        1                END = 1;        --AND CASE WHEN @ExcludeVoidInvoices = 1      --     THEN CASE WHEN j.VoiderFor IS NULL AND j.VoidedBy IS NULL      --             THEN 1      --             ELSE 0      --         END      --     ELSE 1      -- END = 1        UPDATE T      SET Balance = Credit + Debit      FROM #tbl T;        UPDATE T      SET Company = COALESCE(JOffTable.OfficeName, POffTable.OfficeName, OffsetOTable.OfficeName, QuotesTable.CompanyName, BankoffTable.OfficeName, GlOffTable.[Location]),          ClientOfficeName = COALESCE(JOffTable.OfficeName, POffTable.OfficeName, OffsetOTable.OfficeName, GlOffTable.[Location]),          InterCompany = COALESCE(ManualJournalInterCompanyTable.OfficeName, PurchaseOrdersInterCompanyTable.OfficeName, OffsetInterCompanyTable.OfficeName, '')                FROM #tbl T      OUTER APPLY      (          SELECT TOP 1 GOFF.OfficeName FROM Ascot_ManualJournalEntryPostings AMJEP          INNER JOIN Greyhawk_Offices GOFF ON AMJEP.OfficeCode = GOFF.OfficeCode          WHERE AMJEP.TransactNum = T.TransactNum      ) AS JOffTable          OUTER APPLY      (          SELECT TOP 1 GOFF.OfficeName FROM Greyhawk_tblPurchaseOrders GPO          INNER JOIN Greyhawk_Offices GOFF ON GPO.OfficeCode = GOFF.OfficeCode          WHERE GPO.PONum = T.PoNum      ) AS POffTable          OUTER APPLY      (          SELECT TOP(1) clo.LocationName [OfficeName] FROM dbo.Greyhawk_BankLegalEntity ble                      INNER JOIN dbo.tblFin_JournalPostings jp ON jp.TransactNum = T.TransactNum AND ble.GlAcctId = jp.GLAcctID          INNER JOIN dbo.tblFin_GlAccountTypes glt ON glt.GlAcctId = jp.GLAcctID AND glt.AccountType = 'C'          INNER JOIN dbo.tblCompanyLocations clo ON clo.CompanyLocationGUID = ble.CompanyLocationGuid          ORDER BY jp.PostingNum ASC      ) AS BankOffTable          OUTER APPLY      (          SELECT TOP 1                 GOFF.OfficeName          FROM GreyHawk_tblJournalPostingOffsetOffice GJPOO              INNER JOIN Greyhawk_Offices GOFF                  ON GJPOO.OfficeCode = GOFF.OfficeCode          WHERE GJPOO.PostingNum IN                (                    SELECT JP.PostingNum                    FROM tblFin_JournalPostings JP                    WHERE JP.TransactNum = T.TransactNum                          AND JP.GLAcctID = T.GLAccountNumber                )      ) AS OffsetOTable          OUTER APPLY      (          SELECT TOP 1                 CO2.Location          FROM tblFin_Journal J2              INNER JOIN tblClientOffices CO2                  ON J2.GlCompanyId = CO2.OfficeID          WHERE J2.TransactNum = T.TransactNum      ) AS GlOffTable          OUTER APPLY      (          SELECT TOP 1                 GOFF.OfficeName          FROM Ascot_ManualJournalEntryPostings AMJEP              INNER JOIN Greyhawk_Offices GOFF                  ON AMJEP.IntercompanyCode = GOFF.OfficeCode          WHERE AMJEP.TransactNum = T.TransactNum      ) AS ManualJournalInterCompanyTable          OUTER APPLY      (          SELECT TOP 1                 GOFF.OfficeName          FROM Greyhawk_tblPurchaseOrders GPO              INNER JOIN Greyhawk_Offices GOFF                  ON GPO.IntercompanyCode = GOFF.OfficeCode          WHERE GPO.PONum = T.PoNum      ) AS PurchaseOrdersInterCompanyTable          OUTER APPLY      (          SELECT TOP 1                 GOFF.OfficeName          FROM GreyHawk_tblJournalPostingOffsetOffice GJPOO              INNER JOIN Greyhawk_Offices GOFF                  ON GJPOO.IntercompanyCode = GOFF.OfficeCode          WHERE GJPOO.PostingNum = T.PostingNum      ) AS OffsetInterCompanyTable          OUTER APPLY      (          SELECT TOP 1                 tblCompanies.CompanyName          FROM tblFin_JournalPostings              INNER JOIN tblCompanyLines                  ON tblFin_JournalPostings.CompanyLineGuid = tblCompanyLines.CompanyLineGUID              INNER JOIN tblCompanyLocations                  ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID              INNER JOIN tblCompanies                  ON tblCompanyLocations.CompanyGUID = tblCompanies.CompanyGUID          WHERE tblFin_JournalPostings.TransactNum = T.TransactNum      ) AS QuotesTable;        UPDATE T      SET Company = ClaimsTable.CompanyName,          AccidentYear = YEAR(ClaimsTable.LossDate)      FROM #tbl T          CROSS APPLY      (          SELECT TOP 1                 tblCompanies.CompanyName,                 tblClaims_Claim.LossDate          FROM tblClaims_ReservePayments              INNER JOIN tblClaims_Claimants                  ON tblClaims_ReservePayments.ClaimantGuid = tblClaims_Claimants.ClaimantGuid              INNER JOIN tblClaims_Claim                  ON tblClaims_ReservePayments.ClaimId = tblClaims_Claim.ClaimId              INNER JOIN tblQuotes                  ON tblClaims_Claim.ControlNo = tblQuotes.ControlNo              INNER JOIN tblCompanyLocations                  ON tblQuotes.CompanyLocationGuid = tblCompanyLocations.CompanyLocationGUID              INNER JOIN tblCompanies                  ON tblCompanyLocations.CompanyGUID = tblCompanies.CompanyGUID          WHERE tblClaims_ReservePayments.ResPayId = T.ResPayID      ) AS ClaimsTable      WHERE T.ResPayID IS NOT NULL            AND T.Company IS NULL;        UPDATE T      SET Company = ClaimsTable.CompanyName,          AccidentYear = YEAR(ClaimsTable.LossDate),          ClaimantCoverageLineGuid = ClaimsTable.ClaimantCoverageLineGuid,          PolicyChildLine = ClaimsTable.ClaimantCoverageLineGuid,          QuoteID = ClaimsTable.QuoteID,          StateID = ClaimsTable.StateID,          PolicyEffectiveDate = CONVERT(VARCHAR(11), ClaimsTable.EffectiveDate, 101),          Expirationdate = CONVERT(VARCHAR(11), ClaimsTable.Expirationdate, 101)      FROM #tbl T          CROSS APPLY      (          SELECT TOP 1                 tblCompanies.CompanyName,                 tblClaims_Claim.LossDate,                 ISNULL(Greyhawk_lstCoverageLOB.LineGuid, tblQuotes.LineGUID) AS ClaimantCoverageLineGuid,                 tblQuotes.QuoteID,                 tblQuotes.StateID,                 tblQuotes.EffectiveDate,                 tblQuotes.ExpirationDate          FROM tblClaims_Claim              INNER JOIN tblClaims_Claimants                  ON tblClaims_Claim.ClaimId = tblClaims_Claimants.ClaimId              INNER JOIN tblQuotes                  ON tblClaims_Claim.ControlNo = tblQuotes.ControlNo              INNER JOIN tblCompanyLocations                  ON tblQuotes.CompanyLocationGuid = tblCompanyLocations.CompanyLocationGUID              INNER JOIN tblCompanies                  ON tblCompanyLocations.CompanyGUID = tblCompanies.CompanyGUID              LEFT JOIN Greyhawk_CustomClaimantData                  ON tblClaims_Claimants.ClaimantGuid = Greyhawk_CustomClaimantData.ClaimantGuid              LEFT JOIN Greyhawk_lstClaimCoverages                  ON Greyhawk_CustomClaimantData.CoverageId = Greyhawk_lstClaimCoverages.CoverageId              LEFT JOIN Greyhawk_lstCoverageLOB                  ON Greyhawk_lstClaimCoverages.CoverageId = Greyhawk_lstCoverageLOB.CoverageId                     AND EXISTS                         (                             SELECT *                             FROM tblQuotes SubQ                                 INNER JOIN tblQuoteDetails                                     ON SubQ.QuoteGUID = tblQuoteDetails.QuoteGuid                                 INNER JOIN tblCompanyLines                                     ON tblQuoteDetails.CompanyLineGuid = tblCompanyLines.CompanyLineGUID                             WHERE SubQ.ControlNo = tblClaims_Claim.ControlNo                                   AND tblCompanyLines.LineGUID = Greyhawk_lstCoverageLOB.LineGuid                         )          WHERE tblClaims_Claim.ClaimId = T.ClaimID      ) AS ClaimsTable      WHERE T.ClaimID IS NOT NULL            AND T.Company IS NULL;        UPDATE T      SET SunGLProductionAccountingDate = PostDate      FROM #tbl T      WHERE T.SunGLProductionAccountingDate IS NULL            AND            (                T.ResPayID IS NOT NULL                OR T.ClaimID IS NOT NULL            );        UPDATE T      SET T.ClaimantCoverageLineGuid = ClaimsTable.ClaimantCoverageLineGuid,          PolicyChildLine = ClaimsTable.ClaimantCoverageLineGuid,          T.QuoteID = ClaimsTable.QuoteID,          T.StateID = ClaimsTable.StateID,          PolicyEffectiveDate = CONVERT(VARCHAR(11), ClaimsTable.EffectiveDate, 101),          Expirationdate = CONVERT(VARCHAR(11), ClaimsTable.Expirationdate, 101)      FROM #tbl T          CROSS APPLY      (          SELECT TOP 1                 ISNULL(Greyhawk_lstCoverageLOB.LineGuid, tblQuotes.LineGUID) AS ClaimantCoverageLineGuid,                 tblQuotes.QuoteID,                 tblQuotes.StateID,                 tblQuotes.EffectiveDate,                 tblQuotes.ExpirationDate          FROM tblClaims_ReservePayments              INNER JOIN tblClaims_Claimants                  ON tblClaims_ReservePayments.ClaimantGuid = tblClaims_Claimants.ClaimantGuid              INNER JOIN tblClaims_Claim                  ON tblClaims_ReservePayments.ClaimId = tblClaims_Claim.ClaimId              INNER JOIN tblQuotes                  ON tblClaims_Claim.ControlNo = tblQuotes.ControlNo              LEFT JOIN Greyhawk_CustomClaimantData                  ON tblClaims_Claimants.ClaimantGuid = Greyhawk_CustomClaimantData.ClaimantGuid              LEFT JOIN Greyhawk_lstClaimCoverages                  ON Greyhawk_CustomClaimantData.CoverageId = Greyhawk_lstClaimCoverages.CoverageId              LEFT JOIN Greyhawk_lstCoverageLOB                  ON Greyhawk_lstClaimCoverages.CoverageId = Greyhawk_lstCoverageLOB.CoverageId                     AND EXISTS                         (                             SELECT *                             FROM tblQuotes SubQ                                 INNER JOIN tblQuoteDetails                                     ON SubQ.QuoteGUID = tblQuoteDetails.QuoteGuid                                 INNER JOIN tblCompanyLines                                     ON tblQuoteDetails.CompanyLineGuid = tblCompanyLines.CompanyLineGUID                             WHERE SubQ.ControlNo = tblClaims_Claim.ControlNo                                   AND tblCompanyLines.LineGUID = Greyhawk_lstCoverageLOB.LineGuid                         )      ) AS ClaimsTable      WHERE T.ResPayID IS NOT NULL;        UPDATE T      SET ClaimantCoverageLineGuid = ClaimsTable.ClaimantCoverageLineGuid,          PolicyChildLine = ClaimsTable.ClaimantCoverageLineGuid,          QuoteID = ClaimsTable.QuoteID,          StateID = ClaimsTable.StateID,          PolicyEffectiveDate = CONVERT(VARCHAR(11), ClaimsTable.EffectiveDate, 101),          Expirationdate = CONVERT(VARCHAR(11), ClaimsTable.Expirationdate, 101)      FROM #tbl T          CROSS APPLY      (          SELECT TOP 1                 ISNULL(Greyhawk_lstCoverageLOB.LineGuid, tblQuotes.LineGUID) AS ClaimantCoverageLineGuid,                 tblQuotes.QuoteID,                 tblQuotes.StateID,                 tblQuotes.EffectiveDate,                 tblQuotes.ExpirationDate          FROM tblClaims_Claim              INNER JOIN tblClaims_Claimants                  ON tblClaims_Claim.ClaimId = tblClaims_Claimants.ClaimId              INNER JOIN tblQuotes                  ON tblClaims_Claim.ControlNo = tblQuotes.ControlNo              LEFT JOIN Greyhawk_CustomClaimantData                  ON tblClaims_Claimants.ClaimantGuid = Greyhawk_CustomClaimantData.ClaimantGuid              LEFT JOIN Greyhawk_lstClaimCoverages                  ON Greyhawk_CustomClaimantData.CoverageId = Greyhawk_lstClaimCoverages.CoverageId              LEFT JOIN Greyhawk_lstCoverageLOB                  ON Greyhawk_lstClaimCoverages.CoverageId = Greyhawk_lstCoverageLOB.CoverageId                     AND EXISTS                         (                             SELECT *                             FROM tblQuotes SubQ                                 INNER JOIN tblQuoteDetails                                     ON SubQ.QuoteGUID = tblQuoteDetails.QuoteGuid                                 INNER JOIN tblCompanyLines                                     ON tblQuoteDetails.CompanyLineGuid = tblCompanyLines.CompanyLineGUID                             WHERE SubQ.ControlNo = tblClaims_Claim.ControlNo                                   AND tblCompanyLines.LineGUID = Greyhawk_lstCoverageLOB.LineGuid                         )          WHERE tblClaims_Claim.ClaimId = T.ClaimID      ) AS ClaimsTable      WHERE T.ClaimID IS NOT NULL;        UPDATE T      SET T.ProgramCode =          (              SELECT TOP 1                     tblCompanyProgramCodes.ProgCode              FROM tblQuotes                  INNER JOIN tblQuoteDetails                      ON tblQuotes.QuoteGUID = tblQuoteDetails.QuoteGuid                  INNER JOIN tblCompanyLines                      ON tblQuoteDetails.CompanyLineGuid = tblCompanyLines.CompanyLineGUID                  INNER JOIN tblCompanyProgramCodes                      ON tblQuoteDetails.ProgramID = tblCompanyProgramCodes.ProgramID              WHERE tblQuotes.ControlNo = T.ControlNo                    AND tblCompanyLines.LineGUID = T.ClaimantCoverageLineGuid          )      FROM #tbl T      WHERE T.ProgramCode IS NULL            AND T.ClaimantCoverageLineGuid IS NOT NULL;        UPDATE T      SET ProducerLocation =      (          SELECT TOP 1 tblProducerLocations.Name          FROM tblQuotes              INNER JOIN tblSubmissionGroup                  ON tblQuotes.SubmissionGroupGuid = tblSubmissionGroup.SubmissionGroupGUID              INNER JOIN tblProducerLocations                  ON tblSubmissionGroup.ProducerLocationGuid = tblProducerLocations.ProducerLocationGUID          WHERE tblQuotes.ControlNo = T.ControlNo      )       FROM #tbl T      WHERE T.ProducerLocation IS NULL        IF @FlagIncludeASLOB = 1      BEGIN          UPDATE T          SET ASLOB = dbo.Ascot_GetASLOBCode(T.QuoteID, T.ClaimantCoverageLineGuid, T.StateID)          FROM #tbl T          WHERE              --(              T.ResPayID IS NOT NULL;          --  OR   T.ClaimID IS NOT NULL);            UPDATE T          SET ASLOB = dbo.Ascot_GetASLOBCode(T.QuoteID, T.PolicyChildLine, T.StateID)          FROM #tbl T          WHERE              --(              T.PolicyNum IS NOT NULL              --  OR   T.ClaimID IS NOT NULL);              AND T.ASLOB IS NULL;      END;        IF @FlagIncludeASLOB = 0      BEGIN          ALTER TABLE #tbl DROP COLUMN ASLOB;      END;        --Delete internal use columns that users need not see begin      ALTER TABLE #tbl DROP COLUMN SystemInvoiceNum, PostingNum;      --Delete internal use columns that users need not see end        --summary      SELECT *      FROM #tbl        --OUTER APPLY (   SELECT      Albt.BusinessType      --                  FROM      dbo.tblQuotes subQ      --                 INNER JOIN dbo.GreyHawk_tblQuotes Gtq      --                    ON Gtq.Quoteguid     = subQ.QuoteGUID      --                 INNER JOIN dbo.Ascot_lstBusinessType Albt      --                    ON Albt.id = Gtq.BusinessType      --                 WHERE      subQ.QuoteID = #tbl.QuoteID      --        ) AS GtqTable      WHERE CASE                WHEN @ProgramCodes IS NULL THEN                    1                ELSE                    CASE                        WHEN #tbl.ProgramCode IN                             (                                 SELECT * FROM @ProgramCodesTable                             ) THEN                            1                        ELSE                            0                    END            END = 1            AND CASE                    WHEN @CostCenters IS NULL THEN                        1                    ELSE                        CASE                            WHEN #tbl.CostCenterName IN                                 (                                     SELECT * FROM @CostCentersTable                                 ) THEN                                1                            ELSE                                0                        END                END = 1            AND CASE                    WHEN @PolicyNumbers IS NULL THEN                        1                    ELSE                        CASE                            WHEN #tbl.PolicyNum IN                                 (                                     SELECT * FROM @PolicyNumbersTable                                 ) THEN                                1                            ELSE                                0                        END                END = 1            AND CASE                    WHEN @InvoiceNumbers IS NULL THEN                        1                    ELSE                        CASE                            WHEN #tbl.InvoiceNumber IN                                 (                                     SELECT * FROM @InvoiceNumbersTable                                 ) THEN                                1                            ELSE                                0                        END                END = 1            AND            (                (                    Credit IS NOT NULL                    AND Credit <> 0                )                OR                (                    Debit IS NOT NULL                    AND Debit <> 0                )            )            AND CASE                    WHEN @DateFrom IS NULL THEN                        1                    ELSE                        CASE                            WHEN CAST(ISNULL(SunGLProductionAccountingDate, @DateFrom) AS DATETIME) >= @DateFrom THEN                                1                            ELSE                                0                        END                END = 1            AND CASE                    WHEN @DateTo IS NULL THEN                        1                    ELSE                        CASE                            WHEN CAST(ISNULL(SunGLProductionAccountingDate, @DateTo) AS DATETIME) <= @DateTo THEN                                1                            ELSE                                0                        END                END = 1      ORDER BY fullname,               PostDate,               TransactNum ASC;      DROP TABLE #tbl;    END;  
Ascot_CaptiveCommissionChk_req	CREATE Procedure [dbo].[Ascot_CaptiveCommissionChk_req] --'FD86313C-0B9C-43AE-AF90-BC354AA25DC5'  (  @QuoteGUID as uniqueidentifier,  @QuoteStatusID INT = NULL  )    AS    Declare @FeePct table  (  FeePct decimal (5,4)  )    Insert into @FeePct   Select 0    UPDATE       @FeePct  SET                FeePct =  (SELECT DISTINCT dbo.Ascot_tblCaptiveFees.FeePct  FROM            dbo.Ascot_ParentCaptiveProgamsCodes INNER JOIN                           dbo.tblQuoteDetails ON dbo.Ascot_ParentCaptiveProgamsCodes.ProgramID = dbo.tblQuoteDetails.ProgramID INNER JOIN                           dbo.Ascot_tblCaptiveFees ON dbo.Ascot_ParentCaptiveProgamsCodes.ParentID = dbo.Ascot_tblCaptiveFees.ParentID INNER JOIN                           dbo.tblQuotes ON dbo.tblQuoteDetails.QuoteGuid = dbo.tblQuotes.QuoteGUID Inner JOIN          Ascot_tblParentCaptive on Ascot_tblParentCaptive.ID = Ascot_ParentCaptiveProgamsCodes.ParentID Inner Join         tblProducerLocations on tblProducerLocations.ProducerLocationID = tblQuotes.ProducerLocationID and tblProducerLocations.ProducerLocationGUID = Ascot_tblParentCaptive.ProducerLocationGUID    WHERE        (dbo.Ascot_tblCaptiveFees.FeeID = 3) AND (dbo.tblQuoteDetails.QuoteGuid = @QuoteGUID))--FeeID = 3 is the program ada      --Select FeePct from @FeePct FP        Select Case when   (SELECT DISTINCT  IsNull(FeePct,0)  FROM           @FeePct)  <>    (SELECT DISTINCT  Avg(ProducerCommission)  FROM            dbo.tblQuoteDetails  WHERE        (QuoteGuid = @QuoteGUID)) then 0    Else      1    End      --Select quoteGUID from tblQuotes where controlno = 391720     /*  --version in production prior to 4/30/2024  Select Case when   (SELECT DISTINCT  dbo.Ascot_tblCaptiveFees.FeePct  FROM            dbo.Ascot_ParentCaptiveProgamsCodes INNER JOIN                           dbo.tblQuoteDetails ON dbo.Ascot_ParentCaptiveProgamsCodes.ProgramID = dbo.tblQuoteDetails.ProgramID INNER JOIN                           dbo.Ascot_tblCaptiveFees ON dbo.Ascot_ParentCaptiveProgamsCodes.ParentID = dbo.Ascot_tblCaptiveFees.ParentID INNER JOIN                           dbo.tblQuotes ON dbo.tblQuoteDetails.QuoteGuid = dbo.tblQuotes.QuoteGUID  WHERE        (dbo.Ascot_tblCaptiveFees.FeeID = 3) AND (dbo.tblQuoteDetails.QuoteGuid = @QuoteGUID)) <>    (SELECT DISTINCT  Avg(ProducerCommission)  FROM            dbo.tblQuoteDetails  WHERE        (QuoteGuid = @QuoteGUID)) then 0 Else 1 End  */
NetRatePopulatePremium	CREATE   PROCEDURE [dbo].[NetRatePopulatePremium]      @QuoteID INT,      @OverwriteCurrent BIT = 0,      @ProcessSessionGuid UNIQUEIDENTIFIER,      @UserGuid UNIQUEIDENTIFIER,      @Completed BIT OUTPUT  AS  BEGIN        SET @Completed = 0        DECLARE @RecordsAlreadyExist BIT      SELECT @RecordsAlreadyExist = IIF(COUNT(*) > 0, 1, 0)      FROM dbo.tblNetRatePremiumContext      WHERE QuoteID = @QuoteID        DECLARE @WriteRecords BIT      SET @WriteRecords = 0        IF @RecordsAlreadyExist = 1      BEGIN          IF @OverwriteCurrent = 1          BEGIN              SET @WriteRecords = 1          END          ELSE          BEGIN              SET @WriteRecords = 0          END      END      ELSE      BEGIN          SET @WriteRecords = 1      END        IF @WriteRecords = 1 AND @ProcessSessionGuid IS NOT NULL      BEGIN          IF OBJECT_ID('tempdb..#FinalRecordsToInsert') IS NOT NULL          BEGIN              DROP TABLE #FinalRecordsToInsert          END            CREATE TABLE #FinalRecordsToInsert          (              QuoteID               INT,              ID                    INT,              ApplyToLOB            INT,--lstNetRateLOBCodes              ApplyToChargeID       VARCHAR(100),--distinct tblFin_PolicyCharges.ChargeID              PremiumType           VARCHAR(100),--lstNetRatePremiumElements              CalculationInclusion  BIT,              IsTerrorism           BIT,              Premium               VARCHAR(100),              ContextID             INT,              ContextTypeID         INT,              CompanyOptionalCodeID INT,              CompanyOptionalLOB    VARCHAR(100),              ProcessSessionGuid    UNIQUEIDENTIFIER          )            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputLiabilityPremium @QuoteID, @ProcessSessionGuid            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputPropertyPremium @QuoteID, @ProcessSessionGuid            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputCrimePremium @QuoteID, @ProcessSessionGuid            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputInlandMarinePremium @QuoteID, @ProcessSessionGuid            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputCompanyOptionalPremium @QuoteID, @ProcessSessionGuid            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputAdditionalInsuredsPremium @QuoteID, @ProcessSessionGuid            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputAutoPremium @QuoteID, @ProcessSessionGuid            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputExcessLiabilityPremium @QuoteID, @ProcessSessionGuid            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputCLBOPPremium @QuoteID, @ProcessSessionGuid            --proc will insert into #FinalRecordsToInsert          EXEC NetRateOutputWorkersCompPremium @QuoteID, @ProcessSessionGuid            DECLARE @PreviousSessionGuid uniqueidentifier          SELECT TOP 1 @PreviousSessionGuid = ProcessSessionGuid          FROM dbo.tblNetRatePopulateTransactionLog          WHERE               QuoteID = @QuoteID     AND UserGuid = @UserGuid     AND ProcessSessionGuid <> @ProcessSessionGuid            DELETE FROM dbo.tblNetRateTransactionPremium          WHERE               QuoteID = @QuoteID           AND ProcessSessionGuid = @PreviousSessionGuid            DELETE FROM dbo.tblNetRateTransactionPremiumCompanySplit          WHERE               QuoteID = @QuoteID           AND ProcessSessionGuid = @PreviousSessionGuid            --check to see if we have any chargeID overrides          UPDATE finalRecords          SET ApplyToChargeID = chargeOverrides.NewChargeID          FROM              #FinalRecordsToInsert finalRecords     JOIN dbo.tblNetRatePremiumContext premiumContext ON      finalRecords.QuoteID = premiumContext.QuoteID      AND finalRecords.ContextID = premiumContext.ContextID      AND finalRecords.ContextTypeID = premiumContext.ContextTypeID      AND finalRecords.ProcessSessionGuid = premiumContext.ProcessSessionGuid     JOIN dbo.tblNetRatePremiumContext parentContext ON      parentContext.QuoteID = premiumContext.QuoteID      AND ISNULL(parentContext.ContextID, '0') = ISNULL(premiumContext.parentContextID, '0')      AND parentContext.ProcessSessionGuid = premiumContext.ProcessSessionGuid     JOIN dbo.tblNetRateChargeIDOverrides chargeOverrides ON      chargeOverrides.QuoteID = finalRecords.QuoteID      AND chargeOverrides.ApplyToLOB = finalRecords.ApplyToLOB      AND chargeOverrides.PremiumType = finalRecords.PremiumType      AND chargeOverrides.IsTerrorism = finalRecords.IsTerrorism      AND chargeOverrides.ContextIndex = premiumContext.ContextIndex      AND chargeOverrides.ContextTypeID = premiumContext.ContextTypeID      AND chargeOverrides.parentContextIndex = parentContext.ContextIndex      AND chargeOverrides.parentContextTypeID = parentContext.ContextTypeID      AND ISNULL(chargeOverrides.CompanyOptionalCodeID, 0) = ISNULL(finalRecords.CompanyOptionalCodeID, 0)      AND ISNULL(chargeOverrides.CompanyOptionalLOB, '') = ISNULL(finalRecords.CompanyOptionalLOB, '')            --check to see if we have any premium amount overrides          UPDATE finalRecords          SET Premium = premiumOverrides.NewPremium          FROM              #FinalRecordsToInsert finalRecords     JOIN dbo.tblNetRatePremiumContext premiumContext ON      finalRecords.QuoteID = premiumContext.QuoteID      AND finalRecords.ContextID = premiumContext.ContextID      AND finalRecords.ContextTypeID = premiumContext.ContextTypeID      AND finalRecords.ProcessSessionGuid = premiumContext.ProcessSessionGuid     JOIN dbo.tblNetRatePremiumContext parentContext ON      parentContext.QuoteID = premiumContext.QuoteID      AND ISNULL(parentContext.ContextID, '0') = ISNULL(premiumContext.parentContextID, '0')      AND parentContext.ProcessSessionGuid = premiumContext.ProcessSessionGuid     JOIN dbo.tblNetRatePremiumAmountOverrides premiumOverrides ON      premiumOverrides.QuoteID = finalRecords.QuoteID      AND premiumOverrides.ApplyToLOB = finalRecords.ApplyToLOB      AND premiumOverrides.ApplyToChargeID = finalRecords.ApplyToChargeID      AND premiumOverrides.PremiumType = finalRecords.PremiumType      AND premiumOverrides.IsTerrorism = finalRecords.IsTerrorism      AND premiumOverrides.ContextIndex = premiumContext.ContextIndex      AND premiumOverrides.ContextTypeID = premiumContext.ContextTypeID      AND premiumOverrides.parentContextIndex = parentContext.ContextIndex      AND premiumOverrides.parentContextTypeID = parentContext.ContextTypeID      AND ISNULL(premiumOverrides.CompanyOptionalCodeID, 0) = ISNULL(finalRecords.CompanyOptionalCodeID, 0)      AND ISNULL(premiumOverrides.CompanyOptionalLOB, '') = ISNULL(finalRecords.CompanyOptionalLOB, '')            UPDATE finalRecords          SET Premium = premiumOverrides.NewPremium          FROM              #FinalRecordsToInsert finalRecords     JOIN dbo.tblNetRatePremiumContext ON      finalRecords.QuoteID = tblNetRatePremiumContext.QuoteID      AND finalRecords.ContextID = tblNetRatePremiumContext.ContextID      AND finalRecords.ContextTypeID = tblNetRatePremiumContext.ContextTypeID      AND finalRecords.ProcessSessionGuid = tblNetRatePremiumContext.ProcessSessionGuid     LEFT JOIN dbo.tblNetRatePremiumContext parentContext ON      parentContext.QuoteID = tblNetRatePremiumContext.QuoteID      AND ISNULL(parentContext.ContextID, '0') = ISNULL(tblNetRatePremiumContext.parentContextID, '0')      AND parentContext.ProcessSessionGuid = tblNetRatePremiumContext.ProcessSessionGuid     JOIN dbo.tblNetRatePremiumAmountOverrides premiumOverrides ON      premiumOverrides.QuoteID = finalRecords.QuoteID      AND premiumOverrides.ApplyToLOB = finalRecords.ApplyToLOB      AND premiumOverrides.ApplyToChargeID = finalRecords.ApplyToChargeID      AND premiumOverrides.PremiumType = finalRecords.PremiumType      AND premiumOverrides.IsTerrorism = finalRecords.IsTerrorism    WHERE premiumOverrides.ContextTypeID = 1            UPDATE finalRecords          SET Premium = premiumOverrides.NewPremium          FROM              #FinalRecordsToInsert finalRecords     JOIN dbo.tblNetRatePremiumContext premiumContext ON      finalRecords.QuoteID = premiumContext.QuoteID      AND finalRecords.ContextID = premiumContext.ContextID      AND finalRecords.ContextTypeID = premiumContext.ContextTypeID      AND finalRecords.ProcessSessionGuid = premiumContext.ProcessSessionGuid     LEFT JOIN dbo.tblNetRatePremiumContext parentContext ON      parentContext.QuoteID = premiumContext.QuoteID      AND ISNULL(parentContext.ContextID, '0') = ISNULL(premiumContext.parentContextID, '0')      AND parentContext.ProcessSessionGuid = premiumContext.ProcessSessionGuid     JOIN dbo.tblNetRatePremiumAmountOverrides premiumOverrides ON      premiumOverrides.QuoteID = finalRecords.QuoteID      AND premiumOverrides.ApplyToLOB = finalRecords.ApplyToLOB      AND premiumOverrides.ApplyToChargeID = finalRecords.ApplyToChargeID      AND premiumOverrides.IsTerrorism = finalRecords.IsTerrorism      AND premiumOverrides.ContextIndex = premiumContext.ContextIndex      AND premiumOverrides.parentContextIndex = parentContext.ContextIndex      AND ISNULL(premiumOverrides.CompanyOptionalCodeID, 0) = ISNULL(finalRecords.CompanyOptionalCodeID, 0)      AND ISNULL(premiumOverrides.CompanyOptionalLOB, '') = ISNULL(finalRecords.CompanyOptionalLOB, '')          WHERE premiumOverrides.ContextTypeID = 5            INSERT INTO dbo.tblNetRateTransactionPremium          SELECT              @QuoteID,     ROW_NUMBER() OVER(ORDER BY R.ContextID),     R.ApplyToLOB,     R.ApplyToChargeID,     R.PremiumType,     R.CalculationInclusion,     R.IsTerrorism,     R.Premium,     R.ContextID,     R.ContextTypeID,     R.CompanyOptionalCodeID,     R.CompanyOptionalLOB,     R.ProcessSessionGuid          FROM #FinalRecordsToInsert R          WHERE R.ProcessSessionGuid = @ProcessSessionGuid            DECLARE @ProgramID INT = 0          SELECT @ProgramID = ProgramID          FROM dbo.tblQuotes2          WHERE QuoteID = @QuoteID            IF ISNULL(@ProgramID, 0) <> 0          BEGIN              IF EXISTS(SELECT 1 FROM dbo.tblCompanyProgramCodeCompanyParticipation WHERE ProgramID = @ProgramID)              BEGIN                  --populate company split premium                  EXEC NetRateSplitPremiumByCompany @QuoteID, @ProgramID, @ProcessSessionGuid              END          END            DROP TABLE #FinalRecordsToInsert       EXEC NetRateSplitPremiumByLOB @QuoteID, @ProcessSessionGuid      DECLARE @QuoteGuid uniqueidentifier   --update scripts here:   SELECT @QuoteGuid = QuoteGUID FROM tblQuotes WHERE QuoteID = @QuoteID    EXEC UpdateCostCenter_AscotCaptives @QuoteGUID = @QuoteGuid   EXEC UpdateCommission_AscotCaptives @QuoteGUID = @QuoteGuid            SET @Completed = 1      END      ELSE      BEGIN          SET @Completed = 1      END  END
ASCOT_AL3ImportData_WCCaptives	--updated  CREATE PROCEDURE [dbo].[ASCOT_AL3ImportData_WCCaptives]   @ImportLogID int,   @ImportXML xml  AS  BEGIN     --(1/19/24) added table ASCOT_AL3ImportPolicy_WCCaptives_RiskState to account for premium node with risk state child nodes      INSERT INTO ASCOT_AL3ImportHeader(    ImportLogID,     RecordType,     ClientID,      ImportVersion,     SubmissionDate,       SourceRunDateFrom,     SourceRunDateTo)   SELECT     --ImportLogID int,     @ImportLogID,     /*      --RecordType varchar(50),                t.r.value('(RecordType)[1]', 'nvarchar(50)'),         --ClientID int,                t.r.value('(ClientID)[1]', 'int'),         --ImportVersion int,                t.r.value('(ImportVersion)[1]', 'int'),         --ImportSource int,              --  t.r.value('(ImportSource)[1]', 'int'),         --SubmissionDate varchar(50),                t.r.value('(SubmissionDate)[1]', 'nvarchar(50)'),         --SourceRunDateFrom datetime                t.r.value('(RunDateFrom)[1]', 'nvarchar(50)'),         --SourceRunDateTO datetime                t.r.value('(RunDateTo)[1]', 'nvarchar(50)')   */    --RecordType varchar(100),     t.o.value('(./RecordType)[1]', 'varchar(100)'),      --ClientID int,     t.o.value('(./ClientID)[1]', 'int'),      --ImportVersion int,     t.o.value('(./ImportVersion)[1]', 'int'),      --SubmissionDate varchar(100),     t.o.value('(./SubmissionDate)[1]', 'varchar(100)'),      --SourceRunDateFrom datetime     t.o.value('(./RunDateFrom)[1]', 'datetime'),      --SourceRunDateTO datetime     t.o.value('(./RunDateTo)[1]', 'datetime')     FROM @ImportXML.nodes('/Feed') as t(o)          --select from the xml and output xml document    --output xml and updates while xml    --exact copy with added attributes    --sample sproc in ascot CubeLogic_ImportXML_WS    --first indemnity         --DECLARE @policyData table([Id] int, policynumber varchar(200), RecordId int)      INSERT INTO ASCOT_AL3ImportPolicy_WCCaptives(     ImportLogID,      ProgramID,     XOLProgramCodeID,     --RecordType,      --RecordID,      PolicyTransactionID,      InsuredName,--     InsuredAddress1,--     InsuredAddress2,--     InsuredState,--     InsuredCity,--     InsuredZip,--     --(3/15/24) this is now coming from Ascot_tblParentCaptive     --ProducerLocation,     PolicyNo,--     --(3/21/24) this is now coming from Ascot_tblParentCaptive     --ProducerComm,--     PolicyEffDate,--     PolicyExpDate,--     TransType,--     TransEffDate,--     CompanyCode,     EndorsementNumber   )       --Output inserted.ID, inserted.PolicyNo, inserted.RecordId into @policyData       SELECT        --ImportLogID int,      @ImportLogID,       --ProgramID int, --ProgramCodeID      --t.o.value('(./ProgramID)[1]', 'int'),      --changed in the excel file      --(3/21/24) latest column name      t.o.value('(./PrimaryProgramCodeID)[1]', 'int'),      --(3/21/24) adding column for XOL ProgramCode      t.o.value('(./XOLProgramCodeID)[1]', 'int'),     /* we do not have these fields in the xml     --RecordType varchar(100),      t.o.value('(./RecordType)[1]', 'varchar(100)'),   */     --RecordID int,      --t.o.value('(./RecordId)[1]', 'int'),       --PolicyTransactionID int,      t.o.value('(./PolicyTransactionID)[1]', 'int'),         t.o.value('(./InsuredName)[1]', 'varchar(200)'),            t.o.value('(./InsuredAddress1)[1]', 'varchar(200)'),            t.o.value('(./InsuredAddress2)[1]', 'varchar(200)'),            t.o.value('(./InsuredState)[1]', 'varchar(200)'),            t.o.value('(./InsuredCity)[1]', 'varchar(200)'),            t.o.value('(./InsuredZip)[1]', 'varchar(200)'),           --ProducerLocation   --this would need to be modified      --t.o.value('(./ProducerLocation)[1]', 'uniqueidentifier'),              t.o.value('(./PolicyNo)[1]', 'varchar(200)'),         --(3/21/24) this was moved to the premium section; doesn't look like we are using this anymore      --t.o.value('(./ProducerComm)[1]', 'decimal(13, 10)'),      t.o.value('(./PolicyEffDate)[1]', 'varchar(200)'),            t.o.value('(./PolicyExpDate)[1]', 'varchar(200)'),            t.o.value('(./TransType)[1]', 'varchar(200)'),            t.o.value('(./TransEffDate)[1]', 'varchar(200)'),      --t.o.value('(./CompanyCode)[1]', 'varchar(100)')      --changed in the excel file      t.o.value('(./WritingCompany)[1]', 'varchar(100)'),      t.o.value('(./EndorsementNumber)[1]', 'varchar(100)')      FROM @ImportXML.nodes('/Feed/Policy') as t(o)        --select * from @policyData       --ASCOT_AL3ImportPolicy_WCCaptives_RiskState         INSERT INTO ASCOT_AL3ImportPolicy_WCCaptives_RiskState(     ImportLogID,      [State],     GrossPremium,     TerrorismPremium,     PolicyNo,     EndorsementNumber   )          SELECT        --ImportLogID int,      @ImportLogID as importlogid,        --t.o.value('(./State)[1]', 'varchar(200)') as [State],       --changed in the excel file      t.o.value('(./RiskState)[1]', 'varchar(200)') as [State],            t.o.value('(./GrossPremium)[1]', 'varchar(200)') as GrossPremium,                  t.o.value('(./TerrorismPremium)[1]', 'varchar(200)') as TerrorismPremium,        t.o.value('(./PolicyNo)[1]', 'varchar(200)') as PolicyNo,         t.o.value('(./EndorsementNumber)[1]', 'varchar(200)') as EndorsementNumber--,           --t.o.value('(../../RecordId)[1]', 'varchar(200)') as RecordId,         --t.o.value('(../../TransType)[1]', 'varchar(200)') as TransactionType,            --t.o.value('(../../TransEffDate)[1]', 'varchar(200)') as TransactionEffectiveDate        FROM @ImportXML.nodes('/Feed/Policy/Premium/RiskState') as t(o)      --for excel file use      --FROM @ImportXML.nodes('/Feed/Premium') as t(o)        /*    Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives](     [ID] [int] IDENTITY(1,1) NOT NULL,     [ImportLogID] [int] NULL,     [DnlTrID] [uniqueidentifier] NULL,     [PolicyNo] [varchar](200) NULL,     [EndorsementNumber] [int] NULL,     [ChargeCode] [int] NULL,     [Amount] [money] NULL,   */        INSERT INTO Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives(     ImportLogID,      PolicyNo,     EndorsementNumber,     RiskState,     ChargeCode,     Amount   )        SELECT      --ImportLogID int,      @ImportLogID,    --PolicyNo      t.o.value('(./PolicyNo)[1]', 'varchar(200)') as PolicyNo,     --EndorsementNumber      t.o.value('(./EndorsementNumber)[1]', 'varchar(200)') as EndorsementNumber,    --RiskState      t.o.value('(./RiskState)[1]', 'varchar(200)') as RiskState,      --ChargeCode,      ISNULL(TRY_CAST(t.o.value('./TaxSurchargeCode1[1]', 'int') as int), 0),    --Amount money      --(3/21/24) update column name      --ISNULL(TRY_CAST(t.o.value('./TaxSurchargeCode1Amt[1]', 'money') as money), 0),      ISNULL(TRY_CAST(t.o.value('./TaxSurchargeAmt1[1]', 'money') as money), 0)     FROM @ImportXML.nodes('/Feed/Policy/Premium/RiskState') as t(o)     where      --only save those that have a charge code     ISNULL(TRY_CAST(t.o.value('./TaxSurchargeCode1[1]', 'int') as int), 0) != 0     union all     SELECT      --ImportLogID int,      @ImportLogID,    --PolicyNo      t.o.value('(./PolicyNo)[1]', 'varchar(200)') as PolicyNo,     --EndorsementNumber      t.o.value('(./EndorsementNumber)[1]', 'varchar(200)') as EndorsementNumber,    --RiskState      t.o.value('(./RiskState)[1]', 'varchar(200)') as RiskState,      --ChargeCode,      ISNULL(TRY_CAST(t.o.value('./TaxSurchargeCode2[1]', 'int') as int), 0),    --Amount money      --(3/21/24) update column name      --ISNULL(TRY_CAST(t.o.value('./TaxSurchargeCode2Amt[1]', 'money') as money), 0),      ISNULL(TRY_CAST(t.o.value('./TaxSurchargeAmt2[1]', 'money') as money), 0)     FROM @ImportXML.nodes('/Feed/Policy/Premium/RiskState') as t(o)     where      --only save those that have a charge code     ISNULL(TRY_CAST(t.o.value('./TaxSurchargeCode2[1]', 'int') as int), 0) != 0     union all     SELECT      --ImportLogID int,      @ImportLogID,    --PolicyNo      t.o.value('(./PolicyNo)[1]', 'varchar(200)') as PolicyNo,     --EndorsementNumber      t.o.value('(./EndorsementNumber)[1]', 'varchar(200)') as EndorsementNumber,    --RiskState      t.o.value('(./RiskState)[1]', 'varchar(200)') as RiskState,      --ChargeCode,      ISNULL(TRY_CAST(t.o.value('./TaxSurchargeCode3[1]', 'int') as int), 0),    --Amount money      --(3/21/24) update column name      --ISNULL(TRY_CAST(t.o.value('./TaxSurchargeCode3Amt[1]', 'money') as money), 0),      ISNULL(TRY_CAST(t.o.value('./TaxSurchargeAmt3[1]', 'money') as money), 0)       FROM @ImportXML.nodes('/Feed/Policy/Premium/RiskState') as t(o)     where      --only save those that have a charge code     ISNULL(TRY_CAST(t.o.value('./TaxSurchargeCode3[1]', 'int') as int), 0) != 0         /* (1/19/24) New Sample XML  <Policy>   <InsuredName>Affordable Solar Installation, Inc.</InsuredName>   <InsuredAddress1>4940 Pan American Fwy NE</InsuredAddress1>   <InsuredAddress2></InsuredAddress2>   <InsuredState>NM</InsuredState>   <InsuredCity>ALBUQUERQUE</InsuredCity>   <InsuredZip>87109</InsuredZip>   <ProducerLocation>A8055719-CC75-486A-8F2E-04F8E6E1282E</ProducerLocation>   <ProducerContact>A8055719-CC75-486A-8F2E-04F8E6E1282E</ProducerContact>   <PolicyNo>WC12345</PolicyNo>   <Premium>    <RiskState>     <State>FL</State>     <GrossPremium>7416</GrossPremium>     <TerrorismPremium>0</TerrorismPremium>    </RiskState>    <RiskState>     <State>NC</State>     <GrossPremium>2500</GrossPremium>     <TerrorismPremium>0</TerrorismPremium>    </RiskState>    <RiskState>     <State>NM</State>     <GrossPremium>12000</GrossPremium>     <TerrorismPremium>0</TerrorismPremium>    </RiskState>   </Premium>   <ProducerComm>0.3</ProducerComm>   <PolicyEffDate>2023-10-10</PolicyEffDate>   <PolicyExpDate>2024-10-10</PolicyExpDate>   <TransType>New</TransType>   <TransEffDate>2023-10-10</TransEffDate>   <TaxesFeesSurcharges />   <Program>AIC WC</Program>   <ProgramCode></ProgramCode>  </Policy>   */    --new sample 2-16-2024  /*  This XML file does not appear to have any style information associated with it. The document tree is shown below.  <Feed>  <RecordType>HDR</RecordType>  <ImportVersion>16</ImportVersion>  <ImportSource>15</ImportSource>  <SubmissionDate>1/17/2024 3:54:25 PM</SubmissionDate>  <RunDateFrom>1/17/2024 3:54:25 PM</RunDateFrom>  <RunDateTo>1/17/2024 3:54:25 PM</RunDateTo>  <Policy>  <InsuredName>Scott Ramsey & Kevin Judy</InsuredName>  <InsuredAddress1>504 New Salem Rd</InsuredAddress1>  <InsuredAddress2/>  <InsuredState>GA</InsuredState>  <InsuredCity>Griffin</InsuredCity>  <InsuredZip>30223</InsuredZip>  <PolicyNo>WC124-9000338</PolicyNo>  <ProducerLocation>B3FCD77F-2A34-4302-9DBB-9A4D5A1CB058</ProducerLocation>  <Premium>  <RiskState>  <State>GA</State>  <GrossPremium>2914</GrossPremium>  <TerrorismPremium>5</TerrorismPremium>  </RiskState>  <RiskState>  <State>TN</State>  <GrossPremium>4000</GrossPremium>  <TerrorismPremium>2</TerrorismPremium>  </RiskState>  <RiskState>  <State>VA</State>  <GrossPremium>3000</GrossPremium>  <TerrorismPremium>7</TerrorismPremium>  </RiskState>  </Premium>  <ProducerComm>0.3</ProducerComm>  <PolicyEffDate>2024-01-26</PolicyEffDate>  <PolicyExpDate>2025-01-26</PolicyExpDate>  <TransType>New</TransType>  <TransEffDate>2024-01-26</TransEffDate>  <TaxesFeesSurcharges/>  <ProgramID>1040</ProgramID>  </Policy>  <Policy>  <InsuredName>Lee Ellison</InsuredName>  <InsuredAddress1>111 Jessica Dr</InsuredAddress1>  <InsuredAddress2/>  <InsuredState>GA</InsuredState>  <InsuredCity>Griffin</InsuredCity>  <InsuredZip>30223</InsuredZip>  <PolicyNo>WC124-9000351</PolicyNo>  <ProducerLocation>B3FCD77F-2A34-4302-9DBB-9A4D5A1CB058</ProducerLocation>  <Premium>  <RiskState>  <State>TN</State>  <GrossPremium>1891</GrossPremium>  <TerrorismPremium>4</TerrorismPremium>  </RiskState>  <RiskState>  <State>GA</State>  <GrossPremium>1200</GrossPremium>  <TerrorismPremium>5</TerrorismPremium>  </RiskState>  <RiskState>  <State>VA</State>  <GrossPremium>1800</GrossPremium>  <TerrorismPremium>1</TerrorismPremium>  </RiskState>  </Premium>  <ProducerComm>0.3</ProducerComm>  <PolicyEffDate>2024-01-28</PolicyEffDate>  <PolicyExpDate>2025-01-28</PolicyExpDate>  <TransType>New</TransType>  <TransEffDate>2024-01-28</TransEffDate>  <TaxesFeesSurcharges/>  <ProgramID>1040</ProgramID>  </Policy>  <Policy>  <InsuredName>Scott Ramsey & Kevin Judy</InsuredName>  <InsuredAddress1>504 New Salem Rd</InsuredAddress1>  <InsuredAddress2/>  <InsuredState>GA</InsuredState>  <InsuredCity>Griffin</InsuredCity>  <InsuredZip>30223</InsuredZip>  <ProducerLocation>E9B9C453-CBF7-4C5B-A093-3FC2EF7703D8</ProducerLocation>  <ProducerContact/>  <PolicyNo>WC124-9000338</PolicyNo>  <Premium>  <RiskState>  <State>GA</State>  <GrossPremium>250</GrossPremium>  <TerrorismPremium>3</TerrorismPremium>  </RiskState>  <RiskState>  <State>VA</State>  <GrossPremium>125</GrossPremium>  <TerrorismPremium>1</TerrorismPremium>  </RiskState>  </Premium>  <ProducerLocation>B3FCD77F-2A34-4302-9DBB-9A4D5A1CB058</ProducerLocation>  <ProducerComm>0.3</ProducerComm>  <PolicyEffDate>2024-01-26</PolicyEffDate>  <PolicyExpDate>2025-01-26</PolicyExpDate>  <TransType>Endorsement</TransType>  <TransEffDate>2024-03-01</TransEffDate>  <TaxesFeesSurcharges/>  <ProgramID>1040</ProgramID>  </Policy>  </Feed>    --update tables and inserts to match new xml  --when we insert into risk state, will need some id to link between records in al import policy wc captives; 2nd table   --need link between this ASCOT_AL3ImportPolicy_WCCaptives and the risk_state  --we now which records are direct children of what records in the policy table  --last thing in this sproc  */        exec Ascot_AL3TransferData_WCCaptives @ImportLogID     --tables down in table may require changes in the transfer   --testing that xml   --they will give xml; will match new xml   --take xml fix premium   --Ascot_InitiateAL3Import place xml as parameter   --ascot_lstal3importversion   --select * from ascot_lstal3importversion --update   /*   NewBusinessRenewalProcessProcedure EndorsementCancellationReinstatementProcessProcedure RewriteProcessProcedure  Ascot_ImportAL3_NBS_V2_DynamicProducer Ascot_ImportAL3_ENDORSE_v2_DynamicProducer Ascot_ImportAL3_REWRITE_v2_DynamicProducer   */   --in transfer sproc; producer location node in the xml is going to have the producer location guid   --with that guid look up producer location id and set the producer code in the policy master table with that producer location id   --producer code will be the id; producer will be dynamic not hard coded.  END
Ascot_AL3PremiumSplitByLOB_WCCaptives	CREATE PROCEDURE [dbo].[Ascot_AL3PremiumSplitByLOB_WCCaptives]   @ImportLogID int  AS  BEGIN     --select 'Ascot_AL3PremiumSplitByLOB_WCCaptives_Update' as testingSplitPremium           --(1/19/24) need to get the main child line for package line of business   --for example package is Captive - Worker's Compensation   --the main line for this is Captive - Primary Worker's Compensation   --this will be used as the linefrom and also to get the lineto   declare @sublines as table   (    importlogid int,    ProgramID int,    ParentId int,    lineId int,     linename varchar(500),    lineguid uniqueidentifier   )     insert into @sublines     select     distinct      @importlogid,     --PolicyNumber,     dt.ProgramID,     --dt.LineName,     --dt.lineid,     cpc.ParentId,     lstlines.LineID,     lstlines.LineName,     lstlines.lineguid    from         (     select        ASCOT_AL3PolicyMasterTable_V2.PolicyNumber,        ll.LineName,        ll.lineid,        ASCOT_AL3PolicyMasterTable_V2.ProgramID,         tblcompanylines.CompanyLineGUID      from ASCOT_AL3PolicyMasterTable_V2      join lstlines ll       on ASCOT_AL3PolicyMasterTable_V2.linecode = ll.lineid      join tblcompanylines       on ll.lineguid = tblcompanylines.LineGUID       and ASCOT_AL3PolicyMasterTable_V2.insuredState = tblcompanylines.StateId      where         ASCOT_AL3PolicyMasterTable_V2.ImportLogID = @importlogid    ) as dt        join tblcompanylines     on dt.CompanyLineGUID = tblcompanylines.ParentCompanyLineGUID     join lstlines      on tblcompanylines.LineGUID = lstlines.LineGUID      join Ascot_ParentCaptiveProgamsCodes cpc     on dt.ProgramID = cpc.ProgramID    join Ascot_tblCaptivePremiumSplits splits     on cpc.ParentId = splits.ParentID     and lstlines.lineguid = splits.LineGUIDFrom            --select '@sublines' as tablename, * from @sublines         IF OBJECT_ID('tempdb..#ImportedData') IS NOT NULL   BEGIN      DROP TABLE #ImportedData     END     CREATE TABLE #ImportedData   (    PolicyNumber varchar(200),    DnlTrID uniqueidentifier,    PolicyTransactionID int,    Premium money,    Terrorism money,    RiskState varchar(100),    ProgramID int,    ParentID int,    LineCode int   )     INSERT INTO #ImportedData   SELECT      --'#ImportedData' as tablename,      --PolicyNumber varchar(200),      ASCOT_AL3PolicyMasterTable_V2.PolicyNumber,      --DnlTrID uniqueidentifier,      ASCOT_AL3PolicyMasterTable_V2.DnlTrId,      --PolicyTransactionID int,      ASCOT_AL3PolicyMasterTable_V2.PolicyTransactionID,      --Premium money,      --ASCOT_AL3PolicyMasterTable_V2.PremiumAmount,      states.GrossPremium as PremiumAmount,      --Terrorism money,      --ASCOT_AL3PolicyMasterTable_V2.TerrorismPremium,      states.TerrorismPremium,      --RiskState varchar(100)      --ASCOT_AL3PolicyMasterTable_V2.PremiumState,      states.[State] as PremiumState,      --ProgramID int      ASCOT_AL3PolicyMasterTable_V2.ProgramID,      --ParentID      sublines.ParentId,        --LineCode int      --ASCOT_AL3PolicyMasterTable_V2.LineCode      --352      sublines.lineId     FROM  ASCOT_AL3PolicyMasterTable_V2   --(1/17/24) this needs to be split in here; master table can only have 1 data row   --   join  ASCOT_AL3ImportPolicy_WCCaptives     on ASCOT_AL3PolicyMasterTable_V2.importlogid = ASCOT_AL3ImportPolicy_WCCaptives.importlogid     and ASCOT_AL3PolicyMasterTable_V2.policynumber = ASCOT_AL3ImportPolicy_WCCaptives.policyno      and ASCOT_AL3PolicyMasterTable_V2.DnlTrId = ASCOT_AL3ImportPolicy_WCCaptives.DnlTrId    join  ASCOT_AL3ImportPolicy_WCCaptives_RiskState states    on  ASCOT_AL3ImportPolicy_WCCaptives.importlogid = states.importlogid    --and  ASCOT_AL3ImportPolicy_WCCaptives.Id = states.policyId    and  ASCOT_AL3ImportPolicy_WCCaptives.PolicyNo = states.PolicyNo    and  ASCOT_AL3ImportPolicy_WCCaptives.EndorsementNumber = states.EndorsementNumber   --(3/8/23) needed to add the program id otherwise we will get additional rows   join  @sublines sublines    on  ASCOT_AL3PolicyMasterTable_V2.ImportLogID = sublines.importlogid    and  ASCOT_AL3PolicyMasterTable_V2.ProgramID = sublines.ProgramID   WHERE  ASCOT_AL3PolicyMasterTable_V2.ImportLogID = @ImportLogID      --select * from ASCOT_AL3PolicyMasterTable_V2   --select * from ASCOT_AL3ImportPolicy_WCCaptives   --select * from ASCOT_AL3ImportPolicy_WCCaptives_RiskState      --select '#ImportedData' as tablename, * from #ImportedData order by PolicyNumber      /* for testing     INSERT INTO #ImportedData   SELECT    --PolicyNumber varchar(200),      '1',      --DnlTrID uniqueidentifier,      '00000000-0000-0000-0000-000000000001',      --PolicyTransactionID int,      1,      --Premium money,      236,      --Terrorism money,      10,      --RiskState varchar(100)      'NY',      --ProgramID int      765,      --LineCode int      353     INSERT INTO #ImportedData   SELECT    --PolicyNumber varchar(200),      '1',      --DnlTrID uniqueidentifier,      '00000000-0000-0000-0000-000000000011',      --PolicyTransactionID int,      2,      --Premium money,      -236,      --Terrorism money,      -10,      --RiskState varchar(100)      'NY',      --ProgramID int      765,      --LineCode int      353     INSERT INTO #ImportedData   SELECT    --PolicyNumber varchar(200),      '2',      --DnlTrID uniqueidentifier,      '00000000-0000-0000-0000-000000000002',      --PolicyTransactionID int,      1,      --Premium money,      562,      --Terrorism money,      20,      --RiskState varchar(100)      'NJ',      --ProgramID int      765,      --LineCode int      353    */           IF OBJECT_ID('tempdb..#PremiumSplitTable') IS NOT NULL   BEGIN      DROP TABLE #PremiumSplitTable     END     CREATE TABLE #PremiumSplitTable   (    ParentID int,    LineGuidFrom uniqueidentifier,    LineGuidTo uniqueidentifier,    SplitPercent money   )       INSERT INTO #PremiumSplitTable   SELECT    --ParentID int,      Ascot_tblCaptivePremiumSplits.ParentID,      --LineGuidFrom uniqueidentifier,      Ascot_tblCaptivePremiumSplits.LineGUIDFrom,      --LineGuidTo uniqueidentifier,      Ascot_tblCaptivePremiumSplits.LineGUIDTo,      --SplitPercent money      Ascot_tblCaptivePremiumSplits.SplitPct     FROM  Ascot_tblCaptivePremiumSplits   WHERE  Ascot_tblCaptivePremiumSplits.ParentID IN(                 SELECT Ascot_ParentCaptiveProgamsCodes.ParentID                 FROM Ascot_ParentCaptiveProgamsCodes                  WHERE Ascot_ParentCaptiveProgamsCodes.ProgramID IN(SELECT SubI.ProgramID FROM #ImportedData SubI)                )   AND   Ascot_tblCaptivePremiumSplits.LineGUIDFrom IN(SELECT lstLines.LineGuid FROM #ImportedData SubI INNER JOIN lstLines ON SubI.LineCode = lstLines.LineID)       --select '#PremiumSplitTable' as tablename, * from #PremiumSplitTable     --select * from Ascot_tblCaptivePremiumSplits     IF OBJECT_ID('tempdb..#WorkingSplitTable') IS NOT NULL   BEGIN      DROP TABLE #WorkingSplitTable     END     CREATE TABLE #WorkingSplitTable   (    PolicyNumber varchar(200),    ParentId int,    DnlTrID uniqueidentifier,    PolicyTransactionID int,    LineGuid uniqueidentifier,      RiskState varchar(20),        SplitPercent money,    SplitPremium money,    SplitTerrorism money,    LineGuidFrom uniqueidentifier,    SplitPremiumDifference money,    SplitTerrorismDifference money,    DnltrIDLineCount int,    InitialPremiumDifferenceAdjustment money,    InitialTerrorismDifferenceAdjustment money   )     --insert the premium split off from the primary   INSERT INTO #WorkingSplitTable      SELECT      --'#WorkingSplitTable 01' as tablename,    --PolicyNumber varchar(200),      I.PolicyNumber,      --ParentId      I.ParentID,      --DnlTrID uniqueidentifier,      I.DnlTrID,      --PolicyTransactionID int,      I.PolicyTransactionID,      --LineGuid uniqueidentifier,      SplitT.LineGuidTo,      --(1/19/24) Added      I.RiskState,      --SplitPercent money,      SplitT.SplitPercent,      --SplitPremium money,      ROUND(I.Premium * SplitT.SplitPercent, 2),      --SplitTerrorism money      ROUND(I.Terrorism * SplitT.SplitPercent, 2),      --LineGuidFrom uniqueidentifier      SplitT.LineGuidFrom,      --SplitPremiumDifference money,      0,      --SplitTerrorismDifference money,      0,      --DnltrIDLineCount int      NULL,      --InitialPremiumDifferenceAdjustment money,      0,      --InitialTerrorismDifferenceAdjustment money      0     FROM  #ImportedData I   INNER JOIN lstLines ON I.LineCode = lstLines.LineID   INNER JOIN #PremiumSplitTable SplitT      ON lstLines.LineGUID = SplitT.LineGuidFrom     --(3/8/23) add this to make sure we are using the correct lineguid to split based off the program id     and I.ParentID = SplitT.ParentID     --select '#ImportedData' as tablename, * from #ImportedData     --select '#PremiumSplitTable' as tablename, * From #PremiumSplitTable     --insert the primary with the split subtracted   INSERT INTO #WorkingSplitTable   SELECT      --'Subtracted #WorkingSplitTable' as tablename,    --PolicyNumber varchar(200),      I.PolicyNumber,      --ParentId      I.ParentID,      --DnlTrID uniqueidentifier,      I.DnlTrID,      --PolicyTransactionID int,      I.PolicyTransactionID,      --LineGuid uniqueidentifier,      lstLines.LineGUID,      --(1/19/24) Added      I.RiskState,      --SplitPercent money,      1.0 - ISNULL(SplitTable.SplitPercent, 0),      --SplitPremium money,      I.Premium - ISNULL(SplitTable.SplitPremium, 0),      --SplitTerrorism money      I.Terrorism - ISNULL(SplitTable.SplitTerrorism, 0),      --LineGuidFrom uniqueidentifier      NULL,      --SplitPremiumDifference money,      0,      --SplitTerrorismDifference money,      0,      --DnltrIDLin      NULL,      --InitialPremiumDifferenceAdjustment money      0,      --InitialTerrorismDifferenceAdjustment money      0--,        --for testing      --SplitTable.*     FROM  #ImportedData I   INNER JOIN lstLines ON I.LineCode = lstLines.LineID   CROSS APPLY (       SELECT SUM(SubW.SplitPremium) As SplitPremium,         SUM(SubW.SplitTerrorism) AS SplitTerrorism,         SUM(SubW.SplitPercent) AS SplitPercent       FROM #WorkingSplitTable SubW       WHERE SubW.DnlTrID = I.DnlTrID       AND SubW.LineGuidFrom = lstLines.LineGUID       and SubW.RiskState = I.RiskState      ) As SplitTable           --select '#WorkingSplitTable' as #WorkingSplitTable, * from #WorkingSplitTable      --SIMULATE DIFFERENCES  /*  UPDATE W SET W.SplitPremium = W.SplitPremium + 0.07,     W.SplitTerrorism = W.SplitTerrorism + 0.05  FROM #WorkingSplitTable W  WHERE W.DnlTrID = '00000000-0000-0000-0000-000000000001'  AND LineGuid = '51A7C813-C711-4E1F-8327-1B5DF786B8FA'    UPDATE W SET W.SplitPremium = W.SplitPremium - 0.05,      W.SplitTerrorism = W.SplitTerrorism - 0.04  FROM #WorkingSplitTable W  WHERE W.DnlTrID = '00000000-0000-0000-0000-000000000011'  AND LineGuid = '6529586F-20AB-4FD1-AAF3-1EF8EB155BFF'  */  /*  UPDATE W SET W.SplitPremium = W.SplitPremium - 100.00  FROM #WorkingSplitTable W  WHERE W.DnlTrID = '00000000-0000-0000-0000-000000000011'  AND LineGuid = '51A7C813-C711-4E1F-8327-1B5DF786B8FA'    UPDATE W SET W.SplitPremium = W.SplitPremium + 100.00  FROM #WorkingSplitTable W  WHERE W.DnlTrID = '00000000-0000-0000-0000-000000000011'  AND LineGuid = '6529586F-20AB-4FD1-AAF3-1EF8EB155BFF'  */     /*   LineGuid        RiskState  SplitPercent SplitPremium SplitTerrorism   51A7C813-C711-4E1F-8327-1B5DF786B8FA FL    0.185   1371.96   0.00   51A7C813-C711-4E1F-8327-1B5DF786B8FA NC    0.185   462.50   0.00   51A7C813-C711-4E1F-8327-1B5DF786B8FA NM    0.185   2220.00   0.00   6529586F-20AB-4FD1-AAF3-1EF8EB155BFF FL    0.815   6044.04   0.00   6529586F-20AB-4FD1-AAF3-1EF8EB155BFF NC    0.815   2037.50   0.00   6529586F-20AB-4FD1-AAF3-1EF8EB155BFF NM    0.815   9780.00   0.00   */       declare @AggregateWorkSplitTableByState table    (    Premium money,    Terrorism money,    RiskState varchar(20)   )     insert into @AggregateWorkSplitTableByState     select  --'#WorkingSplitTable' as #WorkingSplitTable,       sum(SplitPremium) as Premium,      sum(SplitTerrorism) as Terrorism,      RiskState--,      --LineGuid    from #WorkingSplitTable    group by      RiskState--,      --LineGuid      --select '@AggregateWorkSplitTableByState' as tablename, * from @AggregateWorkSplitTableByState     --for testing   /*   Update #ImportedData   set Premium = 7417   where RiskState = 'FL'   */        /*   UPDATE W SET SplitPremiumDifference = I.Premium - SplitAggregationTable.SplitPremium,      SplitTerrorismDifference = I.Terrorism - SplitAggregationTable.SplitTerrorism,      DnltrIDLineCount = SplitAggregationTable.LineCount   FROM #WorkingSplitTable W   */     --select   UPDATE W SET SplitPremiumDifference = dt.Premium - dt.SplitPremium,     SplitTerrorismDifference = dt.Terrorism - dt.SplitTerrorism,     DnltrIDLineCount = dt.LineCount   from    (    select       I.Premium,       I.Terrorism,       I.RiskState,       SplitAggregationTable.*    FROM  --#WorkingSplitTable W    --INNER JOIN        #ImportedData I       --ON W.DnlTrID = I.DnlTrID      --and W.RiskState = I.RiskState       CROSS APPLY (        SELECT SUM(SubW.SplitPremium) As SplitPremium,          SUM(SubW.SplitTerrorism) As SplitTerrorism,          COUNT(1) As LineCount        FROM #WorkingSplitTable SubW        WHERE SubW.DnlTrID = I.DnlTrID         and SubW.RiskState = I.RiskState       ) As SplitAggregationTable   ) as dt   join #WorkingSplitTable W   on dt.RiskState = W.RiskState             /*   UPDATE W SET SplitPremiumDifference = I.Premium - SplitAggregationTable.SplitPremium,      SplitTerrorismDifference = I.Terrorism - SplitAggregationTable.SplitTerrorism,      DnltrIDLineCount = SplitAggregationTable.LineCount   FROM #WorkingSplitTable W   INNER JOIN #ImportedData I ON W.DnlTrID = I.DnlTrID   CROSS APPLY (       SELECT SUM(SubW.SplitPremium) As SplitPremium,         SUM(SubW.SplitTerrorism) As SplitTerrorism,         COUNT(1) As LineCount       FROM #WorkingSplitTable SubW       WHERE SubW.DnlTrID = W.DnlTrID      ) As SplitAggregationTable   */     UPDATE W SET InitialPremiumDifferenceAdjustment = ((W.SplitPremiumDifference * 100) / W.DnltrIDLineCount),      InitialTerrorismDifferenceAdjustment = ((W.SplitTerrorismDifference * 100) / W.DnltrIDLineCount)   FROM #WorkingSplitTable W     --need to FLOOR when the difference is positive; need to CEILING when negative   UPDATE W SET InitialPremiumDifferenceAdjustment = CASE WHEN InitialPremiumDifferenceAdjustment > 0 THEN FLOOR(InitialPremiumDifferenceAdjustment) ELSE CEILING(InitialPremiumDifferenceAdjustment) END / 100,      InitialTerrorismDifferenceAdjustment = CASE WHEN InitialTerrorismDifferenceAdjustment > 0 THEN FLOOR(InitialTerrorismDifferenceAdjustment) ELSE CEILING(InitialTerrorismDifferenceAdjustment) END / 100   FROM #WorkingSplitTable W       --SELECT '#WorkingSplitTable1' AS WorkingSplitTable, * from #WorkingSplitTable order by PolicyNumber, DnlTrID, LineGuid       UPDATE W SET SplitPremium = SplitPremium + InitialPremiumDifferenceAdjustment,      SplitTerrorism = SplitTerrorism + InitialTerrorismDifferenceAdjustment,      SplitPremiumDifference = SplitPremiumDifference - (InitialPremiumDifferenceAdjustment * DnltrIDLineCount),      SplitTerrorismDifference = SplitTerrorismDifference - (InitialTerrorismDifferenceAdjustment * DnltrIDLineCount)   FROM #WorkingSplitTable W       IF OBJECT_ID('tempdb..#SplitPremiumAdjustmentTable') IS NOT NULL   BEGIN      DROP TABLE #SplitPremiumAdjustmentTable     END     CREATE TABLE #SplitPremiumAdjustmentTable   (    DnlTrID uniqueidentifier,    LineGuid uniqueidentifier,    PremiumAdjustmentAmount money,    TerrorismAdjustmentAmount money   )     INSERT INTO #SplitPremiumAdjustmentTable   SELECT    --DnlTrID uniqueidentifier,      W.DnlTrID,      --LineGuid uniqueidentifier,      W.LineGuid,      --PremiumAdjustmentAmount money,      0,      --TerrorismAdjustmentAmount money      0     FROM  #WorkingSplitTable W   WHERE  (W.SplitPremiumDifference <> 0    OR  W.SplitTerrorismDifference <> 0)       --select '#SplitPremiumAdjustmentTable' as tablename, * from #SplitPremiumAdjustmentTable             DECLARE @CursorPolicyNumber varchar(200)   DECLARE @CursorDnlTrID uniqueidentifier   DECLARE @CursorSplitPremiumDifference money   DECLARE @CursorSplitTerrorismDifference money     --UPDATE REMAINDER DIFFERENCE VIA CURSOR   DECLARE PremiumDifferenceCursor CURSOR FAST_FORWARD   FOR SELECT DISTINCT PolicyNumber, DnlTrID, SplitPremiumDifference, SplitTerrorismDifference    FROM #WorkingSplitTable     OPEN PremiumDifferenceCursor     FETCH NEXT FROM PremiumDifferenceCursor     INTO @CursorPolicyNumber, @CursorDnlTrID, @CursorSplitPremiumDifference, @CursorSplitTerrorismDifference     WHILE @@FETCH_STATUS = 0   BEGIN      DECLARE @PremiumAdjustmentAmount money = 0    DECLARE @TerrorismAdjustmentAmount money = 0      IF @CursorSplitPremiumDifference <> 0 OR @CursorSplitTerrorismDifference <> 0    BEGIN       IF @CursorSplitPremiumDifference < 0     BEGIN        SET @PremiumAdjustmentAmount = -0.01       END     ELSE IF @CursorSplitPremiumDifference > 0     BEGIN        SET @PremiumAdjustmentAmount = 0.01       END       IF @CursorSplitTerrorismDifference < 0     BEGIN        SET @TerrorismAdjustmentAmount = -0.01       END     ELSE IF @CursorSplitTerrorismDifference > 0     BEGIN        SET @TerrorismAdjustmentAmount = 0.01       END       DECLARE @Cursor2LineGuid uniqueidentifier       DECLARE PremiumAdjustmentCursor CURSOR FAST_FORWARD     FOR SELECT W.LineGuid      FROM #WorkingSplitTable W      WHERE W.DnlTrID = @CursorDnlTrID       OPEN PremiumAdjustmentCursor       FETCH NEXT FROM PremiumAdjustmentCursor      INTO @Cursor2LineGuid       WHILE @@FETCH_STATUS = 0     BEGIN        IF @CursorSplitPremiumDifference <> 0      BEGIN         UPDATE W SET PremiumAdjustmentAmount = PremiumAdjustmentAmount + @PremiumAdjustmentAmount       FROM #SplitPremiumAdjustmentTable W       WHERE W.DnlTrID = @CursorDnlTrID       AND W.LineGuid = @Cursor2LineGuid         SET @CursorSplitPremiumDifference = @CursorSplitPremiumDifference - @PremiumAdjustmentAmount        END        IF @CursorSplitTerrorismDifference <> 0      BEGIN         UPDATE W SET TerrorismAdjustmentAmount = TerrorismAdjustmentAmount + @TerrorismAdjustmentAmount       FROM #SplitPremiumAdjustmentTable W       WHERE W.DnlTrID = @CursorDnlTrID       AND W.LineGuid = @Cursor2LineGuid         SET @CursorSplitTerrorismDifference = @CursorSplitTerrorismDifference - @TerrorismAdjustmentAmount        END        FETCH NEXT FROM PremiumAdjustmentCursor       INTO @Cursor2LineGuid     END       CLOSE PremiumAdjustmentCursor     DEALLOCATE PremiumAdjustmentCursor      END        FETCH NEXT FROM PremiumDifferenceCursor      INTO @CursorPolicyNumber, @CursorDnlTrID, @CursorSplitPremiumDifference, @CursorSplitTerrorismDifference   END     CLOSE PremiumDifferenceCursor   DEALLOCATE PremiumDifferenceCursor     UPDATE W SET SplitPremium = SplitPremium + Adjust.PremiumAdjustmentAmount,      SplitTerrorism = SplitTerrorism + Adjust.TerrorismAdjustmentAmount   FROM #WorkingSplitTable W   INNER JOIN #SplitPremiumAdjustmentTable Adjust ON W.DNlTrID = Adjust.DnlTrID    AND W.LineGuid = Adjust.LineGuid     --AT THIS POINT EACH TRANSACTIONS SPLIT SHOULD MATCH THE ORIGINAL UNSPLIT PREMIUM   --NOW WE CHECK TO SEE IF ANY CREDIT TRANSACTIONS NEED TO BE ADJUSTED TO MAKE SURE THERE'S ENOUGH PREMIUM FROM THE PRIOR TRANSACTIONS TO APPLY THE CREDIT     IF OBJECT_ID('tempdb..#CurrentIMSPremiumByLine') IS NOT NULL   BEGIN      DROP TABLE #CurrentIMSPremiumByLine     END     CREATE TABLE #CurrentIMSPremiumByLine   (    PolicyNumber varchar(100),    AccountNumber varchar(100),    LineGuid uniqueidentifier,    Premium money,    Terrorism money   )     INSERT INTO #CurrentIMSPremiumByLine   SELECT    --PolicyNumber varchar(100),      tblQuotes.PolicyNumber,      --AccountNumber varchar(100),      tblQuotes.AccountNumber,      --LineGuid uniqueidentifier,      PremiumTable.LineGUID,      --Premium money,      PremiumTable.Premium,      --Terrorism money      PremiumTable.Terrorism     FROM  tblQuotes   CROSS APPLY (       SELECT tblCompanyLines.LineGUID,         SUM(CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN 0 ELSE tblFin_InvoiceDetails.AmtBilled END) AS Premium,         SUM(CASE WHEN tblFin_PolicyCharges.ChargeID = 'TERR' THEN tblFin_InvoiceDetails.AmtBilled ELSE 0 END) AS Terrorism       FROM tblFin_Invoices       INNER JOIN tblFin_InvoiceDetails ON tblFin_Invoices.InvoiceNum = tblFin_InvoiceDetails.InvoiceNum       INNER JOIN tblFin_PolicyCharges ON tblFin_InvoiceDetails.ChargeCode = tblFin_PolicyCharges.ChargeCode       INNER JOIN tblCompanyLines ON tblFin_InvoiceDetails.CompanyLineGuid = tblCompanyLines.CompanyLineGUID       WHERE tblFin_Invoices.QuoteID = tblQuotes.QuoteID       AND tblFin_Invoices.Failed = 0       GROUP BY tblCompanyLines.LineGUID      ) AS PremiumTable   WHERE EXISTS(SELECT 1 FROM #WorkingSplitTable W WHERE W.PolicyNumber = tblQuotes.PolicyNumber)     IF OBJECT_ID('tempdb..#NegativePremiumAdjustmentTable') IS NOT NULL   BEGIN      DROP TABLE #NegativePremiumAdjustmentTable     END     CREATE TABLE #NegativePremiumAdjustmentTable   (    DnlTrID uniqueidentifier,    PolicyNumber varchar(200),    LineGuid uniqueidentifier,    Premium money,    Terrorism money,    PremiumAdjustment money,    TerrorismAdjustment money,    CreditPremium money,    CreditTerrorismPremium money,    PendingPremium money,    PendingTerrorism money   )       INSERT INTO #NegativePremiumAdjustmentTable   SELECT    --DnlTrID uniqueidentifier,      W.DnlTrID,        --PolicyNumber varchar(200),      W.PolicyNumber,      --LineGuid uniqueidentifier,      W.LineGuid,      --Premium money,      W.SplitPremium + ISNULL(PriorPendingTransactions.SplitPremium, 0) + ISNULL(IMSTransactions.Premium, 0),      --Terrorism money,      W.SplitTerrorism + ISNULL(PriorPendingTransactions.SplitTerrorism, 0) + ISNULL(IMSTransactions.Terrorism, 0),      --PremiumAdjustment money,      0,      --TerrorismAdjustment money      0,      --CreditPremium money,      W.SplitPremium,      --CreditTerrorismPremium money,      W.SplitTerrorism,      --PendingPremium money,      ISNULL(PriorPendingTransactions.SplitPremium, 0),      --PendingTerrorism money      ISNULL(PriorPendingTransactions.SplitTerrorism, 0)     FROM #WorkingSplitTable W   --this would be if in the import we had prior transaction; not ones that were previous already imported   OUTER APPLY (       SELECT SUM(SubW.SplitPremium) AS SplitPremium,         SUM(SubW.SplitTerrorism) AS SplitTerrorism       FROM #WorkingSplitTable SubW       WHERE W.PolicyNumber = SubW.PolicyNumber       AND W.LineGuid = SubW.LineGuid       AND SubW.PolicyTransactionID < W.PolicyTransactionID      ) AS PriorPendingTransactions   --this are transactions that are previously imported   OUTER APPLY (       SELECT SUM(T.Premium) as Premium,         SUM(T.Terrorism) as Terrorism         --T.QuoteId       FROM #CurrentIMSPremiumByLine T       WHERE T.PolicyNumber = W.PolicyNumber       AND T.LineGuid = W.LineGuid      ) As IMSTransactions   WHERE (W.SplitPremium < 0    OR W.SplitTerrorism < 0)       DECLARE @NegativePremiumCursorDnlTrID uniqueidentifier   DECLARE @NegativePremiumCursorLineGuid uniqueidentifier   DECLARE @NegativePremiumCursorPremium money   DECLARE @NegativePremiumCursorTerrorism money     DECLARE NegativePremiumCursor CURSOR FAST_FORWARD   FOR SELECT N.DnlTrID, N.LineGuid, N.Premium, N.Terrorism    FROM #NegativePremiumAdjustmentTable N    WHERE (N.Premium < 0      OR N.Terrorism < 0)     OPEN NegativePremiumCursor     FETCH NEXT FROM NegativePremiumCursor    INTO @NegativePremiumCursorDnlTrID, @NegativePremiumCursorLineGuid, @NegativePremiumCursorPremium, @NegativePremiumCursorTerrorism     WHILE @@FETCH_STATUS = 0   BEGIN        DECLARE @AvailablePremiumLineCount int = 0    DECLARE @AvailableTerrorismLineCount int = 0    DECLARE @MinAvailablePremium money = 0    DECLARE @MinAvailableTerrorism money = 0      SELECT @AvailablePremiumLineCount = COUNT(1),      @MinAvailablePremium = MIN(N.Premium)    FROM #NegativePremiumAdjustmentTable N    WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID    AND N.LineGuid <> @NegativePremiumCursorLineGuid    AND N.Premium > 0    --SIMULATE LESSER MIN  --SET @MinAvailablePremium = 0.04  --SET @MinAvailableTerrorism = 0.03      SELECT @AvailableTerrorismLineCount = COUNT(1),      @MinAvailableTerrorism = MIN(N.Terrorism)    FROM #NegativePremiumAdjustmentTable N    WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID    AND N.LineGuid <> @NegativePremiumCursorLineGuid    AND N.Terrorism > 0      DECLARE @InitialNegativePremiumAdjustmentAmount money = CASE WHEN @AvailablePremiumLineCount = 0 THEN 0 ELSE (@NegativePremiumCursorPremium * 100) / @AvailablePremiumLineCount END * -1    DECLARE @InitialNegativeTerrorismAdjustmentAmount money = CASE WHEN @AvailableTerrorismLineCount = 0 THEN 0 ELSE (@NegativePremiumCursorTerrorism * 100) / @AvailableTerrorismLineCount END * -1      SET @InitialNegativePremiumAdjustmentAmount = CASE WHEN @InitialNegativePremiumAdjustmentAmount > 0 THEN FLOOR(@InitialNegativePremiumAdjustmentAmount) ELSE CEILING(@InitialNegativePremiumAdjustmentAmount) END / 100    SET @InitialNegativeTerrorismAdjustmentAmount = CASE WHEN @InitialNegativeTerrorismAdjustmentAmount > 0 THEN FLOOR(@InitialNegativeTerrorismAdjustmentAmount) ELSE CEILING(@InitialNegativeTerrorismAdjustmentAmount) END / 100      IF ABS(@InitialNegativePremiumAdjustmentAmount) <= ABS(@MinAvailablePremium)    BEGIN       UPDATE N SET PremiumAdjustment = @InitialNegativePremiumAdjustmentAmount * -1     FROM #NegativePremiumAdjustmentTable N     WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID     AND N.LineGuid <> @NegativePremiumCursorLineGuid     AND N.Premium > 0       UPDATE N SET PremiumAdjustment = @InitialNegativePremiumAdjustmentAmount * @AvailablePremiumLineCount     FROM #NegativePremiumAdjustmentTable N     WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID     AND N.LineGuid = @NegativePremiumCursorLineGuid     AND N.Premium < 0      END    ELSE IF ABS(@InitialNegativePremiumAdjustmentAmount) > ABS(@MinAvailablePremium)    BEGIN       UPDATE N SET PremiumAdjustment = @MinAvailablePremium * -1     FROM #NegativePremiumAdjustmentTable N     WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID     AND N.LineGuid <> @NegativePremiumCursorLineGuid     AND N.Premium > 0       UPDATE N SET PremiumAdjustment = @MinAvailablePremium * @AvailablePremiumLineCount     FROM #NegativePremiumAdjustmentTable N     WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID     AND N.LineGuid = @NegativePremiumCursorLineGuid     AND N.Premium < 0      END        IF ABS(@InitialNegativeTerrorismAdjustmentAmount) <= ABS(@MinAvailableTerrorism)    BEGIN       UPDATE N SET TerrorismAdjustment = @InitialNegativeTerrorismAdjustmentAmount * -1     FROM #NegativePremiumAdjustmentTable N     WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID     AND N.LineGuid <> @NegativePremiumCursorLineGuid     AND N.Terrorism > 0       UPDATE N SET TerrorismAdjustment = @InitialNegativeTerrorismAdjustmentAmount * @AvailableTerrorismLineCount     FROM #NegativePremiumAdjustmentTable N     WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID     AND N.LineGuid = @NegativePremiumCursorLineGuid     AND N.Terrorism < 0      END    ELSE IF ABS(@InitialNegativeTerrorismAdjustmentAmount) > ABS(@MinAvailableTerrorism)    BEGIN       UPDATE N SET TerrorismAdjustment = @MinAvailableTerrorism * -1     FROM #NegativePremiumAdjustmentTable N     WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID     AND N.LineGuid <> @NegativePremiumCursorLineGuid     AND N.Terrorism > 0       UPDATE N SET TerrorismAdjustment = @MinAvailableTerrorism * @AvailableTerrorismLineCount     FROM #NegativePremiumAdjustmentTable N     WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID     AND N.LineGuid = @NegativePremiumCursorLineGuid     AND N.Terrorism < 0      END        DECLARE @PremiumAdjustmentTally money = 0    DECLARE @TerrorismAdjustmentTally money = 0      DECLARE @PremiumAdjustmentAvailable money = 0    DECLARE @TerrorismAdjustmentAvailable money = 0      SELECT @PremiumAdjustmentAvailable = SUM(ISNULL(N.Premium, 0) + ISNULL(N.PremiumAdjustment, 0))    FROM #NegativePremiumAdjustmentTable N     WHERE N.DNlTrID = @NegativePremiumCursorDnlTrID    AND N.LineGuid <> @NegativePremiumCursorLineGuid    AND (ISNULL(N.Premium, 0) + ISNULL(N.PremiumAdjustment, 0)) > 0      SELECT @PremiumAdjustmentTally = SUM(ISNULL(N.PremiumAdjustment, 0))    FROM #NegativePremiumAdjustmentTable N     WHERE N.DNlTrID = @NegativePremiumCursorDnlTrID    AND N.LineGuid = @NegativePremiumCursorLineGuid        SELECT @TerrorismAdjustmentAvailable = SUM(ISNULL(N.Terrorism, 0) + ISNULL(N.TerrorismAdjustment, 0))     FROM #NegativePremiumAdjustmentTable N     WHERE N.DNlTrID = @NegativePremiumCursorDnlTrID    AND N.LineGuid <> @NegativePremiumCursorLineGuid    AND (ISNULL(N.Terrorism, 0) + ISNULL(N.TerrorismAdjustment, 0)) > 0      SELECT @TerrorismAdjustmentTally = SUM(ISNULL(N.TerrorismAdjustment, 0))     FROM #NegativePremiumAdjustmentTable N     WHERE N.DNlTrID = @NegativePremiumCursorDnlTrID    AND N.LineGuid = @NegativePremiumCursorLineGuid        WHILE (((@PremiumAdjustmentTally + @NegativePremiumCursorPremium <> 0) AND @PremiumAdjustmentAvailable <> 0)      OR ((@TerrorismAdjustmentTally + @NegativePremiumCursorTerrorism <> 0) AND @TerrorismAdjustmentAvailable <> 0))          BEGIN       IF ((@PremiumAdjustmentTally + @NegativePremiumCursorPremium <> 0) AND @PremiumAdjustmentAvailable <> 0)     BEGIN        DECLARE @NegativePremiumAdjustmentIncrementAmount money = 0      IF @PremiumAdjustmentTally + @NegativePremiumCursorPremium < 0      BEGIN         SET @NegativePremiumAdjustmentIncrementAmount = 0.01        END      ELSE IF @PremiumAdjustmentTally + @NegativePremiumCursorPremium > 0      BEGIN         SET @NegativePremiumAdjustmentIncrementAmount = -0.01        END        DECLARE @NegativePremiumAdjustmentIncrementLineGuid uniqueidentifier      SELECT TOP 1 @NegativePremiumAdjustmentIncrementLineGuid = N.LineGuid      FROM #NegativePremiumAdjustmentTable N      WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID      AND N.LineGuid <> @NegativePremiumCursorLineGuid      AND ISNULL(N.Premium, 0) + ISNULL(N.PremiumAdjustment, 0) <> 0      ORDER BY ABS(ISNULL(N.Premium, 0) + ISNULL(N.PremiumAdjustment, 0)) DESC        UPDATE N SET PremiumAdjustment = PremiumAdjustment + @NegativePremiumAdjustmentIncrementAmount      FROM #NegativePremiumAdjustmentTable N      WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID      AND N.LineGuid = @NegativePremiumCursorLineGuid--the line we are adding to        UPDATE N SET PremiumAdjustment = PremiumAdjustment - @NegativePremiumAdjustmentIncrementAmount      FROM #NegativePremiumAdjustmentTable N      WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID      AND N.LineGuid = @NegativePremiumAdjustmentIncrementLineGuid--the line we are taking from        SET @PremiumAdjustmentTally = @PremiumAdjustmentTally + @NegativePremiumAdjustmentIncrementAmount       END       IF ((@TerrorismAdjustmentTally + @NegativePremiumCursorTerrorism <> 0) AND @TerrorismAdjustmentAvailable <> 0)     BEGIN        DECLARE @NegativeTerrorismAdjustmentIncrementAmount money = 0      IF @TerrorismAdjustmentTally + @NegativePremiumCursorTerrorism < 0      BEGIN         SET @NegativeTerrorismAdjustmentIncrementAmount = 0.01        END      ELSE IF @TerrorismAdjustmentTally + @NegativePremiumCursorTerrorism > 0      BEGIN         SET @NegativeTerrorismAdjustmentIncrementAmount = -0.01        END        DECLARE @NegativeTerrorismAdjustmentIncrementLineGuid uniqueidentifier      SELECT TOP 1 @NegativeTerrorismAdjustmentIncrementLineGuid = N.LineGuid      FROM #NegativePremiumAdjustmentTable N      WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID      AND N.LineGuid <> @NegativePremiumCursorLineGuid      AND ISNULL(N.Terrorism, 0) + ISNULL(N.TerrorismAdjustment, 0) <> 0      ORDER BY ABS(ISNULL(N.Terrorism, 0) + ISNULL(N.TerrorismAdjustment, 0)) DESC        UPDATE N SET TerrorismAdjustment = TerrorismAdjustment + @NegativeTerrorismAdjustmentIncrementAmount      FROM #NegativePremiumAdjustmentTable N      WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID      AND N.LineGuid = @NegativePremiumCursorLineGuid--the line we are adding to        UPDATE N SET TerrorismAdjustment = TerrorismAdjustment - @NegativeTerrorismAdjustmentIncrementAmount      FROM #NegativePremiumAdjustmentTable N      WHERE N.DnlTrID = @NegativePremiumCursorDnlTrID      AND N.LineGuid = @NegativePremiumAdjustmentIncrementLineGuid--the line we are taking from        SET @TerrorismAdjustmentTally = @TerrorismAdjustmentTally + @NegativeTerrorismAdjustmentIncrementAmount       END    END      FETCH NEXT FROM NegativePremiumCursor     INTO @NegativePremiumCursorDnlTrID, @NegativePremiumCursorLineGuid, @NegativePremiumCursorPremium, @NegativePremiumCursorTerrorism   END     CLOSE NegativePremiumCursor   DEALLOCATE NegativePremiumCursor     --SELECT '#WorkingSplitTable2' AS WorkingSplitTable, * from #WorkingSplitTable order by PolicyNumber, DnlTrID, LineGuid     UPDATE W SET SplitPremium = SplitPremium + Adjust.PremiumAdjustment,      SplitTerrorism = SplitTerrorism + Adjust.TerrorismAdjustment   FROM #WorkingSplitTable W   INNER JOIN #NegativePremiumAdjustmentTable Adjust ON W.DnlTrID = Adjust.DnlTrID    AND W.LineGuid = Adjust.LineGuid              INSERT INTO ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit(ImportLogID, DnlTrID, LineGuid, LineCode, SplitPremium, SplitTerrorism, PremiumState, ParentId) --, ProgramId)      SELECT      --'test insert into ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit' as tablename,    --ImportLogID int,      @ImportLogID,      --DnlTrID uniqueidentifier,      W.DnlTrID,      --LineGuid uniqueidentifier,      W.LineGuid,      --LineCode int,      lstLines.LineID,      --SplitPremium money,      W.SplitPremium,      --SplitTerrorism money      W.SplitTerrorism,      --PremiumState      W.RiskState,      --ParentId      W.parentid      --Program Id      --programs.ProgramIdForLineGuid as ProgramId     FROM  #WorkingSplitTable W   INNER JOIN lstLines      ON W.LineGuid = lstLines.LineGUID   --left join @ProgramIds programs   --  on W.LineGuid = programs.LineGuid     --select '@sublines' as tablename, * from @sublines    --(3/15/24) the following will update the program ids based on the line guid to and line guid from  --this was subsequently modified to get the correct program code to be set for the main lines  --should probably look into a more concise way of updating this; perhaps setting the program id in the tables above instead of waiting until here  --(3/21/24) we should no longer need this since we have added column XOLProgramCodeID to the spreadsheet   /*   declare @ProgramIds table   (    DnlTrId uniqueidentifier,    LineGuid uniqueidentifier,    parentid int,    UseAlternativeProgramId bit,    ProgramIdForLineGuid int   )      insert into @ProgramIds        select     distinct      dt.DnlTrId,     dt.LineGuid,     --programcodes.ProgramID,     --dt.SetProgramId,     dt.parentid,     dt.UseAlternativeProgramId,     (      case        when dt.UseAlternativeProgramId != 1 then        dt.SetProgramId       else        programcodes.ProgramID       end     ) as ProgramIdForLineGuid     --programcodes.*    from     (         select       distinct        --Ascot_tblCaptivePremiumSplits.LineGUIDFrom,       WCCaptives.DnlTrId,       WCCaptives.programid as SetProgramId,       --pcs.parentid, --this is the main or default program id       Progam.ParentID,       --splits.ParentID,       --PremiumSplit.*--,       PremiumSplit.LineGuid,       iif(splits.ParentID is null, 1, 0) as UseAlternativeProgramId        --'ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit' as tablename, *      from ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit PremiumSplit     join ASCOT_AL3ImportPolicy_WCCaptives WCCaptives      on PremiumSplit.ImportLogID = WCCaptives.ImportLogID      and PremiumSplit.DnlTrID = WCCaptives.DnlTrId     join Ascot_ParentCaptiveProgamsCodes pcs      on WCCaptives.ProgramID = pcs.ProgramID     left join Ascot_tblCaptivePremiumSplits splits      on pcs.ParentID = splits.ParentID      and PremiumSplit.LineGuid = splits.LineGUIDFrom     cross apply      (       select top 1 parentid        from Ascot_ParentCaptiveProgamsCodes        where Ascot_ParentCaptiveProgamsCodes.ProgramID = pcs.ProgramID      ) as Progam     where WCCaptives.importlogid = @ImportLogID        ) as dt    left join Ascot_ParentCaptiveProgamsCodes programcodes      on dt.ParentID = programcodes.ParentID      and dt.SetProgramId != programcodes.ProgramID         --select '@ProgramIds' as tablename, * from @ProgramIds     --select * from Ascot_tblCaptivePremiumSplits     --set program code for the main lines   update ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit   set  ProgramId = importdata.ProgramID   from ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit   join #ImportedData importdata    on ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.DnlTrID = importdata.DnlTrID      --set program code for alternative lines of business (lines to)   update ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit   set  ProgramId = pids.ProgramIdForLineGuid   from ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit   join @ProgramIds pids    on ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.LineGuid = pids.LineGuid    and ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.DnlTrID = pids.DnlTrId    and pids.UseAlternativeProgramId = 1 --update line guid to use the program code from the alternative parent line of business  */       --select 'ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit' as tablename, * from ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit where importlogid = @ImportLogID         --SELECT '#ImportedData' AS ImportedData, * FROM #ImportedData   --SELECT '#PremiumSplitTable' As PremiumSplitTable, * from #PremiumSplitTable   --SELECT '#WorkingSplitTable3' AS WorkingSplitTable, * from #WorkingSplitTable order by PolicyNumber, DnlTrID, LineGuid   --SELECT '#SplitPremiumAdjustmentTable' AS SplitPremiumAdjustmentTable, * from #SplitPremiumAdjustmentTable   --SELECT '#CurrentIMSPremiumByLine' AS CurrentIMSPremiumByLine, * FROM #CurrentIMSPremiumByLine   --SELECT '#NegativePremiumAdjustmentTable' AS NegativePremiumAdjustmentTable, * from #NegativePremiumAdjustmentTable     DROP TABLE #ImportedData   DROP TABLE #PremiumSplitTable   DROP TABLE #WorkingSplitTable   DROP TABLE #SplitPremiumAdjustmentTable   DROP TABLE #CurrentIMSPremiumByLine   DROP TABLE #NegativePremiumAdjustmentTable        END
Ascot_AL3TransferData_WCCaptives	CREATE PROCEDURE [dbo].[Ascot_AL3TransferData_WCCaptives]   @ImportLogID int  AS  BEGIN       --used for debugging    --select 'in Ascot_AL3TransferData_WCCaptives_Update' as testingsprocs    --declare @TransactionId as uniqueidentifier    --set @TransactionId = NEWID()    --select concat('Id= ', @TransactionId) as testingsprocs2           INSERT INTO ASCOT_AL3PolicyMasterTable_V2   (    [ProgramID],    [GroupNumber],    [PolicyNumber],    [PolicyEffectiveDate],    [PolicyExpirationDate],    [PolicyIndicator],    [TransactionEffectiveDate] ,    [ExpringPolicyNumber],    [ClaimsMadePolicyIndicator],    [PriorActions],    [RetroactiveDate],    [DiscoveryDate],    [InsuredName],    [DBAName] ,    [InsuredAddress],    [InsuredCity] ,    [InsuredState],    [InsuredZip],    [InsuredCounty],    [RiskLocationIndicator],    [SICCode],    [TypeOfPolicy],    [SystemDate],    [AccountingDate],    [SubmissionDate],    [PremiumAmount],    [PremiumState],    [CompanyCode],    [CompanyContactCode],    [ProducerCode],    [ProducerContactCode],    [QuotingOfficeLocationCode],    [IssuingOfficeLocationCode],    [PolicyTransactionID],    [LineCode],    [StateOfIssuance],    [AccountNumber],    [RewriteOfAccountNumber],    [RenewalOfAccountNumber],    [InsuredID] ,    [DateIssued],    [Error],    [ErrorTime] ,    [DateProcessed],    [ErrorMessage],    [ProcessedBy] ,    [Note],    [DnlTrId],    [DocumentImage],    [DocumentStoreGuid],    [DocStoreFileAssociation],    [DocStoreFileName],    [DocStoreCompressed],    [DocStoreAssociatedEntityType],    [DocStoreAssociatedEntityName],    [DocStoreAssociatedEntityFormName],    [DocStoreContext],    [DocStoreOriginalFileSize],    [CreatedQuoteID],    [BrokerCommissionPercent],    [TerrorismPremium],    [NumInstallments],    [QuoteStatusReasonID],    [EndorsementComment],    [ImportLogID],    [BillDate],    [EndorsementType],    [BusinessTypeID] ,    [InsuredFirstName],    [InsuredLastName],    [InsuredAddress2] ,    [producerComm],    [companyComm]   )        SELECT          --ProgramID      ISNULL(ASCOT_AL3ImportPolicy_WCCaptives.ProgramID, 765),      --GroupNumber      NULL,      --PolicyNumber      ASCOT_AL3ImportPolicy_WCCaptives.PolicyNo,      --PolicyEffectiveDate      ASCOT_AL3ImportPolicy_WCCaptives.PolicyEffDate,                --PolicyExpirationDate          ASCOT_AL3ImportPolicy_WCCaptives.PolicyExpDate,            --PolicyIndicator           CASE ASCOT_AL3ImportPolicy_WCCaptives.TransType       when 'Cancelled' THEN 'C'--cancellation                 when 'Cancellation' THEN 'C'--cancellation       when 'New' THEN 'N'--new business            when 'Endorsement' THEN 'E'--endorsement       when 'Reinstatement' Then 'W' --Reinstatement       when 'Renewal' Then 'R' -- Renewal       ELSE ''      END,      --TransactionEffectiveDate      ASCOT_AL3ImportPolicy_WCCaptives.TransEffDate,         --ExpiringPolicyNumber      NULL,      --ClaimsMadePolicyIndicator      NULL,      --PriorActions      NULL,      --RetroactiveDate      NULL,      --DiscoveryDate      NULL,      --InsuredName         CASE WHEN ISNULL(ASCOT_AL3ImportPolicy_WCCaptives.InsuredName, '') <> ''       THEN ASCOT_AL3ImportPolicy_WCCaptives.InsuredName           END,    --DBAName      NULL,      --InsuredAddress          ASCOT_AL3ImportPolicy_WCCaptives.InsuredAddress1,      --InsuredCity          ASCOT_AL3ImportPolicy_WCCaptives.InsuredCity,      --InsuredState              ASCOT_AL3ImportPolicy_WCCaptives.InsuredState,            --InsuredZip          ASCOT_AL3ImportPolicy_WCCaptives.InsuredZip,      --InsuredCounty      NULL,            --RiskLocationindicator      NULL,      --SICCode      NULL,      --TypeOfPolicy      NULL,      --SystemDate      CONVERT(varchar(11), GETDATE(), 101),      --AccountingDate      CONVERT(varchar(11), GETDATE(), 101),      --SubmissionDate      CONVERT(varchar(11), GETDATE(), 101),      --PremiumAmount           /* will have to aggregate risk states      CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_WCCaptives.GrossPremium) = 1                      THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_WCCaptives.GrossPremium), 2)                      ELSE 0                  END,    */      --(1/19/23) aggregate the risk state premium      RiskState.GrossPremium as PremiumAmount,      --PremiumState       --(1/19/23) we no longer have the risk state in ASCOT_AL3ImportPolicy_WCCaptives      --risk state are child nodes of the new premium node      --ASCOT_AL3ImportPolicy_WCCaptives.RiskState,       --states.[State],      ASCOT_AL3ImportPolicy_WCCaptives.InsuredState,      --CompanyCode      /*      CASE WHEN ASCOT_AL3ImportPolicy_WCCaptives.RiskState = 'RI' THEN 1      ELSE       2      END,      */     --[] change this based on the company code      /*       --If the CompanyCode is AIC then the BusinessType needs to be ‘Direct’. Otherwise the BusinessType needs to be ‘Assumed’       AIC is direct and AISC would assumed       ID BusinessType; greyhawl_tblquotes       1 Direct       2 Assumed          --use this for the company code        CompanyLocationCode LocationName       2 Ascot Insurance Company       1 Ascot Specialty Insurance Company         select * from tblcompanylocations order by locationname           */        --(2/27/24) this is no longer being used      /*       CASE WHEN ASCOT_AL3ImportPolicy_WCCaptives.InsuredState = 'RI' THEN 1       ELSE        2       END,      */        --use this for the company code        --CompanyLocationCode LocationName       --2      Ascot Insurance Company       --1      Ascot Specialty Insurance Company      /*      (       case         when (ASCOT_AL3ImportPolicy_WCCaptives.CompanyCode != 'AIC') then         1        else         2        end      ) as CompanyCode,      */      --(3/14/24) email from Jonathan The company that we create the policy against in IMS should actually not be driven by the       --WritingCompany column in the imported data. It should instead always be set to Ascot Insurance Company except when the       --risk state is RI. When the RiskState in the Premium tab is RI then the company the policy gets created against in IMS       --should be Ascot Specialty Insurance Company. When there are multiple states on the same policy then use the one that has       --the most premium on it.      --need to update this to use the risk state not the insured state      /* This was the original code that was in here before the subsequent changes;      (       CASE         WHEN ASCOT_AL3ImportPolicy_WCCaptives.InsuredState != 'RI' THEN          2 --Ascot Insurance Company       ELSE         1 --Ascot Specialty Insurance Company       END      ) as CompanyCode,      */      --for debugging      --RiskState.GrossPremium,      --RiskStateRI.GrossPremium,            (       case         when RiskStateRI.GrossPremium is not null          and RiskStateRI.GrossPremium != 0.0 then          (          case           when ((RiskState.GrossPremium / 2) > RiskStateRI.GrossPremium) then             2 --Ascot Insurance Company           else            1           end         )        else         2 --Ascot Insurance Company        end      ) as CompanyCode,      --CompanyContactCode      0,      --ProducerCode         --1696, --hardcode for now, not sure if we need to be dynamic            --tblProducerLocations.ProducerLocationID as ProducerCode,      ParentCaptiveProducer.ProducerLocationID as ProducerCode,      --ProducerContactCode      0,      --QuotingOfficeLocationCode      0,      --IssuingOfficeLocationCode      0,      --PolicyTransactionID      ASCOT_AL3ImportPolicy_WCCaptives.ID,      --LineCode      --this will have to be checked      --353,      361, --Captive - Worker's Compensation      --StateOfIssuance      --(1/17/24) risk state is now a child node of policy. There is no flag to tell us what risk state to use       --lets use insured state       --ASCOT_AL3ImportPolicy_WCCaptives.RiskState,       ASCOT_AL3ImportPolicy_WCCaptives.InsuredState as StateOfIssuance,      --AccountNumber      ASCOT_AL3ImportPolicy_WCCaptives.PolicyNo AS AccountNumber,        --RewriteOfAccountNumber          NULL,       --RenewalOfAccountNumber          NULL,      --InsuredID          ASCOT_AL3ImportPolicy_WCCaptives.PolicyNo,      --DateIssued           null,      --Error      NULL,      --ErrorTime       NULL,      --DateProcessed      NULL,      --ErrorMessage      NULL,      --ProcessedBy      NULL,      --Note      NULL,      --DnlTrId      NEWID(),      --@TransactionId as DnlTrId,      --DocumentImage      NULL,      --DocumentStoreGuid      NULL,      --DocStoreFileAssociation      NULL,      --DocStoreFileName      NULL,      --DocStoreCompressed      NULL,      --DocStoreAssociatedEntityType      NULL,      --DocStoreAssociatedEntityName      NULL,      --DocStoreAssociatedEntityFormName      NULL,      --DocStoreContext      NULL,      --DocStoreOriginalFileSize      NULL,      --CreatedQuoteID      NULL,      --BrokerCommissionPercent      NULL,    --TerrorismPremium            /* will have to aggregate risk states      CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_WCCaptives.TerrorismPremium) = 1        THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_WCCaptives.TerrorismPremium), 2)       ELSE 0      END,     */      --(1/19/23) aggregate the risk state terrorism premium      RiskState.TerrorismPremium,      --NumInstallments          NULL,      --QuoteStatusReasonID      NULL,      --EndorsementComment      NULL,      --ImportLogID      ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID,      --BillDate      NULL,    --EndodrsementType      NULL,      --BusinessTypeId      --If the CompanyCode is AIC then the BusinessType needs to be ‘Direct’. Otherwise the BusinessType needs to be ‘Assumed’      /*       AIC is direct and AISC would assumed       ID BusinessType; greyhawl_tblquotes       1 Direct       2 Assumed       */        --select * from Ascot_lstBusinessType       --ID BusinessType       --1  Direct       --2  Assumed        --(3/14/24) When it comes to the Direct/Assumed determination, there is a small change here too. Instead of looking for the value       --‘AIC’ when determining if the business type should be Direct, look for the value ‘Ascot’ instead.      /*      (       case         when (ASCOT_AL3ImportPolicy_WCCaptives.CompanyCode != 'AIC') then         (          select              ID           from Ascot_lstBusinessType           where BusinessType = 'Assumed'         )        else         (          select              ID           from Ascot_lstBusinessType           where BusinessType = 'Direct'         )        end      ) as BusinessTypeId,      */      (       case         when (ASCOT_AL3ImportPolicy_WCCaptives.CompanyCode != 'Ascot') then         (          select              ID           from Ascot_lstBusinessType           where BusinessType = 'Assumed'         )        else         (          select              ID           from Ascot_lstBusinessType           where BusinessType = 'Direct'         )        end      ) as BusinessTypeId,          --InusredFirstName      NULL,       --InusredLasttName      NULL,       --InsuredAddress2      ASCOT_AL3ImportPolicy_WCCaptives.InsuredAddress2,        --ProducerComm      --ASCOT_AL3ImportPolicy_WCCaptives.ProducerComm) as ProducerComm,       Ascot_tblParentCaptive.ProducerCommission,      --companyComm      NULL--, --companyComm,               FROM  ASCOT_AL3ImportPolicy_WCCaptives   --join  ASCOT_AL3ImportPolicy_WCCaptives_RiskState states   -- on  ASCOT_AL3ImportPolicy_WCCaptives.importlogid = states.importlogid   cross apply      (       select          sum(try_parse(isnull(rs.GrossPremium, 0.0) as money)) as GrossPremium,          sum(try_parse(isnull(rs.TerrorismPremium, 0.0) as money)) as TerrorismPremium       from ASCOT_AL3ImportPolicy_WCCaptives_RiskState rs       where rs.ImportLogID = ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID       --and rs.PolicyID = ASCOT_AL3ImportPolicy_WCCaptives.ID       and rs.PolicyNo = ASCOT_AL3ImportPolicy_WCCaptives.PolicyNo        and rs.EndorsementNumber = ASCOT_AL3ImportPolicy_WCCaptives.EndorsementNumber       ) as RiskState   cross apply      (       select          isnull(sum(try_parse(isnull(rs.GrossPremium, 0.0) as money)), 0.0) as GrossPremium,          isnull(sum(try_parse(isnull(rs.TerrorismPremium, 0.0) as money)), 0.0) as TerrorismPremium       from ASCOT_AL3ImportPolicy_WCCaptives_RiskState rs       where rs.ImportLogID = ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID       --and rs.PolicyID = ASCOT_AL3ImportPolicy_WCCaptives.ID       and rs.PolicyNo = ASCOT_AL3ImportPolicy_WCCaptives.PolicyNo        and rs.EndorsementNumber = ASCOT_AL3ImportPolicy_WCCaptives.EndorsementNumber        and rs.State = 'RI'      ) as RiskStateRI   --no longer am I using the this for anything will be driven by Ascot_tblParentCaptive   --join  tblProducerLocations   -- on  ASCOT_AL3ImportPolicy_WCCaptives.ProducerLocation = tblProducerLocations.ProducerLocationGUID   join  Ascot_ParentCaptiveProgamsCodes    on  ASCOT_AL3ImportPolicy_WCCaptives.ProgramID = Ascot_ParentCaptiveProgamsCodes.ProgramID   --this will change based on the program id   join  Ascot_tblParentCaptive    on  Ascot_tblParentCaptive.ID = Ascot_ParentCaptiveProgamsCodes.ParentID   join  tblProducerLocations ParentCaptiveProducer    on  Ascot_tblParentCaptive.ProducerLocationGuid = ParentCaptiveProducer.ProducerLocationGUID   WHERE  ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID = @ImportLogID     --DnlTrId has been created so now set it in the data tables     --select top 10 * from ASCOT_AL3ImportPolicy_WCCaptives   --select * from Ascot_tblParentCaptive     --select 'FINISHED in Ascot_AL3TransferData_WCCaptives_Update' as testingsprocs         UPDATE ASCOT_AL3ImportPolicy_WCCaptives    SET DnlTrId = AL3MasterTable.DnlTrId   FROM ASCOT_AL3ImportPolicy_WCCaptives   CROSS APPLY (       SELECT TOP 1 ASCOT_AL3PolicyMasterTable_V2.DnlTrId       FROM ASCOT_AL3PolicyMasterTable_V2       WHERE ASCOT_AL3PolicyMasterTable_V2.PolicyTransactionID = ASCOT_AL3ImportPolicy_WCCaptives.ID       AND ASCOT_AL3PolicyMasterTable_V2.ImportLogID = ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID       )AS AL3MasterTable   WHERE ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID = @ImportLogID            exec Ascot_AL3PremiumSplitByLOB_WCCaptives @ImportLogID     --for debugging   /*   select       'ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit' as tablename,       *     from ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit    where ImportLogID = 35352    */     --INSERT any split premium transactions first   INSERT INTO Ascot_AL3QuoteDetailTable_v2(DnlTrId, CompanyLocationCode, LineCode, StateID, Premium, Terrorism, ImportLogID, ProgramId)      SELECT      --'Insert into Ascot_AL3QuoteDetailTable_v2' as tablename,      --DnlTrId      ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.DnlTrId,      --CompanyLocationCode,           CASE        WHEN ASCOT_AL3ImportPolicy_WCCaptives.InsuredState = 'RI' THEN         1      ELSE        2      END,      --LineCode,       ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.LineCode,       --StateID,           --ASCOT_AL3ImportPolicy_WCCaptives.RiskState,      --ASCOT_AL3ImportPolicy_WCCaptives_RiskState.[State] as StateID,      ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.PremiumState as StateID,      --Premium,         ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.SplitPremium), 2),       --Terrorism,       ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.SplitTerrorism), 2),       --ImportLogID      ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.ImportLogID,      --ProgramId      --ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.ProgramId      (       case        when (sLineFrom.lineguidfrom is not null) then          ASCOT_AL3ImportPolicy_WCCaptives.ProgramId        else         ASCOT_AL3ImportPolicy_WCCaptives.XOLProgramCodeID        end      ) as ProgramId--,        /*      ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.parentid        , sLineFrom.*      , ll.*      */   FROM  ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit   INNER JOIN ASCOT_AL3ImportPolicy_WCCaptives      ON ASCOT_AL3ImportPolicy_WCCaptives.DnlTrId = ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.DnlTrID   join  lstlines ll     on ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.LineCode = ll.lineid   left join Ascot_tblCaptivePremiumSplits sLineFrom     on ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.parentid = sLineFrom.parentid       and ll.lineguid = sLineFrom.lineguidfrom    WHERE  ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit.ImportLogID = @ImportLogID      /*  LineID LineGUID        LineName  336  E8185BA5-0EC3-41EE-9945-298F1D17A685 Captive - Worker's Compensation  337  20BA4B89-670D-474A-B0F4-9ACEECC9103B Captive - Primary Worker's Compensation  338  522722FD-2644-44B1-A4CC-DBD68CB3798E Captive - XOL Worker's Compensation  */     --Need to create a split for fees   --(1/19/24) need to get the main child line for package line of business   --for example package is Captive - Worker's Compensation   --the main line for this is Captive - Primary Worker's Compensation   --this will be used as the linefrom and also to get the lineto   declare @sublines as table   (    importlogid int,    ProgramID int,    ParentId int,    lineId int,     linename varchar(500),    lineguid uniqueidentifier   )     insert into @sublines     select     distinct      @importlogid,     --PolicyNumber,     dt.ProgramID,     --dt.LineName,     --dt.lineid,     cpc.ParentId,     lstlines.LineID,     lstlines.LineName,     lstlines.lineguid    from         (     select        ASCOT_AL3PolicyMasterTable_V2.PolicyNumber,        ll.LineName,        ll.lineid,        ASCOT_AL3PolicyMasterTable_V2.ProgramID,         tblcompanylines.CompanyLineGUID      from ASCOT_AL3PolicyMasterTable_V2      join lstlines ll       on ASCOT_AL3PolicyMasterTable_V2.linecode = ll.lineid      join tblcompanylines       on ll.lineguid = tblcompanylines.LineGUID       and ASCOT_AL3PolicyMasterTable_V2.insuredState = tblcompanylines.StateId      where         ASCOT_AL3PolicyMasterTable_V2.ImportLogID = @importlogid    ) as dt        join tblcompanylines     on dt.CompanyLineGUID = tblcompanylines.ParentCompanyLineGUID     join lstlines      on tblcompanylines.LineGUID = lstlines.LineGUID      join Ascot_ParentCaptiveProgamsCodes cpc     on dt.ProgramID = cpc.ProgramID    join Ascot_tblCaptivePremiumSplits splits     on cpc.ParentId = splits.ParentID     and lstlines.lineguid = splits.LineGUIDFrom            --select '@sublines' as tablename, * from @sublines     INSERT INTO Ascot_AL3FeesTable(ImportLogID, DnlTrID, CompanyLocationCode, LineID, StateID, OfficeID, ChargeCode, FeeAmount)   SELECT      --'Ascot_AL3FeesTable' as tablename,      --ImportLogID int,      Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.ImportLogID,      --DnlTrID uniqueidentifier,      ASCOT_AL3ImportPolicy_WCCaptives.DnlTrID,      --CompanyLocationCode int,      ASCOT_AL3PolicyMasterTable_V2.CompanyCode,      --LineID int,      --this would be the package line and would not work      --fee needs to be setup for the main child line of business      --ASCOT_AL3PolicyMasterTable_V2.LineCode,      mainChildLine.lineId,      --StateID varchar(20),      --ASCOT_AL3PolicyMasterTable_V2.PremiumState,      Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.RiskState,      --OfficeID int,      NULL,--will update in the NBS/RWL/ENDORSE proc when looking up configuration         --ChargeCode int,      Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.ChargeCode,      --FeeAmount money      Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.Amount             FROM  Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives      INNER JOIN ASCOT_AL3ImportPolicy_WCCaptives      ON ASCOT_AL3ImportPolicy_WCCaptives.PolicyNo = Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.PolicyNo    and  ASCOT_AL3ImportPolicy_WCCaptives.EndorsementNumber = Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.EndorsementNumber    AND  ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID = Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.ImportLogID      INNER JOIN ASCOT_AL3PolicyMasterTable_V2      --ON ASCOT_AL3PolicyMasterTable_V2.PolicyNumber = Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.PolicyNo    --and  ASCOT_AL3PolicyMasterTable_V2.Endorse    --AND  ASCOT_AL3PolicyMasterTable_V2.ImportLogID = Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.ImportLogID    --AND       ON ASCOT_AL3PolicyMasterTable_V2.DnlTrID = ASCOT_AL3ImportPolicy_WCCaptives.DnlTrID   inner join @sublines mainChildLine     on ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID = mainChildLine.importlogid     and ASCOT_AL3ImportPolicy_WCCaptives.ProgramID = mainChildLine.ProgramID     WHERE  Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.ImportLogID = @ImportLogID   AND   ISNULL(Ascot_AL3ImportTaxesFeesSurcharges_WCCaptives.Amount, 0) <> 0         --select * from ASCOT_AL3ImportPolicy_WCCaptives_PremiumSplit      /* not sure if this is valid; if it is we need to update this query; used insured state and fix premium   --INSERT any non-split premiums, if any   INSERT INTO Ascot_AL3QuoteDetailTable_v2(DnlTrId, CompanyLocationCode, LineCode, StateID, Premium, Terrorism, ImportLogID)     SELECT    --DnlTrId      ASCOT_AL3ImportPolicy_WCCaptives.DnlTrId,      --CompanyLocationCode,           CASE WHEN ASCOT_AL3ImportPolicy_WCCaptives.InsuredState = 'RI' THEN 1      ELSE       2      END,      --LineCode,       18,      --StateID,           ASCOT_AL3ImportPolicy_WCCaptives.RiskState,      --Premium,         CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_WCCaptives.GrossPremium) = 1                      THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_WCCaptives.GrossPremium), 2)                      ELSE 0                  END,         --Terrorism,      CASE WHEN ISNUMERIC(ASCOT_AL3ImportPolicy_WCCaptives.TerrorismPremium) = 1                       THEN ROUND(CONVERT(money, ASCOT_AL3ImportPolicy_WCCaptives.TerrorismPremium), 2)                      ELSE 0                  END,      --ImportLogID      ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID       FROM  ASCOT_AL3ImportPolicy_WCCaptives   WHERE  ASCOT_AL3ImportPolicy_WCCaptives.ImportLogID = @ImportLogID   AND NOT EXISTS(SELECT 1 FROM Ascot_AL3QuoteDetailTable_v2 WHERE Ascot_AL3QuoteDetailTable_v2.DnlTrID = ASCOT_AL3ImportPolicy_WCCaptives.DnlTrID)  */         END  
Ascot_ImportAL3_NBS_DynamicProducer_Captive	CREATE PROCEDURE [dbo].[Ascot_ImportAL3_NBS_DynamicProducer_Captive]   @ImportLogID int  AS  BEGIN     DECLARE @ImportSource int   SELECT @ImportSource = ImportSource   FROM Ascot_AL3ImportLog   WHERE ID = @ImportLogID      DECLARE @RenewalOfControlNum INT = NULL  -- needed to be set for renewals   DECLARE @RenewalOfQuoteGuid UNIQUEIDENTIFIER = NULL -- needed to be set for renewals   DECLARE @RenewalOfQuoteID INT = NULL -- needed to obtain BOR producer contact on renewal   DECLARE @ImportVersion int = 0   DECLARE @PreBindNewBusinessRenewalProcessProcedure varchar(200) = ''   DECLARE @SQL_@PreBindExecute NVARCHAR(200)   DECLARE @ImportSouceName VARCHAR(200) = ''     SELECT  @ImportVersion = ImportVersion from ASCOT_AL3ImportHeader where ImportLogID = @ImportLogID     SELECT  @ImportSouceName = ISNULL(sourcename,'Policy Import') from ASCOT_lstAL3ImportSources where ID = @ImportVersion       IF OBJECT_ID('tempdb..#PolsToCreate') IS NOT NULL BEGIN DROP TABLE #PolsToCreate END   SELECT   t.*,      cl.CompanyLocationGuid,      Cl.CompanyLineGUID,      l.LineGuid,      Ascot_tblParentCaptive.UnderwriterGuid   INTO  #PolsToCreate   FROM  Ascot_AL3PolicyMasterTable_v2 t   INNER JOIN lstLines l ON l.LineID=t.LineCode   Inner Join  tblCompanyLocations on tblCompanyLocations.CompanyLocationCode = t.CompanyCode   Inner Join  tblCompanyLines CL on CL.LineGUID = l.LineGUID and CL.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID and t.StateOfIssuance = CL.StateID and cl.ParentCompanyLineGUID IS NULL   --added to get user guid    join Ascot_ParentCaptiveProgamsCodes    on  t.ProgramID = Ascot_ParentCaptiveProgamsCodes.ProgramID   --this will change based on the program id    join Ascot_tblParentCaptive    on  Ascot_tblParentCaptive.ID = Ascot_ParentCaptiveProgamsCodes.ParentID      WHERE  ImportLogID = @ImportLogID   AND   isNull(Error,0)=0   AND   DateProcessed IS NULL   AND   PolicyIndicator IN ('N', 'R')   AND   ISNULL(RewriteOfAccountNumber, '0') = '0'       ORDER BY PolicyTransactionID       --select '#PolsToCreate' as tablename, * from #PolsToCreate       --double check   IF OBJECT_ID('tempdb..#db') IS NOT NULL BEGIN DROP TABLE #db END     SELECT  t.DnlTrId,      CASE WHEN PremiumState IS NULL       THEN 'PremiumState is null'       WHEN CompanyCode IS NULL       THEN 'CompanyCode is null'       WHEN LineCode IS NULL       THEN 'LineCode is null'       WHEN ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0       THEN 'PremiumAmount + TerrorismPremium is 0'       WHEN PolicyNumber IS NULL       THEN 'PolicyNumber is null'       WHEN Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode)       THEN 'Duplicate policy number found'       WHEN (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID IS NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))       THEN 'Policy Transaction previously imported'       ELSE NULL      END As [Message]   INTO  #db   FROM  #PolsToCreate t   WHERE  PremiumState IS NULL      OR CompanyCode IS NULL      OR LineCode IS NULL      OR ISNULL(PremiumAmount, 0) + ISNULL(TerrorismPremium, 0)=0      OR PolicyNumber IS NULL      OR (Exists (SELECT PolicyNumber FROM tblQuotes q WHERE q.PolicyNumber = t.PolicyNumber)        AND EXISTS(SELECT *            FROM tblCompanyLines           INNER JOIN tblCompanyLocations ON tblCompanyLines.CompanyLocationGUID = tblCompanyLocations.CompanyLocationGUID           INNER JOIN lstLines ON tblCompanyLines.LineGUID = lstLines.LineGUID           WHERE tblCompanyLines.EnforceUniquePolicyNumbers = 1           AND tblCompanyLines.StateID = t.PremiumState           AND lstLines.LineID = t.LineCode           AND tblCompanyLocations.CompanyLocationCode = t.CompanyCode))      OR (EXISTS(          SELECT 1           FROM Ascot_AL3PolicyMasterTable_v2 SubT          join ASCOT_AL3ImportLog l on l.ID = SubT.ImportLogID          WHERE SubT.AccountNumber = t.AccountNumber          AND SubT.UniqueTransactionID = t.UniqueTransactionID -- TFS 91066  Added logic to use new column on Ascot_AL3PolicyMasterTable_v2 to identify duplicate transactions           AND (SubT.DateProcessed IS NOT NULL )                  AND SubT.DnlTrId <> T.DnlTrId          and l.ImportSource = @ImportSource          and t.UniqueTransactionID is NOT NULL--  TFS 91066 Use this logic only for feeds that populate the Ascot_AL3PolicyMasterTable_v2.@UniqueTransactionID, otherwise ignore thsi check.         ))      UPDATE Ascot_AL3PolicyMasterTable_v2   SET  Error=1,     ErrorMessage=ISNULL(d.[Message], 'Failed double check'),     ErrorTime=getdate()   FROM Ascot_AL3PolicyMasterTable_v2   INNER JOIN #db d ON Ascot_AL3PolicyMasterTable_v2.DnlTrId = d.DnlTrId       DELETE FROM #PolsToCreate    WHERE  DnlTrId IN (SELECT DnlTrId FROM #db)        IF OBJECT_ID('tempdb..#PolsToCreateDetails') IS NOT NULL   BEGIN      DROP TABLE #PolsToCreateDetails     END        CREATE TABLE #PolsToCreateDetails   (    ID int,    DnlTrId uniqueidentifier,    CompanyLocationCode int,    LineCode int,    StateID varchar(20),    Premium money,    Terrorism money,    CompanyLocationGuid uniqueidentifier,    CompanyLineGuid uniqueidentifier,    LineGuid uniqueidentifier,    CreatedQuoteOptionID int,    CreatedQuoteOptionGuid uniqueidentifier,    CreatedQuoteDetailID int,    ProgramId int   )               INSERT INTO #PolsToCreateDetails   SELECT    --ID int,      Ascot_AL3QuoteDetailTable_V2.ID,      --DnlTrId uniqueidentifier,      Ascot_AL3QuoteDetailTable_V2.DnlTrId,      --CompanyLocationCode int,      Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode,      --LineCode int,      Ascot_AL3QuoteDetailTable_V2.LineCode,      --StateID varchar(20),      Ascot_AL3QuoteDetailTable_V2.StateID,      --Premium money,      Ascot_AL3QuoteDetailTable_V2.Premium,      --Terrorism money,      Ascot_AL3QuoteDetailTable_V2.Terrorism,      --CompanyLocationGuid uniqueidentifier,      tblCompanyLocations.CompanyLocationGUID,      --CompanyLineGuid uniqueidentifier      tblCompanyLines.CompanyLineGUID,      --LineGuid uniqueidentifier,      lstLines.LineGUID,      --CreatedQuoteOptionID int,      NULL,      --CreatedQuoteOptionGuid uniqueidentifier,      NULL,      --CreatedQuoteDetailID int,      NULL,      --Program ID      Ascot_AL3QuoteDetailTable_V2.ProgramId     FROM #PolsToCreate P   INNER JOIN Ascot_AL3QuoteDetailTable_V2 ON P.DnlTrId = Ascot_AL3QuoteDetailTable_V2.DnlTrId   LEFT JOIN tblCompanyLocations ON Ascot_AL3QuoteDetailTable_V2.CompanyLocationCode = tblCompanyLocations.CompanyLocationCode   LEFT JOIN lstLines ON Ascot_AL3QuoteDetailTable_V2.LineCode = lstLines.LineID   LEFT JOIN tblCompanyLines ON tblCompanyLocations.CompanyLocationGUID = tblCompanyLines.CompanyLocationGUID    AND  lstLines.LineGuid = tblCompanyLines.LineGUID    AND  Ascot_AL3QuoteDetailTable_V2.StateID = tblCompanyLines.StateID    AND  ((tblCompanyLines.ParentCompanyLineGUID = P.CompanyLineGUID)       OR ((tblCompanyLines.ParentCompanyLineGUID IS NULL) AND (P.CompanyLineGUID = tblCompanyLines.CompanyLineGUID))      )  --select '#PolsToCreate' As PolsToCreate, * from #PolsToCreate  --select '#PolsToCreateDetails' AS PolsToCreateDetails, * from #PolsToCreateDetails       --ALTER TABLE #PolsToCreate ADD InsuredID int   ALTER TABLE #PolsToCreate ADD SubmissionGroupID int   ALTER TABLE #PolsToCreate ADD QuoteID int   --ALTER TABLE #PolsToCreate ADD ProducerContactID int     --SELECT * FROM #PolsToCreate         DECLARE @MGASystemsUserGuid uniqueidentifier   SELECT @MGASystemsUserGuid = UserGuid FROM tblUsers WHERE Username = 'Admin1'     DECLARE @DnlTrId uniqueidentifier     IF OBJECT_ID('Cur') IS NOT NULL    BEGIN     CLOSE Cur     DEALLOCATE Cur   END     DECLARE Cur Cursor FAST_FORWARD FORWARD_ONLY   FOR SELECT DnlTrId FROM #PolsToCreate     OPEN Cur   FETCH Cur INTO @DnlTrId      DECLARE @preblocking int   SET @preblocking=1       WHILE @preblocking > 0    BEGIN     SELECT @preblocking=COUNT(*)      FROM master.sys.dm_exec_requests     WHERE blocking_session_id <> 0          IF @preblocking > 0      BEGIN      raiserror('Something is pre-blocking wait 10 seconds', 0, 1) with nowait;      WAITFOR DELAY '00:00:10' --10 SECONDS     END    END       IF OBJECT_ID('tempdb..#InvoiceInstallmentsTable') IS NOT NULL   BEGIN      DROP TABLE #InvoiceInstallmentsTable     END     CREATE TABLE #InvoiceInstallmentsTable   (    QuoteID int,    EffectiveDate datetime,    ExpirationDate datetime,    NumInstallments int,    Installment int,    InstallmentDueDate datetime,    BillingCode varchar(100),    InstallmentMod decimal(20, 19)   )     IF OBJECT_ID('tempdb..#ConfigurationsTable') IS NOT NULL   BEGIN      DROP TABLE #ConfigurationsTable     END     CREATE TABLE #ConfigurationsTable   (    ID int,    StartingOnPoliciesEffective smalldatetime,    QuotingLocationGuid uniqueidentifier,    IssuingLocationGuid uniqueidentifier,    UnderwriterGuid uniqueidentifier,    IssuedByUserID int,    BoundByUserID int,    CostCenterID int,    BrokerCommissionFeeChargeCode int,    ProgramID int,    UnderwritingAssistantGuid uniqueidentifier,    AutoApplyFees bit,    CopyNotesandDocs BIT,    ProducerContactID INT,    ProducerLocationID int,    BillingTypeID INT,    CompanyLocationCode INT,    UseUWCloseDate BIT   )     WHILE @@Fetch_status=0    BEGIN     BEGIN TRY        BEGIN TRAN       DECLARE @PolicyNumber varchar(50)       DECLARE @datebilled datetime       DECLARE @policyIndicator varchar(5)       DECLARE @BusinessTypeID INT        DECLARE @CompanyLocationCode INT       DECLARE @InsuredFirstName VARCHAR (max)       DECLARE @InsuredLastName VARCHAR (max)        DECLARE @InsuredAddress2 VARCHAR (max)        DECLARE @InsuredFirstLastName VARCHAR (max)          SELECT  @PolicyNumber=PolicyNumber,          @datebilled = BillDate,          @policyIndicator = PolicyIndicator,         @BusinessTypeID =BusinessTypeID,         @CompanyLocationCode = CompanyCode,         @InsuredFirstName = InsuredFirstName,         @InsuredLastName = InsuredLastName,         @InsuredAddress2 =InsuredAddress2                FROM #PolsToCreate        WHERE DnlTrId=@DnlTrId         PRINT @PolicyNumber;              IF @datebilled IS NULL       BEGIN        SET @datebilled = getdate()                         END           INSERT INTO #ConfigurationsTable       SELECT  Ascot_tblAL3ProgramConfigurations_v2.ID,          Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective,          Ascot_tblAL3ProgramConfigurations_v2.QuotingLocationguid,          Ascot_tblAL3ProgramConfigurations_v2.IssuingLocationguid,          Ascot_tblAL3ProgramConfigurations_v2.UnderwriterGuid,          Ascot_tblAL3ProgramConfigurations_v2.IssuedByUserID,          Ascot_tblAL3ProgramConfigurations_v2.BoundByUserID,          Ascot_tblAL3ProgramConfigurations_v2.CostCenterID,          Ascot_tblAL3ProgramConfigurations_v2.BrokerCommissionFeeChargeCode,          Ascot_tblAL3ProgramConfigurations_v2.ProgramID,          Ascot_tblAL3ProgramConfigurations_v2.UnderwritingAssistantGuid,          Ascot_tblAL3ProgramConfigurations_v2.AutoApplyFees,          Ascot_tblAL3ProgramConfigurations_v2.CopyNotesandDocs,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerContactID,          ASCOT_tblAL3ProgramConfigurations_V2.ProducerLocationID,          ASCOT_tblAL3ProgramConfigurations_V2.BillingTypeID,                ASCOT_tblAL3ProgramConfigurations_V2.CompanyLocationCode,          ASCOT_tblAL3ProgramConfigurations_V2.UseUWCloseDate         FROM  Ascot_tblAL3ProgramConfigurations_v2       INNER JOIN #PolsToCreate P ON P.ProducerCode = ISNULL(NULLIF(Ascot_tblAL3ProgramConfigurations_v2.ProducerLocationID, 0), P.ProducerCode)        AND  P.LineCode = Ascot_tblAL3ProgramConfigurations_v2.LineID        AND  P.CompanyCode = Ascot_tblAL3ProgramConfigurations_v2.CompanyLocationCode        AND  DATEDIFF(d, P.PolicyEffectiveDate, Ascot_tblAL3ProgramConfigurations_v2.StartingOnPoliciesEffective) <= 0        AND  Ascot_tblAL3ProgramConfigurations_v2.SourceID = @ImportSource         DECLARE @ConfigurationID int         SELECT TOP 1 @ConfigurationID = C.ID       FROM #ConfigurationsTable C       WHERE C.CompanyLocationCode = @CompanyLocationCode       ORDER BY C.StartingOnPoliciesEffective DESC         DECLARE @QuotingLocationGuid uniqueidentifier       DECLARE @QuotingLocationID int       DECLARE @IssuingLocationGuid uniqueidentifier       DECLARE @UnderwriterGuid uniqueidentifier       DECLARE @IssuedByUserID int       DECLARE @BoundByUserID int       DECLARE @CostCenterID int       DECLARE @BrokerCommissionFeeChargeCode int       DECLARE @ProgramID int       DECLARE @UnderwritingAssistantGuid uniqueidentifier       DECLARE @RunAutoApplyFees bit       DECLARE @CopyNotesandDocs bit       DECLARE @ProducerContactID int       DECLARE @ProducerLocationID int       DECLARE @BillingTypeID int       DECLARE @clientofficeID INT       DECLARE @AutoApplyFees bit       DECLARE @UseUWCloseDate BIT = 0  -- TFS 92747         SELECT @QuotingLocationGuid = QuotingLocationGuid,         @IssuingLocationGuid = IssuingLocationGuid,         @UnderwriterGuid = UnderwriterGuid,         @IssuedByUserID = IssuedByUserID,         @BoundByUserID = BoundByUserID,         @CostCenterID = CostCenterID,         @BrokerCommissionFeeChargeCode = BrokerCommissionFeeChargeCode,         @ProgramID = ProgramID,         @UnderwritingAssistantGuid = UnderwritingAssistantGuid,         @RunAutoApplyFees = AutoApplyFees,         @CopyNotesandDocs = CopyNotesandDocs,         @ProducerContactID = ProducerContactID,         @ProducerLocationID = ProducerLocationID,         @BillingTypeID = ISNULL(BillingTypeID,3), -- Default this to agnecy,         @AutoApplyFees = AutoApplyFees,         @UseUWCloseDate = UseUWCloseDate         FROM #ConfigurationsTable       WHERE ID = @ConfigurationID         SELECT @QuotingLocationID = tblClientOffices.OfficeID       FROM tblClientOffices       WHERE tblClientOffices.OfficeGuid = @QuotingLocationGuid         IF @ConfigurationID IS NULL       BEGIN          raiserror('No configuration found for ProducerCode, LineCode, CompanyCode, StartingOnPoliciesEffective combination', 15, 1) with nowait;         END         IF @ProducerLocationID = 0       BEGIN          SELECT @ProducerLocationID = ProducerCode        FROM #PolsToCreate         WHERE DnlTrId=@DnlTrId         END         -- TFS 87790 Get the quoting location office id used in spaccountingtransfer       select @clientofficeID =  officeid from tblclientoffices where officeguid = @QuotingLocationGuid         --make sure it doesn't exist.       DECLARE @AlreadyExists int       SELECT  @AlreadyExists=COUNT(*)        FROM  tblQuotes        OUTER APPLY (           SELECT TOP 1 RewriteQ.ControlNo,              RewriteQ.QuotingLocationGuid           FROM tblQuotes SubQ           INNER JOIN tblQuotes RewriteQ ON SubQ.QuoteGuid = RewriteQ.RewriteOfQuoteGuid           WHERE SubQ.ControlNo = tblQuotes.ControlNo          ) As RewriteTable       WHERE  PolicyNumber=@PolicyNumber       AND   tblQuotes.QuotingLocationGuid = @QuotingLocationGuid       AND   EXISTS(SELECT * FROM tblCompanyLines WHERE tblCompanyLines.CompanyLineGUID = tblQuotes.CompanyLineGuid AND tblCompanyLines.EnforceUniquePolicyNumbers = 1)       AND   ISNULL(RewriteTable.QuotingLocationGuid, tblQuotes.QuotingLocationGuid) = tblQuotes.QuotingLocationGuid       --in some cases an Ascot policy is being cancelled and rewritten to an Ethos policy that then needs to create a matching Ascot policy.        --This check is failing the creation in that case so check to see if there is a rewrite of this policy and if its quoting location matches this policys quoting location       --if the quoting locations match then don't create the policy           IF @AlreadyExists > 0        BEGIN         raiserror('Policy Already Exists', 15, 1) with nowait;        END         DECLARE @QuotingOfficeID int       SELECT @QuotingOfficeID = OfficeID       FROM tblClientOffices WHERE OfficeGuid = @QuotingLocationGuid         /*       TFS 92747-- Don't allow a policy to be inserted if the underwriting  close date is prior the policy invoice posting date       */         IF @UseUWCloseDate = 1       BEGIN             DECLARE @policyUW_Closedate DATETIME         DECLARE @INVOICE_GLCOMPANYID INT          DECLARE @IDATE DATETIME               DECLARE @Effectivedate datetime         DECLARE @ErrorMessage_UWCloseDate VARCHAR(500)                 SELECT @policyUW_Closedate = f.UWCloseDate, @INVOICE_GLCOMPANYID = co.OfficeID , @Effectivedate = v.PolicyEffectiveDate        FROM dbo.Ascot_AL3PolicyMasterTable v        JOIN dbo.lstlines l ON l.LineID = v.LineCode        JOIN dbo.Ascot_tblAL3ProgramConfigurations c ON c.LineID = v.LineCode        JOIN dbo.tblClientOffices co ON co.OfficeGUID = c.QuotingLocationGuid        JOIN dbo.tblfin_AccountingLocks f ON f.GlCompanyId = co.OfficeID             WHERE v.DnlTrId = @DnlTrId           --NEW CODE TO DETERMINE WHTHER OR NOT TO USE THE INVOICE DATE OR THE EFFECTIVE DATE OF COVERAGE         --This logic is taken from base code spFin_PostInvoice column (postdate)        DECLARE @POSTDATECONFIG CHAR(1)        SELECT @POSTDATECONFIG = ISNULL(SETTINGSTRINGVALUE, 'B') FROM TBLFIN_EXTENDEDSETTINGS WHERE         GLCOMPANYID = @INVOICE_GLCOMPANYID AND SETTING = 'PostDateConfiguration'         SET @IDATE = (SELECT CASE WHEN @POSTDATECONFIG = 'B' THEN @datebilled ELSE CASE WHEN @datebilled > @EFFECTIVEDATE THEN @datebilled ELSE @EFFECTIVEDATE END END)                IF @IDATE < @policyUW_Closedate          BEGIN          SET @ErrorMessage_UWCloseDate = 'The policy did not import because the bill date / invoice post date is prior to the underwriting close date'          RAISERROR(@ErrorMessage_UWCloseDate,15,1)         END       END           --insert the insured       --after discussion there is no clearance here       ----LEEDISABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ----LEEDISABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              --select top 1 * from tblInsureds       raiserror('tblInsureds', 0, 1) with nowait;         -- Insert it as a coproration or Individual           --INSURED INDIVIDUAL       If ISNULL(@InsuredFirstName,'')<> ''       BEGIN        SET @InsuredFirstLastName = @InsuredFirstName + ' ' + @InsuredLastName          INSERT INTO tblInsureds          (             RiskID,             BusinessTypeID,             PolicyName,             FirstName,            LastName,             Name,             StatusID,             Soundex,             StrippedName,             StrippedPolicyName,             NumSubmissions,             DBA)           SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                     4, -- select * from lstBusinessTypes where businesstype = 'Individual'            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            1,            SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(@InsuredFirstLastName))), 0, 51),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            SUBSTRING(LTRIM(RTRIM(@InsuredFirstLastName)), 0, 501),            1,            SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)         FROM  #PolsToCreate p         WHERE  DnlTrId=@DnlTrId         AND  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)       END         ELSE        --INSURED CORPORATE            BEGIN          INSERT INTO tblInsureds (RiskID, BusinessTypeID, PolicyName, CorporationName, Name, StatusID, Soundex, StrippedName, StrippedPolicyName, NumSubmissions, DBA)        SELECT  CONVERT(varchar(100), InsuredID) + '-' + CONVERT(varchar(10), @ImportSource),                    13, -- select * from lstBusinessTypes where businesstype = 'Corporation'           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           SUBSTRING(LTRIM(RTRIM(p.InsuredName)), 0, 501),           1,           SUBSTRING(dbo.SoundexAlphaFunction(LTRIM(RTRIM(p.InsuredName))), 0, 51),           SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),           SUBSTRING(REPLACE(LTRIM(RTRIM(p.Insuredname)), ' ', ''), 0, 501),           1,           SUBSTRING(LTRIM(RTRIM(p.DBAName)), 0, 501)        FROM  #PolsToCreate p        WHERE  DnlTrId=@DnlTrId        and  CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource) not in (Select ISNULL(RiskID, '') from tblInsureds)         END              ----LEEENABLE TRIGGER dbo.tblInsureds_DuplicateSSNFEINCheck on dbo.tblInsureds;       ----LEEENABLE TRIGGER dbo.ParseOFAC_Insureds on dbo.tblInsureds              --end-------------------------------------------------------------------------------------------------------------------              --add the insureds location       raiserror('tblInsuredLocations', 0, 1) with nowait;              INSERT INTO tblInsuredLocations (DeliveryMethodID, LocationTypeID, Address1, Address2, City, State, ZipCode, County, ISOCountryCode, Name, InsuredGuid)       SELECT  1,          1,          SUBSTRING(RTRIM(LTRIM(p.InsuredAddress)), 0, 251),          SUBSTRING(RTRIM(LTRIM(@InsuredAddress2)), 0, 251),          SUBSTRING(RTRIM(LTRIM(p.InsuredCity)), 0, 51),          RTRIM(LTRIM(p.InsuredState)),          SUBSTRING(RTRIM(LTRIM(p.InsuredZip)), 0, 11),          SUBSTRING(RTRIM(LTRIM(p.insuredcounty)), 0, 51),          'USA' AS ISOCountryCode,           'Mailing' AS Name,          i.InsuredGuid       FROM  #PolsToCreate p       INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       WHERE  DnlTrId=@DnlTrId       and  NOT EXISTS(SELECT * FROM tblInsuredLocations WHERE tblInsuredLocations.InsuredGUID = I.InsuredGUID AND tblInsuredLocations.LocationTypeID = 1)           --Enable trigger tblInsuredLocations_OnlyOnePrimary on dbo.tblInsuredLocations       --end-------------------------------------------------------------------------------------------------------------------              --add submission       raiserror('tblSubmissionGroup', 0, 1) with nowait;           -- TFS 86643   Allow the program to dynamically assign a producer contact from designated producer location if one is not specified from the  config table.       IF ISNULL(@ProducerContactID,0) = 0             BEGIN        SELECT  TOP 1 @ProducerContactID = ProducerContactID FROM tblProducerContacts pc join tblProducerLocations p on pc.ProducerLocationGUID = p.ProducerLocationGUID WHERE p.ProducerLocationID = @ProducerLocationID       END         INSERT INTO tblSubmissionGroup (ProducerLocationGuid, ProducerContactID, InsuredGuid, DateSubmitted, AddedByUserGuid)       SELECT  tblProducerLocations.ProducerLocationGuid,          --(SELECT TOP 1 ProducerContactID FROM tblProducerContacts pc WHERE pc.ProducerLocationGuid = tblProducerLocations.ProducerLocationGUID),          @ProducerContactID,          i.InsuredGuid,          getdate(),          '5be2621d-4bff-44de-b7d7-17fd01c90c85'        FROM  #PolsToCreate p       INNER JOIN tblInsureds i ON i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       WHERE  DnlTrId=@DnlTrId              UPDATE  #PolsToCreate       SET   SubmissionGroupID=scope_identity()       WHERE  DnlTrId=@DnlTrId                       --UPDATE  #PolsToCreate       --SET   ProducerContactID=s.ProducerContactID       --FROM  #PolsToCreate p       --INNER JOIN tblSubmissionGroup s ON s.SubmissionGroupID=p.SubmissionGroupID       --WHERE  DnlTrId=@DnlTrId;       --end-------------------------------------------------------------------------------------------------------------------           --add policy       ----LEEDISABLE TRIGGER dbo.RecordQuoteStatusChange on dbo.tblQuotes       raiserror('tblQuotes', 0, 1) with nowait;                INSERT INTO tblQuotes (        SubmissionGroupGuid,        QuotingLocationGuid,        IssuingLocationGuid,        CompanyLocationGuid,        ControlGuid,        LineGuid,        QuoteStatusID,         EffectiveDate,         ExpirationDate,         PolicyTypeID,         StateID,        ProducerContactGuid,        UnderwriterUserGuid,         RetailerGuid,         TACSRUserGuid,        PolicyNumber,         PolicyNumberIndex,         SIC_Code,        BillingTypeID,        MinimumEarnedPercentage,         DateIssued,         IssuedByUserID,        DateBound,        BoundByUserID,         InsuredDBA,         InsuredFEIN,         InsuredSSN,         InsuredBusinessTypeID,         InsuredPolicyName,         InsuredCorporationName,         InsuredSalutation,         InsuredFirstName,         InsuredMiddleName,         InsuredLastName,        InsuredAddress1,         InsuredAddress2,         InsuredCity,         InsuredState,         InsuredCounty,         InsuredISOCountryCode,         InsuredZipCode,         InsuredPhone,         InsuredFax,        ProducerLocationID,         ProducerName,         ProducerLocationName,         ProducerAddress1,         ProducerAddress2,         ProducerCity,         ProducerCounty,         ProducerState,         ProducerISOCountryCode,         ProducerZipCode,         ProducerPhone,         ProducerFax,         FinanceCompanyGuid,         CompanyLineGuid,         AccountNumber,         CostCenterID,         InspectionCompanyID,         QuickQuote,         InstallmentBillingQuoteOptionID,         Auditable,         ControlNo,        UnderwritingAssistantGuid,        QuoteStatusReasonID,        --TFS 90517   added Renewal logic to populate renewal fields on tblquotes        RenewalOfControlNum,        RenewalOfQuoteGuid       )              SELECT  s.SubmissionGroupGuid,          @QuotingLocationGuid AS QuotingLocationGuid,           @IssuingLocationGuid AS IssuingLocationGuid,          p.CompanyLocationGuid,          NEWID(),          p.LineGuid,          1 as QuoteStatusID,          p.PolicyEffectiveDate,          p.PolicyExpirationDate,          CASE p.PolicyIndicator WHEN 'N' THEN 1 WHEN 'R' THEN 2 ELSE NULL END,          p.PremiumState,          pc.ProducerContactGUID,                    --@UnderwriterGuid as UnderwriterGuid,        --[] UnderwriterGuid          /*          (           select UnderwriterGuid            from Ascot_tblParentCaptive           where Ascot_tblParentCaptive.ID = 2 --fix this to use based on program id          ) as UnderwriterUserGuid,           */          P.UnderwriterGuid,                    NULL,          NULL,          p.PolicyNumber,          NULL,          NULL,          --3,        --BillingTypeID,          @BillingTypeID,            NULL AS MinimumEarnedPercentage,           p.dateissued AS DateIssued,           @IssuedByUserID AS IssuedByUserID,           getdate() AS DateBound,          @BoundByUserID AS BoundByUserID,           NULL AS InsuredDBA,           NULL AS InsuredFEIN,           NULL AS InsuredSSN,           InsuredTable.BusinessTypeID,           SUBSTRING(InsuredTable.[Name], 0, 501),           SUBSTRING(InsuredTable.CorporationName, 0, 501),           NULL AS InsuredSalutation,           NULL AS InsuredFirstName,           NULL AS InsuredMiddleName,           NULL AS InsuredLastName,          InsuredTable.Address1,           InsuredTable.Address2,           InsuredTable.City,           InsuredTable.[State],           '' AS InsuredCounty,           InsuredTable.ISOCountryCode,           InsuredTable.ZipCode,           NULL AS InsPhone,           NULL AS InsFax,          pl.ProducerLocationID,           pr.ProducerName,           pl.Name AS ProdLocationName,           pl.Address1 AS ProdAddress,           pl.Address2 AS ProdAddress2,           pl.City AS ProdCity,           pl.County,           pl.State AS ProdState,           pl.ISOCountryCode AS ProdCountry,           pl.ZipCode AS ProdZip,           pl.Phone,           pl.Fax,           NULL AS finance,           p.CompanyLineGUID,           p.AccountNumber AS AccountNumber,          @CostCenterID AS CostCenterID,           NULL AS Insp,           0 AS QQ,           NULL AS InstallM,           0 AS audit,           ISNULL((SELECT MAX(ControlNo) FROM dbo.tblQuotes), 0)+1,                              @UnderwritingAssistantGuid,                    p.QuoteStatusReasonID,            --TFS 90517  added Renewal logic to populate renewal fields on tblquotes          --This needs to be tested in Ascot TEST before  it goes live 9/23/22                    CASE p.PolicyIndicator            WHEN 'N' THEN NULL            WHEN 'R' THEN p.RenewalOfAccountNumber            ELSE NULL END, --RenewalOfControlNum,                    CASE p.PolicyIndicator            WHEN 'N' THEN NULL            WHEN 'R' THEN (select top 1 quoteguid from tblQuotes where ControlNo = p.RenewalOfAccountNumber order by QuoteID desc)            ELSE NULL END --RenewalOfQuoteguid               --1 + (Select Top 1 ControlNo from tblQuotes order by ControlNo Desc) AS ControlNo --This is a place holder we will update right before committing.       FROM  #PolsToCreate p       CROSS APPLY (           SELECT TOP 1 i.InsuredGUID,              i.BusinessTypeID,              i.[Name],              i.CorporationName,              il.Address1,               il.Address2,               il.City,               il.[State],              il.ISOCountryCode,               il.ZipCode           FROM tblInsureds i           INNER JOIN tblInsuredLocations il ON il.InsuredGuid=i.InsuredGuid           WHERE i.RiskID = CONVERT(varchar(100), p.InsuredID) + '-' + CONVERT(varchar(10), @ImportSource)           and il.LocationTypeID = 1          ) As InsuredTable           INNER JOIN tblSubmissionGroup s ON s.InsuredGuid=InsuredTable.InsuredGUID       INNER JOIN tblProducerLocations pl ON pl.ProducerLocationGuid=s.ProducerLocationGuid       INNER JOIN tblProducers pr ON pr.ProducerGuid=pl.ProducerGuid       INNER JOIN tblProducerContacts pc on pc.ProducerContactID = s.ProducerContactID       --join from dnltrd to the userguid       WHERE  p.DnlTrId=@DnlTrId       AND   P.SubmissionGroupID = s.SubmissionGroupID           DECLARE @QuoteID int       SET @QuoteID=scope_identity()         DECLARE @QuoteGuid uniqueidentifier       SELECT @QuoteGuid = QuoteGuid FROM tblQuotes WHERE QuoteID = @QuoteID         --insert into GreyHawk_tblQuotes       insert into GreyHawk_tblQuotes        (Quoteguid, BusinessType,ReinsuredName,DomiciliaryJurisdiction,NAICCompanyCode,ReinsurersFedIDNumber)       SELECT       @QuoteGuid,       p.BusinessTypeId ,       CASE WHEN p.BusinessTypeId = 2 THEN 'Amfed National Insurance Company'       else Null end as ReinsuredName,       CASE WHEN p.BusinessTypeId = 2 THEN 'MS'       else Null end as DomiciliaryJurisdiction,       CASE WHEN p.BusinessTypeId = 2 THEN '11208'       else Null end as NAICCompanyCode,       CASE WHEN p.BusinessTypeId = 2 THEN '64-0947790'       else Null end as ReinsurersFedIDNumber       from #PolsToCreate p where p.DnlTrId=@DnlTrId         --values       -- (@QuoteGuid, (select top 1 p.BusinessTypeId from #PolsToCreate p where p.DnlTrId=@DnlTrId))                  UPDATE Q SET CostCenterID = ISNULL(CostCenterTable.GroupID, Q.CostCenterID)       FROM tblQuotes Q       OUTER APPLY (           SELECT TOP 1 GroupID           FROM dbo.GetQuoteCostCenters(@QuoteGuid) T           ORDER BY T.IsDefault DESC, T.SystemDefined DESC, T.EffectiveDate DESC          ) As CostCenterTable       WHERE Q.QuoteGUID = @QuoteGuid           UPDATE  #PolsToCreate       SET   QuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;         UPDATE  Ascot_AL3PolicyMasterTable_v2       SET   CreatedQuoteID=@QuoteID       WHERE  DnlTrId=@DnlTrId;                --end-------------------------------------------------------------------------------------------------------------------              --add quote details       raiserror('tblQuoteDetails', 0, 1) with nowait;         --for monoline policies       INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       SELECT  q.QuoteGuid,          p.CompanyLineGuid,          (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=p.CompanyLocationGuid),          1,          --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),          --TFS 87790 Get dynamic  commissions          ISNULL(p.producerComm,dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, q.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),          0,          30 as TermsOfPayment,          CASE WHEN @ProgramID = 0           THEN ProgramCodeTable.ProgramID           ELSE @ProgramID          END       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN lstLines ON q.LineGuid = lstLines.LineGUID       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       OUTER APPLY (           SELECT TOP 1 tblCompanyProgramCodes.ProgramID           FROM tblCompanyProgramCodes            LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID           LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID           WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')           AND ( (tblCompanyProgramCodes.LineGUID = q.LineGUID OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode)))           --AND ( tblCompanyProgramCodes.LineGUID = q.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')           --AND ( q.EffectiveDate BETWEEN Convert(varchar(12),tblCompanyProgramCodes.ContractEffective,101) AND Convert(varchar(12),tblCompanyProgramCodes.ContractExpiration,101))           AND ( q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)           AND (ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'  AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Special Program for Highland' )           ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = q.StateID THEN 1 ELSE 0 END +             CASE WHEN ((tblCompanyProgramCodes.LineGUID = q.LineGuid  OR (tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000' AND tblCompanyProgramCodes.GroupCode = lstLines.GroupCode))) THEN 1 ELSE 0 END +             --CASE WHEN tblCompanyProgramCodes.LineGUID = q.LineGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +             --CASE WHEN tblCompanyProgramCodes.GroupCode = lstLines.GroupCode THEN 1 ELSE 0 END DESC,             tblCompanyProgramCodes.ContractEffective DESC          ) As ProgramCodeTable       WHERE  DnlTrId=@DnlTrId       AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)              --for package policies       INSERT INTO tblQuoteDetails( QuoteGuid, CompanyLineGuid, CompanyContactGuid, CompanyCommission, ProducerCommission, RaterID, TermsOfPayment,ProgramID)       SELECT  q.QuoteGuid,          DetailTable.CompanyLineGuid,          (SELECT TOP 1 CompanyContactGuid FROM tblCompanyContacts WHERE CompanyLocationGuid=DetailTable.CompanyLocationGuid),          1,          --dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate),          --TFS 87790 Get dynamic  commissions          ISNULL(p.producerComm, dbo.GetProducerCommission(tblProducerLocations.ProducerLocationGuid, DetailTable.CompanyLineGuid, Case when p.PolicyIndicator = 'R' then 1 else 0 End, Q.EffectiveDate)),          0,          30 as TermsOfPayment,          (           case             when (DetailTable.ProgramId is not null) then              DetailTable.ProgramId             else             CASE WHEN @ProgramID = 0              THEN ProgramCodeTable.ProgramID              ELSE @ProgramID             END            end          ) as ProgramId       FROM  #PolsToCreate p       CROSS APPLY (           SELECT DISTINCT SubPD.CompanyLineGuid,               SubPD.CompanyLocationGuid,               SubCL.LineGUID,               SubPD.StateID,               SubPD.ProgramId           FROM #PolsToCreateDetails SubPD           INNER JOIN tblCompanyLines SubCL ON SubPD.CompanyLineGuid = SubCL.CompanyLineGuid           WHERE SubPD.DnlTrId = P.DnlTrId           AND SubPD.StateID = P.StateOfIssuance          ) AS DetailTable       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN lstLines ParentLine ON q.LineGuid = ParentLine.LineGUID       Inner Join  tblProducerLocations on tblProducerLocations.ProducerLocationID = p.ProducerCode       OUTER APPLY (           SELECT TOP 1 tblCompanyProgramCodes.ProgramID           FROM tblCompanyProgramCodes            LEFT JOIN Greyhawk_tblCompanyProgramCodes ON tblCompanyProgramCodes.ProgramID = Greyhawk_tblCompanyProgramCodes.ProgramID           LEFT JOIN Ascot_lstProgramTypes ON Greyhawk_tblCompanyProgramCodes.ProgramTypeID = Ascot_lstProgramTypes.ProgramTypeID           WHERE ( tblCompanyProgramCodes.StateID = q.StateID OR tblCompanyProgramCodes.StateID = '&&')           AND ( tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid OR tblCompanyProgramCodes.LineGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.IssuingOfficeGUID = @IssuingLocationGuid OR tblCompanyProgramCodes.IssuingOfficeGUID = '00000000-0000-0000-0000-000000000000')           AND ( tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid OR tblCompanyProgramCodes.CompanyLocationGUID = '00000000-0000-0000-0000-000000000000')           AND (q.EffectiveDate BETWEEN tblCompanyProgramCodes.ContractEffective AND tblCompanyProgramCodes.ContractExpiration)           AND ISNULL(Ascot_lstProgramTypes.[Description], '') <> 'Supplemental Program'           ORDER BY CASE WHEN tblCompanyProgramCodes.StateID = DetailTable.StateID THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.LineGUID = DetailTable.LineGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.IssuingOfficeGUID = q.IssuingLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.CompanyLocationGUID = q.CompanyLocationGuid THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.ParentLineGUID = q.LineGUID THEN 1 ELSE 0 END +             CASE WHEN tblCompanyProgramCodes.GroupCode = ParentLine.GroupCode THEN 1 ELSE 0 END DESC,             tblCompanyProgramCodes.ContractEffective DESC          ) As ProgramCodeTable       --left join Ascot_AL3QuoteDetailTable_v2       --  on p.DnlTrId = Ascot_AL3QuoteDetailTable_v2.DnlTrId       WHERE  p.DnlTrId=@DnlTrId         UPDATE PD SET CreatedQuoteDetailID = tblQuoteDetails.QuoteDetailID       FROM #PolsToCreateDetails PD       INNER JOIN #PolsToCreate P ON PD.DnlTrId = P.DnlTrId       INNER JOIN tblQuotes ON P.QuoteID = tblQuotes.QuoteID       INNER JOIN tblQuoteDetails ON tblQuotes.QuoteGUID = tblQuoteDetails.QuoteGuid        AND tblQuoteDetails.CompanyLineGuid = PD.CompanyLineGuid       WHERE PD.StateID = P.StateOfIssuance       -- ***** ADD YOUR COST CENTER UPDATE HERE *****  -- Now all quote details are inserted, safe to update cost center    -- Get the ControlNo for logging  DECLARE @ControlNoForLog int  SELECT @ControlNoForLog = ControlNo FROM tblQuotes WHERE QuoteID = @QuoteID        -- Call the cost center update  EXEC UpdateCostCenter_AscotCaptives @QuoteGUID = @QuoteGuid  EXEC dbo.UpdateCommission_AscotCaptives @QuoteGUID = @QuoteGuid  -- ***** END COST CENTER UPDATE *****              --end-------------------------------------------------------------------------------------------------------------------                  --add quote option       --for monoline policies       raiserror('tblQuoteOptions', 0, 1) with nowait;       INSERT INTO tblQuoteOptions (QuoteGUID, LineGUID, CompanyLocationID, DateCreated, Quote, Bound, CompanyInstallmentID)       SELECT  q.QuoteGuid,          q.LineGuid,          c.CompanyLocationCode,          getdate(),          1,          1,          NULL       FROM  #PolsToCreate p       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN  tblCompanyLines cl ON cl.CompanyLineGuid=p.CompanyLineGuid       INNER JOIN tblCompanyLocations c ON c.CompanyLocationGuid = cl.CompanyLocationGuid       WHERE  DnlTrId=@DnlTrId       AND NOT EXISTS(SELECT * FROM #PolsToCreateDetails PD WHERE PD.DnlTrId = p.DnlTrId)         --for package policies       raiserror('tblQuoteOptions', 0, 1) with nowait;       INSERT INTO tblQuoteOptions (QuoteGUID, LineGUID, CompanyLocationID, DateCreated, Quote, Bound, CompanyInstallmentID)       SELECT  q.QuoteGuid,          DetailTable.LineGuid,          DetailTable.CompanyLocationCode,          getdate(),          1,          1,          NULL       FROM  #PolsToCreate p       CROSS APPLY (           SELECT DISTINCT SubPD.LineGuid,               SubPD.CompanyLocationCode           FROM #PolsToCreateDetails SubPD           WHERE SubPD.DnlTrId = P.DnlTrId           AND SubPD.StateID = P.StateOfIssuance          ) AS DetailTable       INNER JOIN tblQuotes q ON q.QuoteID=p.QuoteID       INNER JOIN  tblCompanyLines cl ON cl.CompanyLineGuid=p.CompanyLineGuid       --INNER JOIN tblCompanyLocations c ON c.CompanyLocationGuid = cl.CompanyLocationGuid       WHERE  DnlTrId=@DnlTrId         UPDATE PD SET Cr
UpdateCostCenter_AscotCaptives	CREATE PROCEDURE [dbo].[UpdateCostCenter_AscotCaptives]      @QuoteGUID UNIQUEIDENTIFIER  AS  BEGIN      SET NOCOUNT ON;      DECLARE @NewCostCenterID INT      DECLARE @CurrentCostCenterID INT      DECLARE @ProgramCode VARCHAR(50)      DECLARE @ProgramID INT      DECLARE @CompanyLocationGuid UNIQUEIDENTIFIER      DECLARE @PolicyNumber VARCHAR(100)      DECLARE @ControlNo INT      DECLARE @QuoteID INT            -- Get current quote information (without program code yet)      SELECT           @CurrentCostCenterID = tq.CostCenterID,          @CompanyLocationGuid = tq.CompanyLocationGuid,          @PolicyNumber = tq.PolicyNumber,          @ControlNo = tq.ControlNo,          @QuoteID = tq.QuoteID      FROM tblQuotes tq      WHERE tq.QuoteGUID = @QuoteGUID            -- Check if quote exists      IF @QuoteID IS NULL      BEGIN          RAISERROR('Quote not found for the provided QuoteGUID', 16, 1)          RETURN      END            -- Loop through all program codes for this quote to find the first one with a cost center mapping      SELECT TOP 1          @ProgramID = tcp.ProgramID,          @ProgramCode = tcp.ProgCode,          @NewCostCenterID = accr.CostCenterID      FROM tblQuoteDetails qd      INNER JOIN tblCompanyProgramCodes tcp ON qd.ProgramID = tcp.ProgramID      INNER JOIN dbo.Ascot_Captive_ProgramCostCenterCommission_Relations accr ON tcp.ProgramID = accr.ProgramID      WHERE qd.QuoteGUID = @QuoteGUID      ORDER BY qd.QuoteDetailID -- Or whatever ordering makes sense for priority            -- If no mapping found for any program, keep the current cost center      IF @NewCostCenterID IS NULL      BEGIN          SET @NewCostCenterID = @CurrentCostCenterID                    -- Get the first program code for logging purposes even if no mapping exists          SELECT TOP 1              @ProgramID = tcp.ProgramID,              @ProgramCode = tcp.ProgCode          FROM tblQuoteDetails qd          INNER JOIN tblCompanyProgramCodes tcp ON qd.ProgramID = tcp.ProgramID          WHERE qd.QuoteGUID = @QuoteGUID          ORDER BY qd.QuoteDetailID                    PRINT 'No Cost Center mapping found for any program on Quote ' + ISNULL(@PolicyNumber, 'QuoteID: ' + CAST(@QuoteID AS VARCHAR)) +                 ' (Control: ' + ISNULL(CAST(@ControlNo AS VARCHAR), 'NULL') + ')' +                ' - keeping current cost center: ' + ISNULL(CAST(@CurrentCostCenterID AS VARCHAR), 'NULL')      END            -- Verify the new cost center exists in tblEntityGroups      IF @NewCostCenterID IS NOT NULL AND NOT EXISTS (SELECT 1 FROM tblEntityGroups WHERE GroupID = @NewCostCenterID)      BEGIN          RAISERROR('Cost Center ID %d does not exist in tblEntityGroups', 16, 1, @NewCostCenterID)          RETURN      END            -- Update the cost center if it's different from current      IF @NewCostCenterID != @CurrentCostCenterID OR @CurrentCostCenterID IS NULL      BEGIN          UPDATE tblQuotes           SET CostCenterID = @NewCostCenterID          WHERE QuoteGUID = @QuoteGUID                    PRINT 'Updated Cost Center for Quote ' + ISNULL(@PolicyNumber, 'QuoteID: ' + CAST(@QuoteID AS VARCHAR)) +                 ' (Control: ' + ISNULL(CAST(@ControlNo AS VARCHAR), 'NULL') + ')' +                ' from ' + ISNULL(CAST(@CurrentCostCenterID AS VARCHAR), 'NULL') +                 ' to ' + CAST(@NewCostCenterID AS VARCHAR) +                ' based on Program ID: ' + CAST(@ProgramID AS VARCHAR) +                ' (Program Code: ' + ISNULL(@ProgramCode, 'NULL') + ')'      END      ELSE      BEGIN          PRINT 'No Cost Center update needed for Quote ' + ISNULL(@PolicyNumber, 'QuoteID: ' + CAST(@QuoteID AS VARCHAR)) +                 ' (Control: ' + ISNULL(CAST(@ControlNo AS VARCHAR), 'NULL') + ')' +                ' - already set to ' + CAST(@CurrentCostCenterID AS VARCHAR)      END  END

